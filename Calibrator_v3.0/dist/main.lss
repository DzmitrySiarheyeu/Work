
dist/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000038d4  00003988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038d4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001dc  00800130  00800130  000039b8  2**0
                  ALLOC
  3 .eeprom       00000200  00810000  00810000  000039b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003be8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006752  00000000  00000000  00003ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000017ec  00000000  00000000  0000a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002802  00000000  00000000  0000bbe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000078c  00000000  00000000  0000e3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ef8  00000000  00000000  0000eb74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000035ad  00000000  00000000  00010a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000230  00000000  00000000  00014019  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c4       	rjmp	.+2222   	; 0x8b0 <__ctors_end>
       2:	00 00       	nop
       4:	72 c4       	rjmp	.+2276   	; 0x8ea <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__vector_2>
       c:	6e c4       	rjmp	.+2268   	; 0x8ea <__bad_interrupt>
       e:	00 00       	nop
      10:	6c c4       	rjmp	.+2264   	; 0x8ea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c4       	rjmp	.+2260   	; 0x8ea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c4       	rjmp	.+2256   	; 0x8ea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__vector_7>
      20:	64 c4       	rjmp	.+2248   	; 0x8ea <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__vector_9>
      28:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__vector_10>
      2c:	5e c4       	rjmp	.+2236   	; 0x8ea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c4       	rjmp	.+2232   	; 0x8ea <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__vector_13>
      38:	58 c4       	rjmp	.+2224   	; 0x8ea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c4       	rjmp	.+2220   	; 0x8ea <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__vector_16>
      44:	52 c4       	rjmp	.+2212   	; 0x8ea <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__vector_18>
      4c:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__vector_19>
      50:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__vector_20>
      54:	4a c4       	rjmp	.+2196   	; 0x8ea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c4       	rjmp	.+2192   	; 0x8ea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c4       	rjmp	.+2188   	; 0x8ea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c4       	rjmp	.+2184   	; 0x8ea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c4       	rjmp	.+2180   	; 0x8ea <__bad_interrupt>
      66:	00 00       	nop
      68:	ac 08       	sbc	r10, r12
      6a:	b1 08       	sbc	r11, r1
      6c:	b8 08       	sbc	r11, r8
      6e:	bd 08       	sbc	r11, r13
      70:	c2 08       	sbc	r12, r2
      72:	c4 08       	sbc	r12, r4
      74:	c9 08       	sbc	r12, r9
      76:	78 0f       	add	r23, r24
      78:	8a 0f       	add	r24, r26
      7a:	be 0f       	add	r27, r30
      7c:	d0 0f       	add	r29, r16
      7e:	d9 0f       	add	r29, r25
      80:	db 0f       	add	r29, r27
      82:	ed 0f       	add	r30, r29
      84:	ff 0f       	add	r31, r31
      86:	11 10       	cpse	r1, r1

00000088 <__trampolines_end>:
      88:	54 45       	sbci	r21, 0x54	; 84
      8a:	58 54       	subi	r21, 0x48	; 72
      8c:	00 42       	Address 0x0000008c is out of bounds.
.word	0xffff	; ????

0000008d <str_bin_mode>:
      8d:	42 49 4e 00                                         BIN.

00000091 <str_off>:
      91:	4f 46 46 20 00                                      OFF .

00000096 <str_on>:
      96:	4f 4e 20 00                                         ON .

0000009a <str_cal_check>:
      9a:	43 68 65 63 6b 20 63 61 6c 69 62 72 61 74 69 6f     Check calibratio
      aa:	6e 2e 2e 2e 00                                      n....

000000af <str_disconnect_electrode>:
      af:	20 44 69 73 63 6f 6e 6e 65 63 74 20 70 72 6f 62      Disconnect prob
      bf:	65 20 20 20 20 00                                   e    .

000000c5 <str_cal_in_progress>:
      c5:	20 20 43 61 6c 69 62 72 61 74 69 6e 67 20 2e 2e       Calibrating ..
      d5:	2e 20 20 20 00                                      .   .

000000da <str_connect_electrode>:
      da:	20 43 6f 6e 6e 65 63 74 20 70 72 6f 62 65 20 20      Connect probe  
      ea:	20 20 20 20 20                                           

000000ef <str_null>:
      ef:	00                                                  .

000000f0 <str_current_draw>:
      f0:	49 2c 20 6d c0 00                                   I, m..

000000f6 <str_cal_error>:
      f6:	20 20 45 72 72 6f 72 20 63 61 6c 69 62 72 61 74       Error calibrat
     106:	69 6f 6e 21 00                                      ion!.

0000010b <str_cal_success>:
     10b:	20 d1 61 6c 69 62 72 61 74 69 6f 6e 20 63 6f 6d      .alibration com
     11b:	70 6c 65 74 65 00                                   plete.

00000121 <__c.3175>:
     121:	4e 6d 61 78 3a 00                                   Nmax:.

00000127 <__c.3173>:
     127:	49 44 20 20 3a 00                                   ID  :.

0000012d <str_no_conn>:
     12d:	20 20 20 6e 6f 20 63 6f 6e 6e 65 63 74 69 6f 6e        no connection
     13d:	00                                                  .

0000013e <__c.3056>:
     13e:	30 30 30 30 30 30 00                                000000.

00000145 <font>:
     145:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 7e     ......._.......~
     155:	5f 5f 5f 7e 00 48 2c 1a 09 23 13 08 64 62 36 49     ___~.H,..#..db6I
     165:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     175:	1c 00 24 18 7e 18 24 08 08 3e 08 08 00 80 70 30     ..$.~.$..>....p0
     185:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     195:	3e 41 49 41 3e 00 42 7f 40 00 72 49 49 49 46 21     >AIA>.B.@.rIIIF!
     1a5:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     1b5:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     1c5:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     1d5:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     1e5:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     1f5:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     205:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     215:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     225:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     235:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     245:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     255:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     265:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     275:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     285:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     295:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     2a5:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     2b5:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     2c5:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     2d5:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     2e5:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     2f5:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     305:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     315:	00 00 41 36 08 00 02 01 02 04 02 7c 12 11 12 7c     ..A6.......|...|
     325:	7f 49 49 49 30 7f 49 49 49 36 7f 01 01 01 01 60     .III0.III6.....`
     335:	3e 21 3f 60 7f 49 49 49 41 77 08 7f 08 77 22 49     >!?`.IIIAw...w"I
     345:	49 49 36 7f 10 08 04 7f 7f 10 09 04 7f 7f 08 14     II6.............
     355:	22 41 40 7e 01 01 7f 7f 02 04 02 7f 7f 08 08 08     "A@~............
     365:	7f 3e 41 41 41 3e 7f 01 01 01 7f 7f 09 09 09 06     .>AAA>..........
     375:	3e 41 41 41 22 03 01 7f 01 03 27 48 48 48 3f 06     >AAA".....'HHH?.
     385:	09 7f 09 06 63 14 08 14 63 7f 40 40 40 ff 0f 10     ....c...c.@@@...
     395:	10 10 7f 7f 40 7e 40 7f 7f 40 7e 40 ff 01 7f 48     ....@~@..@~@...H
     3a5:	48 30 7f 48 30 00 7f 7f 48 48 48 30 22 41 49 49     H0.H0...HHH0"AII
     3b5:	3e 7f 08 3e 41 3e 46 29 19 09 7f 20 54 54 78 40     >..>A>F)... TTx@
     3c5:	3c 4a 4a 4a 30 7c 54 54 54 28 7c 04 04 04 04 18     <JJJ0|TTT(|.....
     3d5:	a4 a4 94 78 38 54 54 54 18 6c 10 7c 10 6c 28 44     ...x8TTT.l.|.l(D
     3e5:	54 54 28 7c 20 10 08 7c 7c 20 12 08 7c 7c 10 28     TT(| ..|| ..||.(
     3f5:	44 00 40 78 04 04 7c 7c 08 10 08 7c 7c 10 10 10     D.@x..||...||...
     405:	7c 38 44 44 44 38 7c 04 04 04 7c 7c 14 14 14 08     |8DDD8|...||....
     415:	38 44 44 44 28 0c 04 7c 04 0c 4c 90 90 90 7c 08     8DDD(..|..L...|.
     425:	14 7c 14 08 44 28 10 28 44 7c 40 40 40 fc 0c 10     .|..D(.(D|@@@...
     435:	10 10 7c 7c 40 78 40 7c 7c 40 78 40 fc 04 7c 50     ..||@x@||@x@..|P
     445:	50 20 7c 50 20 00 7c 00 7c 50 50 20 28 44 54 54     P |P .|.|PP (DTT
     455:	38 7c 10 38 44 38 08 54 34 14 7c                    8|.8D8.T4.|

00000460 <font11x15>:
     460:	f0 fc 06 03 03 03 03 06 fc f0 00 07 1f 30 60 60     .............0``
     470:	60 60 30 1f 07 00 00 18 0c 06 03 ff ff 00 00 00     ``0.............
     480:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 04 06 03     ................
     490:	03 03 03 c3 fe 3c 00 00 60 70 78 6c 66 63 61 60     .....<..`pxlfca`
     4a0:	60 60 00 02 03 c3 c3 c3 c3 e3 be 1c 00 00 20 60     ``............ `
     4b0:	60 60 60 60 71 3f 1f 00 80 c0 60 30 18 0c 06 ff     ````q?....`0....
     4c0:	ff 00 00 07 07 06 06 06 06 06 7f 7f 06 00 00 fe     ................
     4d0:	ff c3 c3 c3 c3 c3 83 00 00 00 20 60 60 60 60 60     .......... `````
     4e0:	31 3f 1f 00 f0 fc 8e c6 c3 c3 c3 c3 83 00 00 0f     1?..............
     4f0:	1f 31 60 60 60 60 70 3f 1f 00 00 03 03 03 03 83     .1````p?........
     500:	e3 7b 1f 07 00 00 00 60 78 1e 07 01 00 00 00 00     .{.....`x.......
     510:	00 1c be e3 c3 c3 e3 be 1c 00 00 1e 3f 61 60 60     ............?a``
     520:	60 60 61 3f 1e 00 7c fe c7 83 83 83 83 c7 fe f8     ``a?..|.........
     530:	00 00 60 61 61 61 61 31 39 1f 0f 00 00 00 00 00     ..`aaaa19.......
     540:	00 00 00 00 00 00 00 00 00 00 00 70 70 70 00 00     ...........ppp..
     550:	00 00 00 00 fc fc 0c 0c 0c 0c 7c 7c 00 00 00 7f     ..........||....
     560:	7f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     570:	00 00 00 7f 7f 60 60 60 7f ff e0 00 00 00 00 00     .....```........
     580:	fc fc 8c 8c 8c 8c fc 78 00 00 00 7f 7f 61 61 61     .......x.....aaa
     590:	61 7f 3e 00                                         a.>.

00000594 <str_f8_5>:
     594:	20 20 20 20 20 20 20 20 52 65 73 65 74 00                   Reset.

000005a2 <str_f8_0>:
     5a2:	20 20 5b 20 45 64 69 74 20 73 65 74 74 69 6e 67       [ Edit setting
     5b2:	73 20 20 5d 00                                      s  ].

000005b7 <str_f7_7>:
     5b7:	20 20 20 20 20 20 20 20 43 61 6e 63 65 6c 00                Cancel.

000005c6 <str_f7_5>:
     5c6:	20 20 28 44 65 66 61 75 6c 74 20 20 3a 20 31 39       (Default  : 19
     5d6:	32 30 30 29 00                                      200).

000005db <str_f7_3>:
     5db:	20 20 33 38 34 30 30 20 20 35 37 36 30 30 20 31       38400  57600 1
     5eb:	31 35 32 30 30 00                                   15200.

000005f1 <str_f7_2>:
     5f1:	20 20 39 36 30 30 20 20 20 31 34 34 34 30 20 31       9600   14440 1
     601:	39 32 30 30 00                                      9200.

00000606 <str_f7_0>:
     606:	5b 20 20 20 20 20 20 42 61 75 64 72 61 74 65 20     [      Baudrate 
     616:	20 20 20 20 20 5d 00                                     ].

0000061d <str_okcn>:
     61d:	20 20 43 61 6e 63 65 6c 20 20 20 20 20 20 20 20       Cancel        
     62d:	20 20 ce ca 00                                        ...

00000632 <str_f6_3>:
     632:	20 20 20 20 2d 20 20 20 5b 20 30 31 20 5d 20 20         -   [ 01 ]  
     642:	20 2b 00                                             +.

00000645 <str_f6_0>:
     645:	5b 20 20 20 20 20 49 44 20 73 65 6e 73 6f 72 20     [     ID sensor 
     655:	20 20 20 20 20 5d 00                                     ].

0000065c <str_interval>:
     65c:	54 72 61 6e 73 6d 69 74 20 74 69 6d 65 2c 20 f1     Transmit time, .
     66c:	00                                                  .

0000066d <str_auto_send>:
     66d:	53 65 6c 66 20 74 72 61 6e 73 6d 69 74 00           Self transmit.

0000067b <str_net_mode>:
     67b:	4e 65 74 77 6f 72 6b 20 6d 6f 64 65 20 00           Network mode .

00000689 <str_baudrate>:
     689:	42 61 75 64 72 61 74 65 00                          Baudrate.

00000692 <str_id>:
     692:	49 44 00                                            ID.

00000695 <str_f2_0>:
     695:	5b 20 20 20 20 20 20 53 65 74 74 69 6e 67 73 20     [      Settings 
     6a5:	20 20 20 20 20 5d 00                                     ].

000006ac <str_exit>:
     6ac:	45 78 69 74 20 00                                   Exit .

000006b2 <str_conn_settings>:
     6b2:	43 6f 6e 6e 65 63 74 69 6f 6e 20 20 2e 2e 2e 00     Connection  ....

000006c2 <str_t_average>:
     6c2:	41 76 65 72 61 67 65 20 20 20 00                    Average   .

000006cd <str_n_max>:
     6cd:	4e 6d 61 78 00                                      Nmax.

000006d2 <str_full_tank>:
     6d2:	46 75 6c 6c 20 74 61 6e 6b 00                       Full tank.

000006dc <str_empty_tank>:
     6dc:	45 6d 70 74 79 20 74 61 6e 6b 00                    Empty tank.

000006e7 <str_param_edit>:
     6e7:	20 20 20 20 45 64 69 74 20 73 65 74 74 69 6e 67         Edit setting
     6f7:	73 20 00                                            s .

000006fa <str_modbus_error>:
     6fa:	45 72 72 6f 72 20 00                                Error .

00000701 <str_freq>:
     701:	46 72 65 71 75 65 6e 63 79 00                       Frequency.

0000070b <str_level_n>:
     70b:	4c 65 76 65 6c 2c 20 20 20 4e 00                    Level,   N.

00000716 <str_level_precent>:
     716:	4c 65 76 65 6c 2c 20 20 20 25 00                    Level,   %.

00000721 <str_f4_0>:
     721:	5b 20 20 46 72 65 71 75 65 6e 63 79 20 6f 75 74     [  Frequency out
     731:	70 75 74 20 20 5d 00                                put  ].

00000738 <str_excl>:
     738:	20 45 78 69 74 20 20 20 20 20 43 61 6c 69 62 72      Exit     Calibr
     748:	61 74 69 6f 6e 00                                   ation.

0000074e <str_f5_0>:
     74e:	5b 20 41 6e 61 6c 6f 67 20 6f 75 74 70 75 74 20     [ Analog output 
     75e:	20 20 20 20 20 5d 00                                     ].

00000765 <str_title_rs485>:
     765:	5b 20 20 20 20 20 52 53 34 38 35 20 6f 75 74 70     [     RS485 outp
     775:	75 74 20 20 20 5d 00                                ut   ].

0000077c <str_exset>:
     77c:	20 45 78 69 74 20 20 20 20 20 20 20 53 65 74 74      Exit       Sett
     78c:	69 6e 67 73 20 00                                   ings .

00000792 <str_title_rs232>:
     792:	5b 20 20 20 20 20 52 53 32 33 32 20 6f 75 74 70     [     RS232 outp
     7a2:	75 74 20 20 20 5d 00                                ut   ].

000007a9 <str_f0_7>:
     7a9:	20 20 20 20 20 20 53 77 69 74 63 68 20 6f 66 66           Switch off
     7b9:	00                                                  .

000007ba <str_f0_4>:
     7ba:	52 53 2d 34 38 35 00                                RS-485.

000007c1 <str_f0_3>:
     7c1:	52 53 2d 32 33 32 00                                RS-232.

000007c8 <str_f0_2>:
     7c8:	41 6e 61 6c 6f 67 20 20 20 20 00                    Analog    .

000007d3 <str_f0_0>:
     7d3:	5b 20 20 20 20 20 53 65 6e 73 6f 72 20 74 79 70     [     Sensor typ
     7e3:	65 20 20 20 20 5d 00                                e    ].

000007ea <STR_FW_VERSION>:
     7ea:	31 2e 30 2e 39 00                                   1.0.9.

000007f0 <STR_FW_TITLE>:
     7f0:	56 65 72 73 69 6f 6e 20 20 3a 00                    Version  :.

000007fb <STR_DEVICE_NAME>:
     7fb:	43 61 6c 69 62 72 61 74 6f 72 20 33 00              Calibrator 3.

00000808 <frame_param_adjust>:
     808:	a2 05 ef 00 ef 00 ef 00 ef 00 94 05 ef 00 1d 06     ................

00000818 <frame_baud_select>:
     818:	06 06 ef 00 f1 05 db 05 ef 00 c6 05 ef 00 b7 05     ................

00000828 <frame_id_select>:
     828:	45 06 ef 00 ef 00 32 06 ef 00 ef 00 ef 00 1d 06     E.....2.........

00000838 <frame_rs232_settings>:
     838:	95 06 92 06 89 06 7b 06 6d 06 5c 06 ac 06 ef 00     ......{.m.\.....

00000848 <frame_rs232>:
     848:	92 07 16 07 0b 07 01 07 fa 06 e7 06 dc 06 d2 06     ................
     858:	cd 06 c2 06 b2 06 ac 06                             ........

00000860 <frame_freq>:
     860:	21 07 ef 00 ef 00 ef 00 ef 00 ef 00 ef 00 38 07     !.............8.

00000870 <frame_analog>:
     870:	4e 07 ef 00 ef 00 ef 00 ef 00 ef 00 ef 00 38 07     N.............8.

00000880 <frame_rs485_main>:
     880:	65 07 ef 00 ef 00 ef 00 ef 00 ef 00 ef 00 7c 07     e.............|.

00000890 <frame_rs232_main>:
     890:	92 07 ef 00 ef 00 ef 00 ef 00 ef 00 ef 00 7c 07     ..............|.

000008a0 <frame_mode_select>:
     8a0:	d3 07 01 07 c8 07 c1 07 ba 07 ef 00 ef 00 a9 07     ................

000008b0 <__ctors_end>:
     8b0:	11 24       	eor	r1, r1
     8b2:	1f be       	out	0x3f, r1	; 63
     8b4:	cf ef       	ldi	r28, 0xFF	; 255
     8b6:	d4 e0       	ldi	r29, 0x04	; 4
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	cd bf       	out	0x3d, r28	; 61

000008bc <__do_clear_bss>:
     8bc:	23 e0       	ldi	r18, 0x03	; 3
     8be:	a0 e3       	ldi	r26, 0x30	; 48
     8c0:	b1 e0       	ldi	r27, 0x01	; 1
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <.do_clear_bss_start>

000008c4 <.do_clear_bss_loop>:
     8c4:	1d 92       	st	X+, r1

000008c6 <.do_clear_bss_start>:
     8c6:	ac 30       	cpi	r26, 0x0C	; 12
     8c8:	b2 07       	cpc	r27, r18
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <.do_clear_bss_loop>

000008cc <__do_copy_data>:
     8cc:	11 e0       	ldi	r17, 0x01	; 1
     8ce:	a0 e0       	ldi	r26, 0x00	; 0
     8d0:	b1 e0       	ldi	r27, 0x01	; 1
     8d2:	e4 ed       	ldi	r30, 0xD4	; 212
     8d4:	f8 e3       	ldi	r31, 0x38	; 56
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__do_copy_data+0x10>
     8d8:	05 90       	lpm	r0, Z+
     8da:	0d 92       	st	X+, r0
     8dc:	a0 33       	cpi	r26, 0x30	; 48
     8de:	b1 07       	cpc	r27, r17
     8e0:	d9 f7       	brne	.-10     	; 0x8d8 <__do_copy_data+0xc>
     8e2:	0e 94 54 18 	call	0x30a8	; 0x30a8 <main>
     8e6:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <_exit>

000008ea <__bad_interrupt>:
     8ea:	8a cb       	rjmp	.-2284   	; 0x0 <__vectors>

000008ec <main_event_cb.lto_priv.29>:
        }
        ApplicationEvents.LongKeyPressed = 0;
    }
}

static void main_event_cb(task_t * evt) {
     8ec:	a5 e0       	ldi	r26, 0x05	; 5
     8ee:	b0 e0       	ldi	r27, 0x00	; 0
     8f0:	ec e7       	ldi	r30, 0x7C	; 124
     8f2:	f4 e0       	ldi	r31, 0x04	; 4
     8f4:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__prologue_saves__+0xc>
     8f8:	8c 01       	movw	r16, r24
    static enum sensorType sensor_type;
    static uint32_t average_val, average_current;
    static uint8_t device_id;
    static uint8_t refresh_counter; // just to slow things down

    if (ApplicationEvents.TaskChanged) {
     8fa:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
     8fe:	82 ff       	sbrs	r24, 2
     900:	79 c0       	rjmp	.+242    	; 0x9f4 <main_event_cb.lto_priv.29+0x108>
        /* First time we entered this event */
        if (!ApplicationFlags.ExternalVoltage)
     902:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <ApplicationFlags>
     906:	80 ff       	sbrs	r24, 0
            boost_enable();
        load_frame();
     908:	29 9a       	sbi	0x05, 1	; 5
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
     90a:	a6 d7       	rcall	.+3916   	; 0x1858 <load_frame.lto_priv.57>
     90c:	87 e0       	ldi	r24, 0x07	; 7
     90e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    frameSelection.sel_end = sel_end;
     912:	88 e3       	ldi	r24, 0x38	; 56
     914:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <frameSelection.lto_priv.66+0x1>
        /* First time we entered this event */
        if (!ApplicationFlags.ExternalVoltage)
            boost_enable();
        load_frame();
        menu_item_highlight(row, 0, 7);
        redraw();
     918:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <redraw.lto_priv.56>
        item_selector = BTN_BACK;
     91c:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <item_selector.3154>
        isCalibrating = false;
     920:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <isCalibrating.3155>
        refresh_counter = 0xFF;
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <refresh_counter.3161>
    }
    return ready;
}

void ADC_enable(struct ADC_result *res) {
    result = res;
     92a:	8a ea       	ldi	r24, 0xAA	; 170
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <result.lto_priv.49+0x1>
     932:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <result.lto_priv.49>
    adc_channel = 0;
     936:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <adc_channel.lto_priv.50>
    ADMUX = 0x00; // AREF, internal Vref turned off
     93a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | // Division Factor = 16
     93e:	87 e8       	ldi	r24, 0x87	; 135
     940:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        ADC_enable(&adc);
        sensor_type = (enum sensorType) evt->type;
     944:	f8 01       	movw	r30, r16
     946:	12 81       	ldd	r17, Z+2	; 0x02
     948:	10 93 69 01 	sts	0x0169, r17	; 0x800169 <sensor_type.3157>

        if (sensor_type == SENSOR_FREQUENCY) {
     94c:	11 30       	cpi	r17, 0x01	; 1
static inline void pullup_disable() {
    PULLUP_PORT |= (1 << PULLUP_PIN);
}

static inline void pullup_enable() {
    PULLUP_PORT &= ~(1 << PULLUP_PIN);
     94e:	b9 f4       	brne	.+46     	; 0x97e <main_event_cb.lto_priv.29+0x92>
    PWM_OUT_PIN_REG |= 1 << PWM_OUT_PIN;
    reti();
}

void frequency_measurement_start() {
    TCCR1A = 0;
     950:	40 98       	cbi	0x08, 0	; 8
     952:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = 0;
     956:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

    timer_ovf_count = 0;
     95a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <timer_ovf_count>
    capture_count = 0;
     95e:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <capture_count>

    /* Prescaler = 1, capture on rising edge */
    TCCR1B = (1 << CS10) | (1 << ICES1);
     962:	81 e4       	ldi	r24, 0x41	; 65
     964:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    /* Input capture noise cancel */
    TCCR1B |= (1 << ICNC1);
     968:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     96c:	80 68       	ori	r24, 0x80	; 128
     96e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    /* Enable input capture and timer overflow interrupts */
    TIMSK1 |= (1 << ICIE1) | (1 << TOIE1);
     972:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     976:	81 62       	ori	r24, 0x21	; 33
     978:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
            pullup_enable();
            frequency_measurement_start();
        } else if (sensor_type == SENSOR_ANALOG) {
     97c:	36 c0       	rjmp	.+108    	; 0x9ea <main_event_cb.lto_priv.29+0xfe>
     97e:	12 30       	cpi	r17, 0x02	; 2
static inline void boost_disable() {
    BOOST_PORT &= ~(1 << BOOST_PIN);
}

static inline void pullup_disable() {
    PULLUP_PORT |= (1 << PULLUP_PIN);
     980:	11 f4       	brne	.+4      	; 0x986 <main_event_cb.lto_priv.29+0x9a>
     982:	40 9a       	sbi	0x08, 0	; 8
            pullup_disable();
        } else {
            bool use_rs485 = false;
            UART_init(baud_lut[baud_index]);
     984:	32 c0       	rjmp	.+100    	; 0x9ea <main_event_cb.lto_priv.29+0xfe>
     986:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     98a:	24 e0       	ldi	r18, 0x04	; 4
     98c:	e2 9f       	mul	r30, r18
     98e:	f0 01       	movw	r30, r0
     990:	11 24       	eor	r1, r1
     992:	e8 5e       	subi	r30, 0xE8	; 232
     994:	fe 4f       	sbci	r31, 0xFE	; 254
     996:	60 81       	ld	r22, Z
     998:	71 81       	ldd	r23, Z+1	; 0x01
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	0e 94 81 15 	call	0x2b02	; 0x2b02 <UART_init>
            if (sensor_type == SENSOR_RS485) {
     9a2:	14 30       	cpi	r17, 0x04	; 4
                use_rs485 = true;
                rs232_disable();
     9a4:	21 f4       	brne	.+8      	; 0x9ae <main_event_cb.lto_priv.29+0xc2>
     9a6:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <rs232_disable.lto_priv.40>
            pullup_disable();
        } else {
            bool use_rs485 = false;
            UART_init(baud_lut[baud_index]);
            if (sensor_type == SENSOR_RS485) {
                use_rs485 = true;
     9aa:	11 e0       	ldi	r17, 0x01	; 1
                rs232_disable();
            } else if (sensor_type == SENSOR_RS232) {
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <main_event_cb.lto_priv.29+0xd0>
     9ae:	13 30       	cpi	r17, 0x03	; 3
                rs485_disable();
     9b0:	21 f4       	brne	.+8      	; 0x9ba <main_event_cb.lto_priv.29+0xce>
     9b2:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <rs485_disable.lto_priv.39>
                rs232_enable();
     9b6:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <rs232_enable.lto_priv.58>
    TimerEvents.TimerExpired = 0;
    ctr = 0;
}

void timer0_preload_ms(uint16_t ms) {
    preload = ms / 10;
     9ba:	10 e0       	ldi	r17, 0x00	; 0
     9bc:	85 e0       	ldi	r24, 0x05	; 5
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <preload.lto_priv.47+0x1>
     9c4:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <preload.lto_priv.47>
            }
            timer0_preload_ms(50); // how often we resend a packet
            timer0_reset();
     9c8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <timer0_reset>
            device_id = 0;
     9cc:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <device_id.3160>

static uint8_t modbus_ok(uint16_t TrustSize, uint8_t id);
static uint8_t *Buf_data;

void Modbus_enable(bool rs485) {
    pUDR0 = &UDR0;
     9d0:	86 ec       	ldi	r24, 0xC6	; 198
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <pUDR0+0x1>
     9d8:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <pUDR0>
    TIMSK2 |= (1 << TOV2);
     9dc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    use_rs485 = (rs485) ? 1 : 0;
     9e6:	10 93 4c 02 	sts	0x024C, r17	; 0x80024c <use_rs485>
            Modbus_enable(use_rs485);
        }

        ApplicationEvents.TaskChanged = 0;
     9ea:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
     9ee:	8b 7f       	andi	r24, 0xFB	; 251
     9f0:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    }

    const uint8_t adc_ready = ADC_ready();
     9f4:	0e 94 11 18 	call	0x3022	; 0x3022 <ADC_ready>

    /* Get frequency or voltage */
    uint16_t val;
    if (sensor_type == SENSOR_FREQUENCY) {
     9f8:	18 2f       	mov	r17, r24
     9fa:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <sensor_type.3157>
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	09 f0       	breq	.+2      	; 0xa04 <main_event_cb.lto_priv.29+0x118>
    uint32_t result = 0;

    /* @note: \result_timer_ovf_count and \result_val 
     * should be accessed atomically
     */
    if (result_timer_ovf_count > 0) {
     a02:	4a c0       	rjmp	.+148    	; 0xa98 <main_event_cb.lto_priv.29+0x1ac>
     a04:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <result_timer_ovf_count>
     a08:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <result_timer_ovf_count+0x1>
     a0c:	89 2b       	or	r24, r25
        result = (result_timer_ovf_count * 65536UL + result_val) / (MAX_FREQ_COUNTS + 1); // why +1??
     a0e:	d9 f0       	breq	.+54     	; 0xa46 <main_event_cb.lto_priv.29+0x15a>
     a10:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <result_timer_ovf_count>
     a14:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <result_timer_ovf_count+0x1>
     a18:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <result_val>
     a1c:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <result_val+0x1>
     a20:	cb 01       	movw	r24, r22
     a22:	a0 e0       	ldi	r26, 0x00	; 0
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	dc 01       	movw	r26, r24
     a28:	99 27       	eor	r25, r25
     a2a:	88 27       	eor	r24, r24
     a2c:	bc 01       	movw	r22, r24
     a2e:	cd 01       	movw	r24, r26
     a30:	62 0f       	add	r22, r18
     a32:	73 1f       	adc	r23, r19
     a34:	81 1d       	adc	r24, r1
     a36:	91 1d       	adc	r25, r1
     a38:	21 e4       	ldi	r18, 0x41	; 65
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	0e 94 00 1c 	call	0x3800	; 0x3800 <__udivmodsi4>
    } else {
        result = result_val / (MAX_FREQ_COUNTS + 1);
     a44:	0b c0       	rjmp	.+22     	; 0xa5c <main_event_cb.lto_priv.29+0x170>
     a46:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <result_val>
     a4a:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <result_val+0x1>
     a4e:	61 e4       	ldi	r22, 0x41	; 65
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__udivmodhi4>
     a56:	9b 01       	movw	r18, r22
     a58:	40 e0       	ldi	r20, 0x00	; 0
    }
    result = F_CPU * 10 / result;
    return result;
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	8a ec       	ldi	r24, 0xCA	; 202
     a62:	98 e0       	ldi	r25, 0x08	; 8
     a64:	0e 94 00 1c 	call	0x3800	; 0x3800 <__udivmodsi4>
        const uint8_t offset = 2;
        val = get_frequency() + offset;
        average_val = val;
     a68:	b9 01       	movw	r22, r18
     a6a:	6e 5f       	subi	r22, 0xFE	; 254
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <average_val.3158>
     a76:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <average_val.3158+0x1>
     a7a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <average_val.3158+0x2>
     a7e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <average_val.3158+0x3>
        if (val != 0xFFFF && val > 600) LCD_put_hz(val, 1, 2, 8 + 4);
     a82:	27 55       	subi	r18, 0x57	; 87
     a84:	32 40       	sbci	r19, 0x02	; 2
     a86:	26 3a       	cpi	r18, 0xA6	; 166
     a88:	3d 4f       	sbci	r19, 0xFD	; 253
        else LCD_put_hz(0, 1, 2, 8 + 4);
     a8a:	18 f0       	brcs	.+6      	; 0xa92 <main_event_cb.lto_priv.29+0x1a6>
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	cb 01       	movw	r24, r22
     a92:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LCD_put_hz.constprop.6>
    } else if (sensor_type == SENSOR_ANALOG) {
     a96:	cf c0       	rjmp	.+414    	; 0xc36 <main_event_cb.lto_priv.29+0x34a>
     a98:	82 30       	cpi	r24, 0x02	; 2
     a9a:	09 f0       	breq	.+2      	; 0xa9e <main_event_cb.lto_priv.29+0x1b2>
        if (adc_ready) {
     a9c:	47 c0       	rjmp	.+142    	; 0xb2c <main_event_cb.lto_priv.29+0x240>
     a9e:	11 23       	and	r17, r17
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <main_event_cb.lto_priv.29+0x1b8>
            val = ADC_convert_sensor_voltage(adc.channel_vin);
            //val = ADC_read(adc.channel_vin);
            average_val = (val >> 2) + average_val - (average_val >> 2);
     aa2:	c9 c0       	rjmp	.+402    	; 0xc36 <main_event_cb.lto_priv.29+0x34a>
     aa4:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <average_val.3158>
     aa8:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <average_val.3158+0x1>
     aac:	e0 90 66 01 	lds	r14, 0x0166	; 0x800166 <average_val.3158+0x2>
     ab0:	f0 90 67 01 	lds	r15, 0x0167	; 0x800167 <average_val.3158+0x3>
     ab4:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <adc.lto_priv.42>
     ab8:	70 91 ab 02 	lds	r23, 0x02AB	; 0x8002ab <adc.lto_priv.42+0x1>
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <__floatunsisf>
     ac4:	22 e1       	ldi	r18, 0x12	; 18
     ac6:	33 e8       	ldi	r19, 0x83	; 131
     ac8:	40 e8       	ldi	r20, 0x80	; 128
     aca:	5f e3       	ldi	r21, 0x3F	; 63
     acc:	0e 94 89 1b 	call	0x3712	; 0x3712 <__mulsf3>
     ad0:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fixunssfsi>
     ad4:	76 95       	lsr	r23
     ad6:	67 95       	ror	r22
     ad8:	76 95       	lsr	r23
     ada:	67 95       	ror	r22
     adc:	d7 01       	movw	r26, r14
     ade:	c6 01       	movw	r24, r12
     ae0:	42 e0       	ldi	r20, 0x02	; 2
     ae2:	b6 95       	lsr	r27
     ae4:	a7 95       	ror	r26
     ae6:	97 95       	ror	r25
     ae8:	87 95       	ror	r24
     aea:	4a 95       	dec	r20
     aec:	d1 f7       	brne	.-12     	; 0xae2 <main_event_cb.lto_priv.29+0x1f6>
     aee:	c8 1a       	sub	r12, r24
     af0:	d9 0a       	sbc	r13, r25
     af2:	ea 0a       	sbc	r14, r26
     af4:	fb 0a       	sbc	r15, r27
     af6:	a7 01       	movw	r20, r14
     af8:	96 01       	movw	r18, r12
     afa:	26 0f       	add	r18, r22
     afc:	37 1f       	adc	r19, r23
     afe:	41 1d       	adc	r20, r1
     b00:	51 1d       	adc	r21, r1
     b02:	ca 01       	movw	r24, r20
     b04:	b9 01       	movw	r22, r18
     b06:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <average_val.3158>
     b0a:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <average_val.3158+0x1>
     b0e:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <average_val.3158+0x2>
     b12:	50 93 67 01 	sts	0x0167, r21	; 0x800167 <average_val.3158+0x3>
    LCD_put_large_digit(11, row, pos += 11);
    LCD_put_large_digit(12, row, pos += 11);
}

void LCD_put_volts(uint32_t n, uint8_t dec, uint8_t row, uint8_t column) {
    uint8_t pos = LCD_put_large_int(n, dec, 3, row, column, true);
     b16:	0c e0       	ldi	r16, 0x0C	; 12
     b18:	23 e0       	ldi	r18, 0x03	; 3
     b1a:	42 e0       	ldi	r20, 0x02	; 2
     b1c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_put_large_int.constprop.12>
    /* Place 'V' */
    LCD_put_large_digit(13, row, pos += 11);
     b20:	6b e0       	ldi	r22, 0x0B	; 11
     b22:	68 0f       	add	r22, r24
     b24:	8d e0       	ldi	r24, 0x0D	; 13
     b26:	0e 94 ac 14 	call	0x2958	; 0x2958 <LCD_put_large_digit.constprop.13>
            LCD_put_volts(average_val, 2, 2, 8 + 4);
        }
    } else {
        if (device_id) {
     b2a:	85 c0       	rjmp	.+266    	; 0xc36 <main_event_cb.lto_priv.29+0x34a>
     b2c:	f0 90 68 01 	lds	r15, 0x0168	; 0x800168 <device_id.3160>
     b30:	ff 20       	and	r15, r15
     b32:	09 f4       	brne	.+2      	; 0xb36 <main_event_cb.lto_priv.29+0x24a>
            uint8_t got_val = 0;
            static uint8_t option_selector = 0;
            static float lvl_percent = 0;
            switch (option_selector) {
     b34:	6d c0       	rjmp	.+218    	; 0xc10 <main_event_cb.lto_priv.29+0x324>
     b36:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <option_selector.3167>
     b3a:	88 23       	and	r24, r24
     b3c:	19 f0       	breq	.+6      	; 0xb44 <main_event_cb.lto_priv.29+0x258>
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	b1 f0       	breq	.+44     	; 0xb6e <main_event_cb.lto_priv.29+0x282>
                case 0:
                    got_val = modbus_poll_r(DOT_LEVEL_PERCENT, 2, device_id);
     b42:	56 c0       	rjmp	.+172    	; 0xbf0 <main_event_cb.lto_priv.29+0x304>
     b44:	4f 2d       	mov	r20, r15
     b46:	62 e0       	ldi	r22, 0x02	; 2
     b48:	82 e0       	ldi	r24, 0x02	; 2
                    if (got_val) {
     b4a:	5d d6       	rcall	.+3258   	; 0x1806 <modbus_poll_r.lto_priv.55>
     b4c:	88 23       	and	r24, r24
     b4e:	09 f4       	brne	.+2      	; 0xb52 <main_event_cb.lto_priv.29+0x266>
                        lvl_percent = GetInpRegsFLOAT(0);
     b50:	4f c0       	rjmp	.+158    	; 0xbf0 <main_event_cb.lto_priv.29+0x304>
     b52:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <GetInpRegsFLOAT.constprop.8>
     b56:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <lvl_percent.3168>
     b5a:	70 93 60 01 	sts	0x0160, r23	; 0x800160 <lvl_percent.3168+0x1>
     b5e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lvl_percent.3168+0x2>
     b62:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <lvl_percent.3168+0x3>
                        option_selector++;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <option_selector.3167>
                    }
                    break;
                case 1:
                    got_val = modbus_poll_r(DOT_OMNI_MAX_N, 1, device_id);
     b6c:	a6 c2       	rjmp	.+1356   	; 0x10ba <main_event_cb.lto_priv.29+0x7ce>
     b6e:	4f 2d       	mov	r20, r15
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	8d e1       	ldi	r24, 0x1D	; 29
                    if (got_val) {
     b74:	48 d6       	rcall	.+3216   	; 0x1806 <modbus_poll_r.lto_priv.55>
     b76:	88 23       	and	r24, r24
                        unsigned short level_n = GetInpRegsUSHORT(0);
     b78:	d9 f1       	breq	.+118    	; 0xbf0 <main_event_cb.lto_priv.29+0x304>
     b7a:	0e 94 46 12 	call	0x248c	; 0x248c <GetInpRegsUSHORT.constprop.10>
                        fb_put_tag_at(2, 12, PSTR("ID  :"), device_id);
     b7e:	6c 01       	movw	r12, r24
     b80:	4f 2d       	mov	r20, r15
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	67 e2       	ldi	r22, 0x27	; 39
     b86:	71 e0       	ldi	r23, 0x01	; 1
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	0e 94 16 12 	call	0x242c	; 0x242c <fb_put_tag_at.constprop.11>
                        fb_put_tag_at(3, 12, PSTR("Nmax:"), level_n);
     b8e:	a6 01       	movw	r20, r12
     b90:	61 e2       	ldi	r22, 0x21	; 33
     b92:	71 e0       	ldi	r23, 0x01	; 1
                        redraw_partial(2);
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	0e 94 16 12 	call	0x242c	; 0x242c <fb_put_tag_at.constprop.11>
                        redraw_partial(3);
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	44 d7       	rcall	.+3720   	; 0x1a26 <redraw_partial.lto_priv.21>
                        level_n *= (double) (lvl_percent / 100);
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	42 d7       	rcall	.+3716   	; 0x1a26 <redraw_partial.lto_priv.21>
     ba2:	2a e0       	ldi	r18, 0x0A	; 10
     ba4:	37 ed       	ldi	r19, 0xD7	; 215
     ba6:	43 e2       	ldi	r20, 0x23	; 35
     ba8:	5c e3       	ldi	r21, 0x3C	; 60
     baa:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <lvl_percent.3168>
     bae:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <lvl_percent.3168+0x1>
     bb2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lvl_percent.3168+0x2>
     bb6:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <lvl_percent.3168+0x3>
     bba:	0e 94 89 1b 	call	0x3712	; 0x3712 <__mulsf3>
     bbe:	4b 01       	movw	r8, r22
     bc0:	5c 01       	movw	r10, r24
     bc2:	b6 01       	movw	r22, r12
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <__floatunsisf>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
     bd0:	c5 01       	movw	r24, r10
     bd2:	b4 01       	movw	r22, r8
                        LCD_put_large_int(level_n, 0, 0, 2, 0, true);
     bd4:	0e 94 89 1b 	call	0x3712	; 0x3712 <__mulsf3>
     bd8:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fixunssfsi>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	00 e0       	ldi	r16, 0x00	; 0
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	40 e0       	ldi	r20, 0x00	; 0
                        option_selector = 0;
     be6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_put_large_int.constprop.12>
     bea:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <option_selector.3167>
    TimerEvents.Timer3sExpired = 0;
    counter_3s = 0;
}

uint8_t timer3s_expired() {
    if (TimerEvents.Timer3sExpired) {
     bee:	65 c2       	rjmp	.+1226   	; 0x10ba <main_event_cb.lto_priv.29+0x7ce>
     bf0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    }
    return 0;
}

void timer3s_reset() {
    TimerEvents.Timer3sExpired = 0;
     bf4:	83 ff       	sbrs	r24, 3
    counter_3s = 0;
     bf6:	1f c0       	rjmp	.+62     	; 0xc36 <main_event_cb.lto_priv.29+0x34a>
     bf8:	87 7f       	andi	r24, 0xF7	; 247
     bfa:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
            }
            if (got_val) {
                timer3s_reset();
            } else if (timer3s_expired()) {
                /* Disconnected */
                load_frame();
     bfe:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <counter_3s.lto_priv.48+0x1>
                redraw();
                device_id = 0;
     c02:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <counter_3s.lto_priv.48>
     c06:	28 d6       	rcall	.+3152   	; 0x1858 <load_frame.lto_priv.57>
            }
        } else {
            int8_t got_id = modbus_poll_r(DOT_DEVICE_ID, 1, 0);
     c08:	97 d7       	rcall	.+3886   	; 0x1b38 <redraw.lto_priv.56>
     c0a:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <device_id.3160>
     c0e:	13 c0       	rjmp	.+38     	; 0xc36 <main_event_cb.lto_priv.29+0x34a>
     c10:	40 e0       	ldi	r20, 0x00	; 0
            if (got_id > 0) {
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	8f e1       	ldi	r24, 0x1F	; 31
    }
    return 0;
}

void timer3s_reset() {
    TimerEvents.Timer3sExpired = 0;
     c16:	f7 d5       	rcall	.+3054   	; 0x1806 <modbus_poll_r.lto_priv.55>
     c18:	18 16       	cp	r1, r24
     c1a:	6c f4       	brge	.+26     	; 0xc36 <main_event_cb.lto_priv.29+0x34a>
     c1c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    counter_3s = 0;
     c20:	87 7f       	andi	r24, 0xF7	; 247
     c22:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
     c26:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <counter_3s.lto_priv.48+0x1>
                timer3s_reset();
                device_id = modbus_get_id();
     c2a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <counter_3s.lto_priv.48>
     c2e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DataBuffer0>
            }
        }
    }

    if (isCalibrating) {
     c32:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <device_id.3160>
     c36:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <isCalibrating.3155>
        /* Check if calibration has finished */
        int8_t calibrationOK = run_analog_calibration(average_val, false, sensor_type);
     c3a:	88 23       	and	r24, r24
     c3c:	09 f4       	brne	.+2      	; 0xc40 <main_event_cb.lto_priv.29+0x354>
     c3e:	5b c1       	rjmp	.+694    	; 0xef6 <main_event_cb.lto_priv.29+0x60a>
     c40:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <sensor_type.3157>
     c44:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <average_val.3158>
    if (reset) {
        state = CAL_STATE0;
        return 0;
    }

    uint8_t check = analog_sensor_check_result(value, type, state);
     c48:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <average_val.3158+0x1>
    enum {
        dV = 6, // 60mV
        dF = 20 // 2Hz
    };

    switch (state) {
     c4c:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <state.2921>
     c50:	22 30       	cpi	r18, 0x02	; 2
     c52:	09 f4       	brne	.+2      	; 0xc56 <main_event_cb.lto_priv.29+0x36a>
     c54:	47 c0       	rjmp	.+142    	; 0xce4 <main_event_cb.lto_priv.29+0x3f8>
     c56:	28 f4       	brcc	.+10     	; 0xc62 <main_event_cb.lto_priv.29+0x376>
     c58:	22 23       	and	r18, r18
     c5a:	51 f0       	breq	.+20     	; 0xc70 <main_event_cb.lto_priv.29+0x384>
     c5c:	21 30       	cpi	r18, 0x01	; 1
     c5e:	c9 f0       	breq	.+50     	; 0xc92 <main_event_cb.lto_priv.29+0x3a6>
     c60:	93 c0       	rjmp	.+294    	; 0xd88 <main_event_cb.lto_priv.29+0x49c>
     c62:	23 30       	cpi	r18, 0x03	; 3
     c64:	09 f4       	brne	.+2      	; 0xc68 <main_event_cb.lto_priv.29+0x37c>
     c66:	5b c0       	rjmp	.+182    	; 0xd1e <main_event_cb.lto_priv.29+0x432>
     c68:	24 30       	cpi	r18, 0x04	; 4
        case CAL_STATE0:
            if (type == SENSOR_ANALOG) {
     c6a:	09 f4       	brne	.+2      	; 0xc6e <main_event_cb.lto_priv.29+0x382>
     c6c:	75 c0       	rjmp	.+234    	; 0xd58 <main_event_cb.lto_priv.29+0x46c>
                return (value >= 0 && value <= 1500 + dV);
     c6e:	8c c0       	rjmp	.+280    	; 0xd88 <main_event_cb.lto_priv.29+0x49c>
     c70:	32 30       	cpi	r19, 0x02	; 2
     c72:	29 f4       	brne	.+10     	; 0xc7e <main_event_cb.lto_priv.29+0x392>
     c74:	83 3e       	cpi	r24, 0xE3	; 227
     c76:	95 40       	sbci	r25, 0x05	; 5
            } else if (type == SENSOR_FREQUENCY) {
     c78:	08 f4       	brcc	.+2      	; 0xc7c <main_event_cb.lto_priv.29+0x390>
     c7a:	98 c0       	rjmp	.+304    	; 0xdac <main_event_cb.lto_priv.29+0x4c0>
     c7c:	28 c2       	rjmp	.+1104   	; 0x10ce <main_event_cb.lto_priv.29+0x7e2>
                return (value >= 3000 - dF && value <= 15000 + dF);
     c7e:	31 30       	cpi	r19, 0x01	; 1
     c80:	09 f0       	breq	.+2      	; 0xc84 <main_event_cb.lto_priv.29+0x398>
     c82:	25 c2       	rjmp	.+1098   	; 0x10ce <main_event_cb.lto_priv.29+0x7e2>
     c84:	84 5a       	subi	r24, 0xA4	; 164
     c86:	9b 40       	sbci	r25, 0x0B	; 11
     c88:	89 30       	cpi	r24, 0x09	; 9
     c8a:	9f 42       	sbci	r25, 0x2F	; 47
            }
            break;
        case CAL_STATE1:
            if (type == SENSOR_ANALOG) {
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <main_event_cb.lto_priv.29+0x3a4>
     c8e:	8e c0       	rjmp	.+284    	; 0xdac <main_event_cb.lto_priv.29+0x4c0>
                return (abs(value - 140) <= dV);
     c90:	1e c2       	rjmp	.+1084   	; 0x10ce <main_event_cb.lto_priv.29+0x7e2>
     c92:	32 30       	cpi	r19, 0x02	; 2
     c94:	51 f4       	brne	.+20     	; 0xcaa <main_event_cb.lto_priv.29+0x3be>
     c96:	8c 58       	subi	r24, 0x8C	; 140
     c98:	91 09       	sbc	r25, r1
     c9a:	8a 3f       	cpi	r24, 0xFA	; 250
     c9c:	5f ef       	ldi	r21, 0xFF	; 255
     c9e:	95 07       	cpc	r25, r21
     ca0:	fc f0       	brlt	.+62     	; 0xce0 <main_event_cb.lto_priv.29+0x3f4>
     ca2:	21 e0       	ldi	r18, 0x01	; 1
            } else if (type == SENSOR_FREQUENCY) {
     ca4:	07 97       	sbiw	r24, 0x07	; 7
     ca6:	c4 f0       	brlt	.+48     	; 0xcd8 <main_event_cb.lto_priv.29+0x3ec>
     ca8:	16 c0       	rjmp	.+44     	; 0xcd6 <main_event_cb.lto_priv.29+0x3ea>
                return (abs(value - 3400) <= dF || abs(value - 15000) <= dF);
     caa:	31 30       	cpi	r19, 0x01	; 1
     cac:	09 f0       	breq	.+2      	; 0xcb0 <main_event_cb.lto_priv.29+0x3c4>
     cae:	d5 c0       	rjmp	.+426    	; 0xe5a <main_event_cb.lto_priv.29+0x56e>
     cb0:	9c 01       	movw	r18, r24
     cb2:	28 54       	subi	r18, 0x48	; 72
     cb4:	3d 40       	sbci	r19, 0x0D	; 13
     cb6:	2c 3e       	cpi	r18, 0xEC	; 236
     cb8:	ef ef       	ldi	r30, 0xFF	; 255
     cba:	3e 07       	cpc	r19, r30
     cbc:	1c f0       	brlt	.+6      	; 0xcc4 <main_event_cb.lto_priv.29+0x3d8>
     cbe:	25 31       	cpi	r18, 0x15	; 21
     cc0:	31 05       	cpc	r19, r1
     cc2:	64 f0       	brlt	.+24     	; 0xcdc <main_event_cb.lto_priv.29+0x3f0>
     cc4:	88 59       	subi	r24, 0x98	; 152
     cc6:	9a 43       	sbci	r25, 0x3A	; 58
     cc8:	8c 3e       	cpi	r24, 0xEC	; 236
     cca:	ff ef       	ldi	r31, 0xFF	; 255
     ccc:	9f 07       	cpc	r25, r31
     cce:	44 f0       	brlt	.+16     	; 0xce0 <main_event_cb.lto_priv.29+0x3f4>
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	45 97       	sbiw	r24, 0x15	; 21
     cd4:	0c f0       	brlt	.+2      	; 0xcd8 <main_event_cb.lto_priv.29+0x3ec>
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	82 2f       	mov	r24, r18
     cda:	80 c0       	rjmp	.+256    	; 0xddc <main_event_cb.lto_priv.29+0x4f0>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
            }
            break;
        case CAL_STATE2:
            if (type == SENSOR_ANALOG) {
     cde:	7e c0       	rjmp	.+252    	; 0xddc <main_event_cb.lto_priv.29+0x4f0>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
                return (abs(value - 130) <= dV);
     ce2:	7c c0       	rjmp	.+248    	; 0xddc <main_event_cb.lto_priv.29+0x4f0>
     ce4:	32 30       	cpi	r19, 0x02	; 2
     ce6:	51 f4       	brne	.+20     	; 0xcfc <main_event_cb.lto_priv.29+0x410>
     ce8:	82 58       	subi	r24, 0x82	; 130
     cea:	91 09       	sbc	r25, r1
     cec:	8a 3f       	cpi	r24, 0xFA	; 250
     cee:	2f ef       	ldi	r18, 0xFF	; 255
     cf0:	92 07       	cpc	r25, r18
     cf2:	9c f0       	brlt	.+38     	; 0xd1a <main_event_cb.lto_priv.29+0x42e>
     cf4:	21 e0       	ldi	r18, 0x01	; 1
            } else if (type == SENSOR_FREQUENCY) {
     cf6:	07 97       	sbiw	r24, 0x07	; 7
     cf8:	74 f0       	brlt	.+28     	; 0xd16 <main_event_cb.lto_priv.29+0x42a>
     cfa:	0c c0       	rjmp	.+24     	; 0xd14 <main_event_cb.lto_priv.29+0x428>
                return (abs(value - 3300) <= dF);
     cfc:	31 30       	cpi	r19, 0x01	; 1
     cfe:	09 f0       	breq	.+2      	; 0xd02 <main_event_cb.lto_priv.29+0x416>
     d00:	ac c0       	rjmp	.+344    	; 0xe5a <main_event_cb.lto_priv.29+0x56e>
     d02:	84 5e       	subi	r24, 0xE4	; 228
     d04:	9c 40       	sbci	r25, 0x0C	; 12
     d06:	8c 3e       	cpi	r24, 0xEC	; 236
     d08:	3f ef       	ldi	r19, 0xFF	; 255
     d0a:	93 07       	cpc	r25, r19
     d0c:	34 f0       	brlt	.+12     	; 0xd1a <main_event_cb.lto_priv.29+0x42e>
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	45 97       	sbiw	r24, 0x15	; 21
     d12:	0c f0       	brlt	.+2      	; 0xd16 <main_event_cb.lto_priv.29+0x42a>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	82 2f       	mov	r24, r18
            }
            break;
        case CAL_STATE3:
            if (type == SENSOR_ANALOG) {
     d18:	7e c0       	rjmp	.+252    	; 0xe16 <main_event_cb.lto_priv.29+0x52a>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
                return (abs(value - 260) <= dV);
     d1c:	7c c0       	rjmp	.+248    	; 0xe16 <main_event_cb.lto_priv.29+0x52a>
     d1e:	32 30       	cpi	r19, 0x02	; 2
     d20:	51 f4       	brne	.+20     	; 0xd36 <main_event_cb.lto_priv.29+0x44a>
     d22:	84 50       	subi	r24, 0x04	; 4
     d24:	91 40       	sbci	r25, 0x01	; 1
     d26:	8a 3f       	cpi	r24, 0xFA	; 250
     d28:	4f ef       	ldi	r20, 0xFF	; 255
     d2a:	94 07       	cpc	r25, r20
     d2c:	9c f0       	brlt	.+38     	; 0xd54 <main_event_cb.lto_priv.29+0x468>
     d2e:	21 e0       	ldi	r18, 0x01	; 1
            } else if (type == SENSOR_FREQUENCY) {
     d30:	07 97       	sbiw	r24, 0x07	; 7
     d32:	74 f0       	brlt	.+28     	; 0xd50 <main_event_cb.lto_priv.29+0x464>
     d34:	0c c0       	rjmp	.+24     	; 0xd4e <main_event_cb.lto_priv.29+0x462>
                return (abs(value - 4600) <= dF);
     d36:	31 30       	cpi	r19, 0x01	; 1
     d38:	09 f0       	breq	.+2      	; 0xd3c <main_event_cb.lto_priv.29+0x450>
     d3a:	4b c1       	rjmp	.+662    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     d3c:	88 5f       	subi	r24, 0xF8	; 248
     d3e:	91 41       	sbci	r25, 0x11	; 17
     d40:	8c 3e       	cpi	r24, 0xEC	; 236
     d42:	5f ef       	ldi	r21, 0xFF	; 255
     d44:	95 07       	cpc	r25, r21
     d46:	34 f0       	brlt	.+12     	; 0xd54 <main_event_cb.lto_priv.29+0x468>
     d48:	21 e0       	ldi	r18, 0x01	; 1
     d4a:	45 97       	sbiw	r24, 0x15	; 21
     d4c:	0c f0       	brlt	.+2      	; 0xd50 <main_event_cb.lto_priv.29+0x464>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	82 2f       	mov	r24, r18
            }
            break;
        case CAL_STATE4:
            if (type == SENSOR_ANALOG) {
     d52:	79 c0       	rjmp	.+242    	; 0xe46 <main_event_cb.lto_priv.29+0x55a>
     d54:	80 e0       	ldi	r24, 0x00	; 0
                return (abs(value) <= dV + 2); // allow a bit more deviation around zero
     d56:	77 c0       	rjmp	.+238    	; 0xe46 <main_event_cb.lto_priv.29+0x55a>
     d58:	32 30       	cpi	r19, 0x02	; 2
     d5a:	29 f4       	brne	.+10     	; 0xd66 <main_event_cb.lto_priv.29+0x47a>
     d5c:	08 96       	adiw	r24, 0x08	; 8
     d5e:	21 e0       	ldi	r18, 0x01	; 1
            } else if (type == SENSOR_FREQUENCY) {
     d60:	41 97       	sbiw	r24, 0x11	; 17
     d62:	70 f0       	brcs	.+28     	; 0xd80 <main_event_cb.lto_priv.29+0x494>
     d64:	0c c0       	rjmp	.+24     	; 0xd7e <main_event_cb.lto_priv.29+0x492>
                return (abs(value - 5000) <= dF);
     d66:	31 30       	cpi	r19, 0x01	; 1
     d68:	09 f0       	breq	.+2      	; 0xd6c <main_event_cb.lto_priv.29+0x480>
     d6a:	9e c0       	rjmp	.+316    	; 0xea8 <main_event_cb.lto_priv.29+0x5bc>
     d6c:	88 58       	subi	r24, 0x88	; 136
     d6e:	93 41       	sbci	r25, 0x13	; 19
     d70:	8c 3e       	cpi	r24, 0xEC	; 236
     d72:	ef ef       	ldi	r30, 0xFF	; 255
     d74:	9e 07       	cpc	r25, r30
     d76:	34 f0       	brlt	.+12     	; 0xd84 <main_event_cb.lto_priv.29+0x498>
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	45 97       	sbiw	r24, 0x15	; 21
     d7c:	0c f0       	brlt	.+2      	; 0xd80 <main_event_cb.lto_priv.29+0x494>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	82 2f       	mov	r24, r18
        return 0;
    }

    uint8_t check = analog_sensor_check_result(value, type, state);

    switch (state) {
     d82:	6e c0       	rjmp	.+220    	; 0xe60 <main_event_cb.lto_priv.29+0x574>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	6c c0       	rjmp	.+216    	; 0xe60 <main_event_cb.lto_priv.29+0x574>
     d88:	22 30       	cpi	r18, 0x02	; 2
     d8a:	09 f4       	brne	.+2      	; 0xd8e <main_event_cb.lto_priv.29+0x4a2>
     d8c:	66 c0       	rjmp	.+204    	; 0xe5a <main_event_cb.lto_priv.29+0x56e>
     d8e:	38 f4       	brcc	.+14     	; 0xd9e <main_event_cb.lto_priv.29+0x4b2>
     d90:	22 23       	and	r18, r18
     d92:	09 f4       	brne	.+2      	; 0xd96 <main_event_cb.lto_priv.29+0x4aa>
     d94:	9c c1       	rjmp	.+824    	; 0x10ce <main_event_cb.lto_priv.29+0x7e2>
     d96:	21 30       	cpi	r18, 0x01	; 1
     d98:	09 f4       	brne	.+2      	; 0xd9c <main_event_cb.lto_priv.29+0x4b0>
     d9a:	5f c0       	rjmp	.+190    	; 0xe5a <main_event_cb.lto_priv.29+0x56e>
     d9c:	1a c1       	rjmp	.+564    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     d9e:	23 30       	cpi	r18, 0x03	; 3
     da0:	09 f4       	brne	.+2      	; 0xda4 <main_event_cb.lto_priv.29+0x4b8>
     da2:	17 c1       	rjmp	.+558    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     da4:	24 30       	cpi	r18, 0x04	; 4
        case CAL_STATE0:
            if (check) {
                fb_put_str_redraw(str_connect_electrode, 5);
     da6:	09 f4       	brne	.+2      	; 0xdaa <main_event_cb.lto_priv.29+0x4be>
     da8:	7f c0       	rjmp	.+254    	; 0xea8 <main_event_cb.lto_priv.29+0x5bc>
     daa:	13 c1       	rjmp	.+550    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     dac:	8a ed       	ldi	r24, 0xDA	; 218
                soft_PWM_stop();
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 e7 11 	call	0x23ce	; 0x23ce <fb_put_str_redraw.constprop.18>
                state = CAL_STATE1;
     db4:	0e 94 30 14 	call	0x2860	; 0x2860 <soft_PWM_stop>
                clb_confirm_ctr = 0;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <state.2921>
     dbe:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <clb_confirm_ctr.2922>
     dc2:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <clb_confirm_ctr.2922+0x1>
     dc6:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <clb_confirm_ctr.2922+0x2>
    TimerEvents.TimerExpired = 0;
    ctr = 0;
}

void timer0_preload_ms(uint16_t ms) {
    preload = ms / 10;
     dca:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <clb_confirm_ctr.2922+0x3>
     dce:	84 e6       	ldi	r24, 0x64	; 100
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <preload.lto_priv.47+0x1>
            } else {
                return -1;
            }
            break;
        case CAL_STATE1:
            if (check) {
     dd6:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <preload.lto_priv.47>
                fb_put_str_redraw(str_cal_in_progress, 5);
     dda:	3f c0       	rjmp	.+126    	; 0xe5a <main_event_cb.lto_priv.29+0x56e>
     ddc:	88 23       	and	r24, r24
     dde:	e9 f1       	breq	.+122    	; 0xe5a <main_event_cb.lto_priv.29+0x56e>
     de0:	85 ec       	ldi	r24, 0xC5	; 197
                if (timer0_expired()) {
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 e7 11 	call	0x23ce	; 0x23ce <fb_put_str_redraw.constprop.18>
     de8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <timer0_expired>
    TCCR1A = 0;
    TCCR1B = 0;
}

void soft_PWM_start(uint16_t frequency) {
    PWM_OUT_DR |= 1 << PWM_OUT_PIN;
     dec:	88 23       	and	r24, r24
    /* CTC mode */
    TCCR2A = (1 << WGM21);
     dee:	09 f4       	brne	.+2      	; 0xdf2 <main_event_cb.lto_priv.29+0x506>
     df0:	f0 c0       	rjmp	.+480    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     df2:	22 9a       	sbi	0x04, 2	; 4
    /* Prescaler = 128 */
    TCCR2B = (1 << CS22) | (1 << CS20);
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    /* Timer2 CompareA interrupt enable */
    TIMSK2 |= 1 << OCIE2A;
     dfa:	85 e0       	ldi	r24, 0x05	; 5
     dfc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     e00:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    /* Preload for given frequency */
    OCR2A = (F_CPU / (2 * 128 * (uint32_t) frequency)) - 1;
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
                    /* '429' produces closest output to 430Hz */
                    soft_PWM_start(429);
                    state = CAL_STATE2;
     e0a:	85 e8       	ldi	r24, 0x85	; 133
     e0c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
            } else {
                timer0_reset();
            }
            break;
        case CAL_STATE2:
            if (check) {
     e10:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <state.2921>
                if (timer0_expired()) {
     e14:	de c0       	rjmp	.+444    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     e16:	88 23       	and	r24, r24
     e18:	01 f1       	breq	.+64     	; 0xe5a <main_event_cb.lto_priv.29+0x56e>
     e1a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <timer0_expired>
                    fb_put_str_redraw(str_disconnect_electrode, 5);
     e1e:	88 23       	and	r24, r24
     e20:	09 f4       	brne	.+2      	; 0xe24 <main_event_cb.lto_priv.29+0x538>
     e22:	d7 c0       	rjmp	.+430    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     e24:	8f ea       	ldi	r24, 0xAF	; 175
    }
    return 0;
}

void make_annoying_beep(uint8_t type) {
    TCCR0A = (1 << COM0A0) | (1 << WGM01) | (1 << WGM00);
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 e7 11 	call	0x23ce	; 0x23ce <fb_put_str_redraw.constprop.18>
    TCCR0B = (1 << CS01) | (1 << CS00) | (1 << WGM02);
     e2c:	83 e4       	ldi	r24, 0x43	; 67

    if (type == BEEP_SHORT) {
        beeper_mode = BEEP_SHORT;
        OCR0A = 128;
    } else {
        OCR0A = 200;
     e2e:	84 bd       	out	0x24, r24	; 36
     e30:	8b e0       	ldi	r24, 0x0B	; 11
        beeper_mode = BEEP_DOUBLE;
     e32:	85 bd       	out	0x25, r24	; 37
     e34:	88 ec       	ldi	r24, 0xC8	; 200
     e36:	87 bd       	out	0x27, r24	; 39
                    make_annoying_beep(BEEP_DOUBLE);
                    state = CAL_STATE3;
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <beeper_mode.lto_priv.26>
     e3e:	83 e0       	ldi	r24, 0x03	; 3
            } else {
                timer0_reset();
            }
            break;
        case CAL_STATE3:
            if (check) {
     e40:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <state.2921>
     e44:	c6 c0       	rjmp	.+396    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
                fb_put_str_redraw(str_cal_check, 5);
     e46:	88 23       	and	r24, r24
     e48:	09 f4       	brne	.+2      	; 0xe4c <main_event_cb.lto_priv.29+0x560>
     e4a:	c3 c0       	rjmp	.+390    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     e4c:	8a e9       	ldi	r24, 0x9A	; 154
                state = CAL_STATE4;
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 e7 11 	call	0x23ce	; 0x23ce <fb_put_str_redraw.constprop.18>
                timer0_reset();
     e54:	84 e0       	ldi	r24, 0x04	; 4
     e56:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <state.2921>
            }
            break;
        case CAL_STATE4:
            if (check) {
     e5a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <timer0_reset>
                if (timer0_expired()) {
     e5e:	b9 c0       	rjmp	.+370    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     e60:	88 23       	and	r24, r24
     e62:	11 f1       	breq	.+68     	; 0xea8 <main_event_cb.lto_priv.29+0x5bc>
     e64:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <timer0_expired>
    }
    return 0;
}

void make_annoying_beep(uint8_t type) {
    TCCR0A = (1 << COM0A0) | (1 << WGM01) | (1 << WGM00);
     e68:	88 23       	and	r24, r24
     e6a:	09 f4       	brne	.+2      	; 0xe6e <main_event_cb.lto_priv.29+0x582>
    TCCR0B = (1 << CS01) | (1 << CS00) | (1 << WGM02);
     e6c:	b2 c0       	rjmp	.+356    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     e6e:	83 e4       	ldi	r24, 0x43	; 67

    if (type == BEEP_SHORT) {
        beeper_mode = BEEP_SHORT;
        OCR0A = 128;
    } else {
        OCR0A = 200;
     e70:	84 bd       	out	0x24, r24	; 36
     e72:	8b e0       	ldi	r24, 0x0B	; 11
        beeper_mode = BEEP_DOUBLE;
     e74:	85 bd       	out	0x25, r24	; 37
     e76:	88 ec       	ldi	r24, 0xC8	; 200
     e78:	87 bd       	out	0x27, r24	; 39
                    make_annoying_beep(BEEP_DOUBLE);
                    soft_PWM_stop();
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <beeper_mode.lto_priv.26>
                    state = CAL_STATE0;
     e80:	0e 94 30 14 	call	0x2860	; 0x2860 <soft_PWM_stop>
                    clb_confirm_ctr = 0;
     e84:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <state.2921>
     e88:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <clb_confirm_ctr.2922>
     e8c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <clb_confirm_ctr.2922+0x1>
     e90:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <clb_confirm_ctr.2922+0x2>

    if (isCalibrating) {
        /* Check if calibration has finished */
        int8_t calibrationOK = run_analog_calibration(average_val, false, sensor_type);
        if (calibrationOK == 1) {
            lcdLock = true;
     e94:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <clb_confirm_ctr.2922+0x3>
            isCalibrating = false;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <lcdLock.3156>
            fb_put_str_redraw(str_cal_success, 5);
     e9e:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <isCalibrating.3155>
                    state = CAL_STATE0;
                    clb_confirm_ctr = 0;
                    return 1;
                }
            } else {
                timer0_reset();
     ea2:	8b e0       	ldi	r24, 0x0B	; 11
     ea4:	91 e0       	ldi	r25, 0x01	; 1
                if (clb_confirm_ctr++ >= F_CPU / 300) {
     ea6:	1a c1       	rjmp	.+564    	; 0x10dc <main_event_cb.lto_priv.29+0x7f0>
     ea8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <timer0_reset>
     eac:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <clb_confirm_ctr.2922>
     eb0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <clb_confirm_ctr.2922+0x1>
     eb4:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <clb_confirm_ctr.2922+0x2>
     eb8:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <clb_confirm_ctr.2922+0x3>
     ebc:	ac 01       	movw	r20, r24
     ebe:	bd 01       	movw	r22, r26
     ec0:	4f 5f       	subi	r20, 0xFF	; 255
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	6f 4f       	sbci	r22, 0xFF	; 255
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <clb_confirm_ctr.2922>
     ecc:	50 93 56 01 	sts	0x0156, r21	; 0x800156 <clb_confirm_ctr.2922+0x1>
     ed0:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <clb_confirm_ctr.2922+0x2>
     ed4:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <clb_confirm_ctr.2922+0x3>
     ed8:	81 15       	cp	r24, r1
     eda:	90 4c       	sbci	r25, 0xC0	; 192
     edc:	a1 05       	cpc	r26, r1
                    clb_confirm_ctr = 0;
     ede:	b1 05       	cpc	r27, r1
     ee0:	08 f4       	brcc	.+2      	; 0xee4 <main_event_cb.lto_priv.29+0x5f8>
     ee2:	77 c0       	rjmp	.+238    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     ee4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <clb_confirm_ctr.2922>
     ee8:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <clb_confirm_ctr.2922+0x1>
     eec:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <clb_confirm_ctr.2922+0x2>
        } else if (calibrationOK == -1) {
            lcdLock = true;
            isCalibrating = false;
            fb_put_str_redraw(str_cal_error, 5);
        }
    } else if (adc_ready && !lcdLock) {
     ef0:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <clb_confirm_ctr.2922+0x3>
     ef4:	ec c0       	rjmp	.+472    	; 0x10ce <main_event_cb.lto_priv.29+0x7e2>
     ef6:	11 23       	and	r17, r17
     ef8:	09 f4       	brne	.+2      	; 0xefc <main_event_cb.lto_priv.29+0x610>
     efa:	6b c0       	rjmp	.+214    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     efc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <lcdLock.3156>
        /* Display current consumption */
        uint16_t adcVal = ADC_convert_supply_current(adc.channel_shunt);
        average_current = (adcVal >> 2) + average_current - (average_current >> 2);
     f00:	81 11       	cpse	r24, r1
     f02:	67 c0       	rjmp	.+206    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     f04:	c0 90 5a 01 	lds	r12, 0x015A	; 0x80015a <average_current.3159>
     f08:	d0 90 5b 01 	lds	r13, 0x015B	; 0x80015b <average_current.3159+0x1>
     f0c:	e0 90 5c 01 	lds	r14, 0x015C	; 0x80015c <average_current.3159+0x2>
     f10:	f0 90 5d 01 	lds	r15, 0x015D	; 0x80015d <average_current.3159+0x3>
     f14:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <adc.lto_priv.42+0x4>
     f18:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <adc.lto_priv.42+0x5>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <__floatunsisf>
     f24:	21 e0       	ldi	r18, 0x01	; 1
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e8       	ldi	r20, 0x80	; 128
     f2a:	5d e3       	ldi	r21, 0x3D	; 61
     f2c:	0e 94 89 1b 	call	0x3712	; 0x3712 <__mulsf3>
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	5f e3       	ldi	r21, 0x3F	; 63
     f38:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__addsf3>
     f3c:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fixunssfsi>
     f40:	76 95       	lsr	r23
     f42:	67 95       	ror	r22
     f44:	76 95       	lsr	r23
     f46:	67 95       	ror	r22
     f48:	d7 01       	movw	r26, r14
     f4a:	c6 01       	movw	r24, r12
     f4c:	22 e0       	ldi	r18, 0x02	; 2
     f4e:	b6 95       	lsr	r27
     f50:	a7 95       	ror	r26
     f52:	97 95       	ror	r25
     f54:	87 95       	ror	r24
     f56:	2a 95       	dec	r18
     f58:	d1 f7       	brne	.-12     	; 0xf4e <main_event_cb.lto_priv.29+0x662>
     f5a:	a7 01       	movw	r20, r14
     f5c:	96 01       	movw	r18, r12
     f5e:	28 1b       	sub	r18, r24
     f60:	39 0b       	sbc	r19, r25
     f62:	4a 0b       	sbc	r20, r26
     f64:	5b 0b       	sbc	r21, r27
     f66:	da 01       	movw	r26, r20
     f68:	c9 01       	movw	r24, r18
     f6a:	86 0f       	add	r24, r22
     f6c:	97 1f       	adc	r25, r23
     f6e:	a1 1d       	adc	r26, r1
     f70:	b1 1d       	adc	r27, r1
     f72:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <average_current.3159>
     f76:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <average_current.3159+0x1>
     f7a:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <average_current.3159+0x2>
        if (refresh_counter++ >= 64) {
     f7e:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <average_current.3159+0x3>
     f82:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <refresh_counter.3161>
     f86:	31 e0       	ldi	r19, 0x01	; 1
     f88:	32 0f       	add	r19, r18
     f8a:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <refresh_counter.3161>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     f8e:	20 34       	cpi	r18, 0x40	; 64
     f90:	00 f1       	brcs	.+64     	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
     f92:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <refresh_counter.3161>
     f96:	4a e0       	ldi	r20, 0x0A	; 10
     f98:	8e 01       	movw	r16, r28
            refresh_counter = 0;
            char v[5];
            itoa(average_current, v, 10);
            fb_clear_line(5);
     f9a:	0f 5f       	subi	r16, 0xFF	; 255
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	b8 01       	movw	r22, r16
            strcpy_P(&framebuffer[5][7], str_current_draw);
     fa0:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
     fa4:	85 e0       	ldi	r24, 0x05	; 5
     fa6:	85 d4       	rcall	.+2314   	; 0x18b2 <fb_clear_line.lto_priv.22>
     fa8:	60 ef       	ldi	r22, 0xF0	; 240
     faa:	70 e0       	ldi	r23, 0x00	; 0
            memcpy(&framebuffer[5][7 + 1 + strlen_P(str_current_draw)], v, strlen(v));
     fac:	81 e1       	ldi	r24, 0x11	; 17
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strcpy_P>
     fb4:	f8 01       	movw	r30, r16
     fb6:	01 90       	ld	r0, Z+
     fb8:	00 20       	and	r0, r0
     fba:	e9 f7       	brne	.-6      	; 0xfb6 <main_event_cb.lto_priv.29+0x6ca>
     fbc:	31 97       	sbiw	r30, 0x01	; 1
     fbe:	af 01       	movw	r20, r30
     fc0:	40 1b       	sub	r20, r16
     fc2:	51 0b       	sbc	r21, r17
            redraw_partial(5);
     fc4:	b8 01       	movw	r22, r16
     fc6:	87 e1       	ldi	r24, 0x17	; 23
     fc8:	92 e0       	ldi	r25, 0x02	; 2
        }
    }

    if (ApplicationEvents.ShortKeyPressed) {
     fca:	0e 94 5f 1c 	call	0x38be	; 0x38be <memcpy>
     fce:	85 e0       	ldi	r24, 0x05	; 5
     fd0:	2a d5       	rcall	.+2644   	; 0x1a26 <redraw_partial.lto_priv.21>
        item_selector++;
     fd2:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
     fd6:	80 ff       	sbrs	r24, 0
     fd8:	2a c0       	rjmp	.+84     	; 0x102e <main_event_cb.lto_priv.29+0x742>
     fda:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <item_selector.3154>

        if (item_selector > BTN_CALIBRATE)
     fde:	8f 5f       	subi	r24, 0xFF	; 255
            item_selector = BTN_BACK;
     fe0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <item_selector.3154>
        if (item_selector == BTN_BACK)
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	10 f0       	brcs	.+4      	; 0xfec <main_event_cb.lto_priv.29+0x700>
     fe8:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <item_selector.3154>
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
     fec:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <item_selector.3154>
     ff0:	81 11       	cpse	r24, r1
    frameSelection.sel_end = sel_end;
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <main_event_cb.lto_priv.29+0x712>
     ff4:	87 e0       	ldi	r24, 0x07	; 7

        if (item_selector > BTN_CALIBRATE)
            item_selector = BTN_BACK;
        if (item_selector == BTN_BACK)
            menu_item_highlight(row, 0, 7);
        else if (item_selector == BTN_CALIBRATE) {
     ff6:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
            if (sensor_type == SENSOR_ANALOG || sensor_type == SENSOR_FREQUENCY)
     ffa:	88 e3       	ldi	r24, 0x38	; 56
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <main_event_cb.lto_priv.29+0x72c>
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	69 f4       	brne	.+26     	; 0x101c <main_event_cb.lto_priv.29+0x730>
    1002:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <sensor_type.3157>
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1006:	81 50       	subi	r24, 0x01	; 1
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	10 f4       	brcc	.+4      	; 0x1010 <main_event_cb.lto_priv.29+0x724>
    frameSelection.sel_end = sel_end;
    100c:	87 e8       	ldi	r24, 0x87	; 135
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <main_event_cb.lto_priv.29+0x726>
    1010:	87 ec       	ldi	r24, 0xC7	; 199
                menu_item_highlight(row, 10, 22);
            else
                menu_item_highlight(row, 11, 22);
        }

        lcdLock = false;
    1012:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
        redraw_partial(7);
    1016:	82 eb       	ldi	r24, 0xB2	; 178
    1018:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <frameSelection.lto_priv.66+0x1>
        ApplicationEvents.ShortKeyPressed = 0;
    101c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <lcdLock.3156>
    1020:	87 e0       	ldi	r24, 0x07	; 7
    1022:	01 d5       	rcall	.+2562   	; 0x1a26 <redraw_partial.lto_priv.21>
    1024:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    }

    if (ApplicationEvents.LongKeyPressed) {
    1028:	8e 7f       	andi	r24, 0xFE	; 254
    102a:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
        switch (item_selector) {
    102e:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1032:	81 ff       	sbrs	r24, 1
    1034:	56 c0       	rjmp	.+172    	; 0x10e2 <main_event_cb.lto_priv.29+0x7f6>
    1036:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <item_selector.3154>
}

void Modbus_disable() {
    TCCR2A = 0x00;
    103a:	99 23       	and	r25, r25
    TCCR2B = 0x00;
    103c:	19 f0       	breq	.+6      	; 0x1044 <main_event_cb.lto_priv.29+0x758>
    103e:	91 30       	cpi	r25, 0x01	; 1
    TIMSK2 &= ~(1 << TOV2);
    1040:	f1 f0       	breq	.+60     	; 0x107e <main_event_cb.lto_priv.29+0x792>
    1042:	35 c0       	rjmp	.+106    	; 0x10ae <main_event_cb.lto_priv.29+0x7c2>
    1044:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1048:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
            case BTN_BACK:
                Modbus_disable();
                rs232_disable();
    104c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
                rs485_disable();
    1050:	8e 7f       	andi	r24, 0xFE	; 254
    1052:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    /* Enable input capture and timer overflow interrupts */
    TIMSK1 |= (1 << ICIE1) | (1 << TOIE1);
}

void frequency_measurement_stop() {
    TCCR1A = 0;
    1056:	c0 d6       	rcall	.+3456   	; 0x1dd8 <rs232_disable.lto_priv.40>
    1058:	c5 d6       	rcall	.+3466   	; 0x1de4 <rs485_disable.lto_priv.39>
    TCCR1B = 0;
    105a:	40 9a       	sbi	0x08, 0	; 8
    105c:	29 98       	cbi	0x05, 1	; 5
    TIMSK1 &= (1 << ICIE1) | (1 << TOIE1);
    105e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1062:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1066:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

                pullup_disable();
                boost_disable();
                frequency_measurement_stop();
                soft_PWM_stop();
    106a:	81 72       	andi	r24, 0x21	; 33
                isCalibrating = false;
    106c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    1070:	0e 94 30 14 	call	0x2860	; 0x2860 <soft_PWM_stop>
    1074:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <isCalibrating.3155>
                soft_PWM_stop();
                isCalibrating = false;
                schedule_task(&mode_select_task);
                break;
            case BTN_CALIBRATE:
                if (sensor_type == SENSOR_RS232) {
    1078:	87 ee       	ldi	r24, 0xE7	; 231
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	08 c0       	rjmp	.+16     	; 0x108e <main_event_cb.lto_priv.29+0x7a2>
    task->event_handler = cb;
    task->id = 0;
}

void task_set_type(struct task_cb *task, unsigned char type) {
    task->type = type;
    107e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <sensor_type.3157>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	71 f4       	brne	.+28     	; 0x10a2 <main_event_cb.lto_priv.29+0x7b6>
    1086:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <rs232_task.lto_priv.46+0x2>
    108a:	88 ec       	ldi	r24, 0xC8	; 200
    108c:	92 e0       	ldi	r25, 0x02	; 2
    ApplicationEvents.TaskChanged = 1;
    108e:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <current_task.lto_priv.44+0x1>
    1092:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <current_task.lto_priv.44>
    1096:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
                break;
            case BTN_CALIBRATE:
                if (sensor_type == SENSOR_RS232) {
                    task_set_type(&rs232_task, SENSOR_RS232);
                    schedule_task(&rs232_task);
                } else if (sensor_type == SENSOR_RS485) {
    109a:	84 60       	ori	r24, 0x04	; 4
    109c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
                    task_set_type(&rs232_task, SENSOR_RS485);
                    schedule_task(&rs232_task);
                } else {
                    isCalibrating = true;
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <main_event_cb.lto_priv.29+0x7c2>
static int8_t run_analog_calibration(uint16_t value, bool reset, enum sensorType type) {
    static uint8_t state;
    static volatile uint32_t clb_confirm_ctr;

    if (reset) {
        state = CAL_STATE0;
    10a2:	84 30       	cpi	r24, 0x04	; 4
    10a4:	81 f3       	breq	.-32     	; 0x1086 <main_event_cb.lto_priv.29+0x79a>
                    isCalibrating = true;
                    run_analog_calibration(0, true, sensor_type);
                }
                break;
        }
        ApplicationEvents.LongKeyPressed = 0;
    10a6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <isCalibrating.3155>
    10aa:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <state.2921>
    10ae:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    }
    return 0;
}

void timer3s_reset() {
    TimerEvents.Timer3sExpired = 0;
    10b2:	8d 7f       	andi	r24, 0xFD	; 253
    10b4:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <main_event_cb.lto_priv.29+0x7f6>
    10ba:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    counter_3s = 0;
    10be:	87 7f       	andi	r24, 0xF7	; 247
    10c0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
    10c4:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <counter_3s.lto_priv.48+0x1>
        if (calibrationOK == 1) {
            lcdLock = true;
            isCalibrating = false;
            fb_put_str_redraw(str_cal_success, 5);
        } else if (calibrationOK == -1) {
            lcdLock = true;
    10c8:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <counter_3s.lto_priv.48>
            isCalibrating = false;
    10cc:	b4 cd       	rjmp	.-1176   	; 0xc36 <main_event_cb.lto_priv.29+0x34a>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
            fb_put_str_redraw(str_cal_error, 5);
    10d0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <lcdLock.3156>
    10d4:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <isCalibrating.3155>
    10d8:	86 ef       	ldi	r24, 0xF6	; 246
                }
                break;
        }
        ApplicationEvents.LongKeyPressed = 0;
    }
}
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 e7 11 	call	0x23ce	; 0x23ce <fb_put_str_redraw.constprop.18>
        }
        ApplicationEvents.LongKeyPressed = 0;
    }
}

static void rs232_baud_select_event_cb(task_t * evt) {
    10e0:	78 cf       	rjmp	.-272    	; 0xfd2 <main_event_cb.lto_priv.29+0x6e6>
    10e2:	25 96       	adiw	r28, 0x05	; 5
    10e4:	ec e0       	ldi	r30, 0x0C	; 12
    10e6:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__epilogue_restores__+0xc>

000010ea <rs232_baud_select_event_cb.lto_priv.33>:
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    static uint8_t menu_selector;
    static uint8_t device_id;

    if (ApplicationEvents.TaskChanged) {
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
        load_frame();
    10f6:	ec 01       	movw	r28, r24
    10f8:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
        device_id = evt->id;
    10fc:	82 ff       	sbrs	r24, 2
    10fe:	13 c0       	rjmp	.+38     	; 0x1126 <rs232_baud_select_event_cb.lto_priv.33+0x3c>
        menu_selector = baud_index - 1;
    1100:	ab d3       	rcall	.+1878   	; 0x1858 <load_frame.lto_priv.57>
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <device_id.3089>
    1108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
        ApplicationEvents.ShortKeyPressed = 1;
    110c:	81 50       	subi	r24, 0x01	; 1
    110e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <menu_selector.3088>
    1112:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>

        ApplicationEvents.TaskChanged = 0;
    1116:	81 60       	ori	r24, 0x01	; 1
    1118:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    111c:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    }

    if (ApplicationEvents.ShortKeyPressed) {
    1120:	8b 7f       	andi	r24, 0xFB	; 251
    1122:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
        if (++menu_selector > 6)
    1126:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    112a:	80 ff       	sbrs	r24, 0
    112c:	3a c0       	rjmp	.+116    	; 0x11a2 <rs232_baud_select_event_cb.lto_priv.33+0xb8>
    112e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <menu_selector.3088>
    1132:	8f 5f       	subi	r24, 0xFF	; 255
            menu_selector = 0;
    1134:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <menu_selector.3088>

        switch (menu_selector) {
    1138:	87 30       	cpi	r24, 0x07	; 7
    113a:	10 f0       	brcs	.+4      	; 0x1140 <rs232_baud_select_event_cb.lto_priv.33+0x56>
    113c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <menu_selector.3088>
    1140:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <menu_selector.3088>
    1144:	8e 2f       	mov	r24, r30
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	87 30       	cpi	r24, 0x07	; 7
    114a:	91 05       	cpc	r25, r1
    114c:	20 f5       	brcc	.+72     	; 0x1196 <rs232_baud_select_event_cb.lto_priv.33+0xac>
    114e:	fc 01       	movw	r30, r24
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1150:	ec 5c       	subi	r30, 0xCC	; 204
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__tablejump2__>
    frameSelection.sel_end = sel_end;
    1158:	82 e8       	ldi	r24, 0x82	; 130
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    115a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    115e:	80 e3       	ldi	r24, 0x30	; 48
    frameSelection.sel_end = sel_end;
    1160:	04 c0       	rjmp	.+8      	; 0x116a <rs232_baud_select_event_cb.lto_priv.33+0x80>
    1162:	82 e4       	ldi	r24, 0x42	; 66
    1164:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1168:	82 e7       	ldi	r24, 0x72	; 114
    116a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <frameSelection.lto_priv.66+0x1>
    116e:	13 c0       	rjmp	.+38     	; 0x1196 <rs232_baud_select_event_cb.lto_priv.33+0xac>
    1170:	82 ec       	ldi	r24, 0xC2	; 194
    frameSelection.sel_end = sel_end;
    1172:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1176:	83 ea       	ldi	r24, 0xA3	; 163
    1178:	f8 cf       	rjmp	.-16     	; 0x116a <rs232_baud_select_event_cb.lto_priv.33+0x80>
    117a:	83 e8       	ldi	r24, 0x83	; 131
    117c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    frameSelection.sel_end = sel_end;
    1180:	88 e3       	ldi	r24, 0x38	; 56
    1182:	f3 cf       	rjmp	.-26     	; 0x116a <rs232_baud_select_event_cb.lto_priv.33+0x80>
                break;
            case 5: // 115200
                menu_item_highlight(3, 15, 21);
                break;
            case 6: // Cancel
                menu_row_highlight(7);
    1184:	83 e4       	ldi	r24, 0x43	; 67
    1186:	ee cf       	rjmp	.-36     	; 0x1164 <rs232_baud_select_event_cb.lto_priv.33+0x7a>
    1188:	83 ec       	ldi	r24, 0xC3	; 195
                break;
        }
        redraw();
    118a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>

        ApplicationEvents.ShortKeyPressed = 0;
    118e:	8b ea       	ldi	r24, 0xAB	; 171
    1190:	ec cf       	rjmp	.-40     	; 0x116a <rs232_baud_select_event_cb.lto_priv.33+0x80>
    1192:	87 e0       	ldi	r24, 0x07	; 7
    1194:	5a d3       	rcall	.+1716   	; 0x184a <menu_row_highlight.lto_priv.59>
    1196:	d0 d4       	rcall	.+2464   	; 0x1b38 <redraw.lto_priv.56>
    }

    if (ApplicationEvents.LongKeyPressed) {
    1198:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    119c:	8e 7f       	andi	r24, 0xFE	; 254
    119e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
        switch (menu_selector) {
    11a2:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    11a6:	81 ff       	sbrs	r24, 1
    11a8:	35 c0       	rjmp	.+106    	; 0x1214 <rs232_baud_select_event_cb.lto_priv.33+0x12a>
    11aa:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <menu_selector.3088>
            case 0 ... 5:
                /* Write and exit */
                baud_index = menu_selector;
    11ae:	e6 30       	cpi	r30, 0x06	; 6
    11b0:	18 f0       	brcs	.+6      	; 0x11b8 <rs232_baud_select_event_cb.lto_priv.33+0xce>
                uint32_t baudrate = baud_lut[baud_index];
    11b2:	e6 30       	cpi	r30, 0x06	; 6
    11b4:	f9 f0       	breq	.+62     	; 0x11f4 <rs232_baud_select_event_cb.lto_priv.33+0x10a>
    11b6:	29 c0       	rjmp	.+82     	; 0x120a <rs232_baud_select_event_cb.lto_priv.33+0x120>
    11b8:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <__data_start>
    11bc:	84 e0       	ldi	r24, 0x04	; 4
    11be:	e8 9f       	mul	r30, r24
    11c0:	f0 01       	movw	r30, r0
                modbus_poll_wr(DOT_DEVICE_BAUD, baudrate >> 16, device_id);
    11c2:	11 24       	eor	r1, r1
    11c4:	e8 5e       	subi	r30, 0xE8	; 232
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	c0 80       	ld	r12, Z
    11ca:	d1 80       	ldd	r13, Z+1	; 0x01
    11cc:	e2 80       	ldd	r14, Z+2	; 0x02
    11ce:	f3 80       	ldd	r15, Z+3	; 0x03
    11d0:	c0 91 4c 01 	lds	r28, 0x014C	; 0x80014c <device_id.3089>
    11d4:	b7 01       	movw	r22, r14
                modbus_poll_wr(DOT_DEVICE_BAUD + 1, (uint16_t) baudrate, device_id);
    11d6:	88 27       	eor	r24, r24
    11d8:	99 27       	eor	r25, r25
    11da:	4c 2f       	mov	r20, r28
    11dc:	80 e2       	ldi	r24, 0x20	; 32
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	ef d2       	rcall	.+1502   	; 0x17c0 <modbus_poll_wr.lto_priv.63>
                UART_init(baudrate);
    11e2:	4c 2f       	mov	r20, r28
    11e4:	b6 01       	movw	r22, r12
    11e6:	81 e2       	ldi	r24, 0x21	; 33
    11e8:	90 e0       	ldi	r25, 0x00	; 0
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    11ea:	ea d2       	rcall	.+1492   	; 0x17c0 <modbus_poll_wr.lto_priv.63>
    11ec:	c7 01       	movw	r24, r14
    11ee:	b6 01       	movw	r22, r12
    11f0:	0e 94 81 15 	call	0x2b02	; 0x2b02 <UART_init>
    11f4:	82 ec       	ldi	r24, 0xC2	; 194
    ApplicationEvents.TaskChanged = 1;
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <current_task.lto_priv.44+0x1>
    11fc:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <current_task.lto_priv.44>
                break;
            case 6:
                schedule_task(&rs232_settings_task);
                break;
        }
        ApplicationEvents.LongKeyPressed = 0;
    1200:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1204:	84 60       	ori	r24, 0x04	; 4
    1206:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    }
}
    120a:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    120e:	8d 7f       	andi	r24, 0xFD	; 253
    1210:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    1214:	df 91       	pop	r29

static void rs232_settings_event_cb(task_t * evt) {
    1216:	cf 91       	pop	r28
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	df 90       	pop	r13
    121e:	cf 90       	pop	r12
    static enum interfaceSettingsSelector row_selector;
    static enum settingsOptionSelector option_selector;
    static uint8_t device_id;
    static uint8_t write_reg;

    if (ApplicationEvents.TaskChanged) {
    1220:	08 95       	ret

00001222 <rs232_settings_event_cb.lto_priv.31>:
    1222:	a6 e0       	ldi	r26, 0x06	; 6
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e7 e1       	ldi	r30, 0x17	; 23
        device_id = 0;
    1228:	f9 e0       	ldi	r31, 0x09	; 9
    122a:	0c 94 35 1c 	jmp	0x386a	; 0x386a <__prologue_saves__+0x1a>
        load_frame();
    122e:	8c 01       	movw	r16, r24
        row_selector = BTN_ID;
    1230:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1234:	82 ff       	sbrs	r24, 2
        option_selector = MB_ID;
    1236:	11 c0       	rjmp	.+34     	; 0x125a <rs232_settings_event_cb.lto_priv.31+0x38>
    1238:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <device_id.3121>
        menu_row_highlight(row_selector);
    123c:	0d d3       	rcall	.+1562   	; 0x1858 <load_frame.lto_priv.57>
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <row_selector.3119>
        redraw();
    1244:	82 e0       	ldi	r24, 0x02	; 2
        ApplicationEvents.TaskChanged = 0;
    1246:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <option_selector.3120>
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	fe d2       	rcall	.+1532   	; 0x184a <menu_row_highlight.lto_priv.59>
    124e:	74 d4       	rcall	.+2280   	; 0x1b38 <redraw.lto_priv.56>
    }

    static uint8_t net_mode, auto_send, omni_interval, reg_value;
    uint8_t pos = option_selector - 1;
    1250:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1254:	8b 7f       	andi	r24, 0xFB	; 251
    1256:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    uint8_t got_val = 0;
    if (device_id) {
    125a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <option_selector.3120>
    125e:	ff 24       	eor	r15, r15
    1260:	fa 94       	dec	r15
    1262:	f8 0e       	add	r15, r24
        switch (option_selector) {
    1264:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <device_id.3121>
    1268:	44 23       	and	r20, r20
    126a:	09 f4       	brne	.+2      	; 0x126e <rs232_settings_event_cb.lto_priv.31+0x4c>
    126c:	9a c0       	rjmp	.+308    	; 0x13a2 <rs232_settings_event_cb.lto_priv.31+0x180>
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	41 f1       	breq	.+80     	; 0x12c2 <rs232_settings_event_cb.lto_priv.31+0xa0>
    1272:	60 f4       	brcc	.+24     	; 0x128c <rs232_settings_event_cb.lto_priv.31+0x6a>
                got_val = 0;
                modbus_poll_wr(write_reg, reg_value, device_id);
                option_selector = MB_ID;
                break;
            case MB_ID:
                fb_put_tag(pos, str_id, device_id);
    1274:	88 23       	and	r24, r24
    1276:	91 f0       	breq	.+36     	; 0x129c <rs232_settings_event_cb.lto_priv.31+0x7a>
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	09 f0       	breq	.+2      	; 0x127e <rs232_settings_event_cb.lto_priv.31+0x5c>
    127c:	8c c0       	rjmp	.+280    	; 0x1396 <rs232_settings_event_cb.lto_priv.31+0x174>
    127e:	24 2f       	mov	r18, r20
    1280:	30 e0       	ldi	r19, 0x00	; 0

    static uint8_t net_mode, auto_send, omni_interval, reg_value;
    uint8_t pos = option_selector - 1;
    uint8_t got_val = 0;
    if (device_id) {
        switch (option_selector) {
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	62 e9       	ldi	r22, 0x92	; 146
    1288:	76 e0       	ldi	r23, 0x06	; 6
    128a:	37 c0       	rjmp	.+110    	; 0x12fa <rs232_settings_event_cb.lto_priv.31+0xd8>
    128c:	85 30       	cpi	r24, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    128e:	09 f4       	brne	.+2      	; 0x1292 <rs232_settings_event_cb.lto_priv.31+0x70>
    1290:	50 c0       	rjmp	.+160    	; 0x1332 <rs232_settings_event_cb.lto_priv.31+0x110>
    1292:	d8 f1       	brcs	.+118    	; 0x130a <rs232_settings_event_cb.lto_priv.31+0xe8>
    1294:	86 30       	cpi	r24, 0x06	; 6
    1296:	09 f4       	brne	.+2      	; 0x129a <rs232_settings_event_cb.lto_priv.31+0x78>
    1298:	72 c0       	rjmp	.+228    	; 0x137e <rs232_settings_event_cb.lto_priv.31+0x15c>
    129a:	7d c0       	rjmp	.+250    	; 0x1396 <rs232_settings_event_cb.lto_priv.31+0x174>
    129c:	2f ef       	ldi	r18, 0xFF	; 255
            case MB_WRITE_OPTION:
                _delay_ms(50); // skip any incoming reply
                got_val = 0;
                modbus_poll_wr(write_reg, reg_value, device_id);
    129e:	8f e3       	ldi	r24, 0x3F	; 63
    12a0:	92 e0       	ldi	r25, 0x02	; 2
    12a2:	21 50       	subi	r18, 0x01	; 1
    12a4:	80 40       	sbci	r24, 0x00	; 0
    12a6:	90 40       	sbci	r25, 0x00	; 0
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <rs232_settings_event_cb.lto_priv.31+0x80>
    12aa:	00 c0       	rjmp	.+0      	; 0x12ac <rs232_settings_event_cb.lto_priv.31+0x8a>
    12ac:	00 00       	nop
    12ae:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <reg_value.3126>
    12b2:	70 e0       	ldi	r23, 0x00	; 0
            case MB_ID:
                fb_put_tag(pos, str_id, device_id);
                option_selector++;
                break;
            case MB_BAUD:
                got_val = modbus_poll_r(DOT_DEVICE_BAUD, 2, device_id);
    12b4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <write_reg.3122>
    12b8:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <device_id.3121>
                if (got_val) {
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	80 d2       	rcall	.+1280   	; 0x17c0 <modbus_poll_wr.lto_priv.63>
}

uint32_t GetInpRegsLONG(uint8_t index) {
    uint32_t in_reg[1];
    uint8_t in_data[4];
    memcpy((uint8_t *) in_data, (uint8_t *) (&Buf_data[3 + index * 2]), 4);
    12c0:	6e c0       	rjmp	.+220    	; 0x139e <rs232_settings_event_cb.lto_priv.31+0x17c>
    12c2:	62 e0       	ldi	r22, 0x02	; 2
    12c4:	80 e2       	ldi	r24, 0x20	; 32
    12c6:	9f d2       	rcall	.+1342   	; 0x1806 <modbus_poll_r.lto_priv.55>
    12c8:	88 23       	and	r24, r24
    12ca:	09 f4       	brne	.+2      	; 0x12ce <rs232_settings_event_cb.lto_priv.31+0xac>
    12cc:	74 c0       	rjmp	.+232    	; 0x13b6 <rs232_settings_event_cb.lto_priv.31+0x194>
    12ce:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <Buf_data.lto_priv.53>
    12d2:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <Buf_data.lto_priv.53+0x1>
    memrevercy(in_data, 4);
    12d6:	83 81       	ldd	r24, Z+3	; 0x03
    12d8:	94 81       	ldd	r25, Z+4	; 0x04
    12da:	a5 81       	ldd	r26, Z+5	; 0x05
    memcpy(in_reg, in_data, 4);
    12dc:	b6 81       	ldd	r27, Z+6	; 0x06
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	9a 83       	std	Y+2, r25	; 0x02
    12e2:	ab 83       	std	Y+3, r26	; 0x03
                    uint32_t brate = GetInpRegsLONG(0);
                    fb_put_tag(pos, str_baudrate, brate);
    12e4:	bc 83       	std	Y+4, r27	; 0x04
    12e6:	ce 01       	movw	r24, r28
                got_val = 0;
                modbus_poll_wr(write_reg, reg_value, device_id);
                option_selector = MB_ID;
                break;
            case MB_ID:
                fb_put_tag(pos, str_id, device_id);
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	0e 94 52 12 	call	0x24a4	; 0x24a4 <memrevercy.constprop.9>
                option_selector++;
    12ee:	29 81       	ldd	r18, Y+1	; 0x01
    12f0:	3a 81       	ldd	r19, Y+2	; 0x02
    12f2:	4b 81       	ldd	r20, Y+3	; 0x03
    12f4:	5c 81       	ldd	r21, Y+4	; 0x04
    12f6:	69 e8       	ldi	r22, 0x89	; 137
                    fb_put_tag(pos, str_baudrate, brate);
                    option_selector++;
                }
                break;
            case MB_NET_MODE:
                got_val = modbus_poll_r(DOT_OMNI_NET_MODE, 1, device_id);
    12f8:	76 e0       	ldi	r23, 0x06	; 6
    12fa:	8f 2d       	mov	r24, r15
    12fc:	2a d3       	rcall	.+1620   	; 0x1952 <fb_put_tag.lto_priv.62>
    12fe:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <option_selector.3120>
                if (got_val) {
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <option_selector.3120>
                    net_mode = GetInpRegsUSHORT(0);
    1308:	56 c0       	rjmp	.+172    	; 0x13b6 <rs232_settings_event_cb.lto_priv.31+0x194>
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	8b e1       	ldi	r24, 0x1B	; 27
                    fb_put_tag_str(pos, str_net_mode, net_mode == 1 ? (PGM_P) str_on : (PGM_P) str_off);
    130e:	7b d2       	rcall	.+1270   	; 0x1806 <modbus_poll_r.lto_priv.55>
    1310:	88 23       	and	r24, r24
    1312:	09 f4       	brne	.+2      	; 0x1316 <rs232_settings_event_cb.lto_priv.31+0xf4>
    1314:	50 c0       	rjmp	.+160    	; 0x13b6 <rs232_settings_event_cb.lto_priv.31+0x194>
    1316:	0e 94 46 12 	call	0x248c	; 0x248c <GetInpRegsUSHORT.constprop.10>
    131a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <net_mode.3123>
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	19 f0       	breq	.+6      	; 0x1328 <rs232_settings_event_cb.lto_priv.31+0x106>
                    option_selector++;
                }
                break;
            case MB_AUTO_TX:
                got_val = modbus_poll_r(DOT_OMNI_AUTO_SEND, 1, device_id);
    1322:	41 e9       	ldi	r20, 0x91	; 145
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	02 c0       	rjmp	.+4      	; 0x132c <rs232_settings_event_cb.lto_priv.31+0x10a>
    1328:	46 e9       	ldi	r20, 0x96	; 150
                if (got_val) {
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	6b e7       	ldi	r22, 0x7B	; 123
    132e:	76 e0       	ldi	r23, 0x06	; 6
                    const char *opt[] = {(PGM_P) str_off, (PGM_P) str_bin_mode, (PGM_P) str_text_mode};
    1330:	23 c0       	rjmp	.+70     	; 0x1378 <rs232_settings_event_cb.lto_priv.31+0x156>
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	89 e1       	ldi	r24, 0x19	; 25
    1336:	67 d2       	rcall	.+1230   	; 0x1806 <modbus_poll_r.lto_priv.55>
    1338:	88 23       	and	r24, r24
    133a:	09 f4       	brne	.+2      	; 0x133e <rs232_settings_event_cb.lto_priv.31+0x11c>
    133c:	3c c0       	rjmp	.+120    	; 0x13b6 <rs232_settings_event_cb.lto_priv.31+0x194>
    133e:	86 e0       	ldi	r24, 0x06	; 6
                    auto_send = GetInpRegsUSHORT(0);
    1340:	e2 e1       	ldi	r30, 0x12	; 18
    1342:	f1 e0       	ldi	r31, 0x01	; 1
    1344:	de 01       	movw	r26, r28
                    if (auto_send < 3)
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	01 90       	ld	r0, Z+
                        fb_put_tag_str(pos, str_auto_send, opt[auto_send]);
    134a:	0d 92       	st	X+, r0
    134c:	8a 95       	dec	r24
    134e:	e1 f7       	brne	.-8      	; 0x1348 <rs232_settings_event_cb.lto_priv.31+0x126>
    1350:	0e 94 46 12 	call	0x248c	; 0x248c <GetInpRegsUSHORT.constprop.10>
    1354:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <auto_send.3124>
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	88 f6       	brcc	.-94     	; 0x12fe <rs232_settings_event_cb.lto_priv.31+0xdc>
    135c:	fc 01       	movw	r30, r24
    135e:	ff 27       	eor	r31, r31
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
                    option_selector++;
                }
                break;
            case MB_TX_INTERVAL:
                got_val = print_ushort_register(DOT_OMNI_INTERVAL, pos, device_id, str_interval);
    1368:	8c 0f       	add	r24, r28
    136a:	9d 1f       	adc	r25, r29
    136c:	e8 0f       	add	r30, r24
    136e:	f9 1f       	adc	r31, r25
    1370:	40 81       	ld	r20, Z
    1372:	51 81       	ldd	r21, Z+1	; 0x01
                if (got_val) {
    1374:	6d e6       	ldi	r22, 0x6D	; 109
    1376:	76 e0       	ldi	r23, 0x06	; 6
                    omni_interval = GetInpRegsUSHORT(0);
    1378:	8f 2d       	mov	r24, r15
    137a:	c6 d2       	rcall	.+1420   	; 0x1908 <fb_put_tag_str.lto_priv.61>
    137c:	c0 cf       	rjmp	.-128    	; 0x12fe <rs232_settings_event_cb.lto_priv.31+0xdc>
    137e:	2c e5       	ldi	r18, 0x5C	; 92
    1380:	36 e0       	ldi	r19, 0x06	; 6
                    option_selector++;
                }
                break;
            default:
                menu_row_highlight(row_selector);
    1382:	6f 2d       	mov	r22, r15
    1384:	8a e1       	ldi	r24, 0x1A	; 26
    1386:	16 d3       	rcall	.+1580   	; 0x19b4 <print_ushort_register.lto_priv.60>
                redraw();
                option_selector = MB_ID;
    1388:	88 23       	and	r24, r24
    138a:	a9 f0       	breq	.+42     	; 0x13b6 <rs232_settings_event_cb.lto_priv.31+0x194>
                break;

        }
    } else {
        int8_t got_id = modbus_poll_r(DOT_DEVICE_ID, 1, 0);
    138c:	0e 94 46 12 	call	0x248c	; 0x248c <GetInpRegsUSHORT.constprop.10>
    1390:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <omni_interval.3125>
    1394:	b4 cf       	rjmp	.-152    	; 0x12fe <rs232_settings_event_cb.lto_priv.31+0xdc>
        if (got_id > 0) device_id = modbus_get_id();
    1396:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <row_selector.3119>
    139a:	57 d2       	rcall	.+1198   	; 0x184a <menu_row_highlight.lto_priv.59>
    139c:	cd d3       	rcall	.+1946   	; 0x1b38 <redraw.lto_priv.56>
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	b1 cf       	rjmp	.-158    	; 0x1304 <rs232_settings_event_cb.lto_priv.31+0xe2>
    }

    if (ApplicationEvents.ShortKeyPressed) {
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	61 e0       	ldi	r22, 0x01	; 1
    13a6:	8f e1       	ldi	r24, 0x1F	; 31
    13a8:	2e d2       	rcall	.+1116   	; 0x1806 <modbus_poll_r.lto_priv.55>
        if (++row_selector > BTN_EXIT)
    13aa:	18 16       	cp	r1, r24
    13ac:	24 f4       	brge	.+8      	; 0x13b6 <rs232_settings_event_cb.lto_priv.31+0x194>
    13ae:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DataBuffer0>
    13b2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <device_id.3121>
    13b6:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
            row_selector = BTN_ID;
    13ba:	80 ff       	sbrs	r24, 0
    13bc:	13 c0       	rjmp	.+38     	; 0x13e4 <rs232_settings_event_cb.lto_priv.31+0x1c2>
        menu_row_highlight(row_selector);
    13be:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <row_selector.3119>
    13c2:	8f 5f       	subi	r24, 0xFF	; 255
    13c4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <row_selector.3119>
        redraw();
    13c8:	87 30       	cpi	r24, 0x07	; 7

        ApplicationEvents.ShortKeyPressed = 0;
    13ca:	18 f0       	brcs	.+6      	; 0x13d2 <rs232_settings_event_cb.lto_priv.31+0x1b0>
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <row_selector.3119>
    13d2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <row_selector.3119>
    }

    if (ApplicationEvents.LongKeyPressed) {
    13d6:	39 d2       	rcall	.+1138   	; 0x184a <menu_row_highlight.lto_priv.59>
    13d8:	af d3       	rcall	.+1886   	; 0x1b38 <redraw.lto_priv.56>
    13da:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
        switch (row_selector) {
    13de:	8e 7f       	andi	r24, 0xFE	; 254
    13e0:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    13e4:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    13e8:	81 ff       	sbrs	r24, 1
    13ea:	5a c0       	rjmp	.+180    	; 0x14a0 <rs232_settings_event_cb.lto_priv.31+0x27e>
    13ec:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <row_selector.3119>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	09 f1       	breq	.+66     	; 0x1436 <rs232_settings_event_cb.lto_priv.31+0x214>
    13f4:	40 f4       	brcc	.+16     	; 0x1406 <rs232_settings_event_cb.lto_priv.31+0x1e4>

        ApplicationEvents.ShortKeyPressed = 0;
    }

    if (ApplicationEvents.LongKeyPressed) {
        switch (row_selector) {
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	99 f0       	breq	.+38     	; 0x1420 <rs232_settings_event_cb.lto_priv.31+0x1fe>
    13fa:	82 30       	cpi	r24, 0x02	; 2
    13fc:	09 f0       	breq	.+2      	; 0x1400 <rs232_settings_event_cb.lto_priv.31+0x1de>
    13fe:	4b c0       	rjmp	.+150    	; 0x1496 <rs232_settings_event_cb.lto_priv.31+0x274>
    1400:	86 eb       	ldi	r24, 0xB6	; 182
                reg_value = omni_interval + 10;
                if (reg_value > 60) reg_value = 10;
                option_selector = MB_WRITE_OPTION;
                break;
            case BTN_EXIT:
                task_set_type(&rs232_task, evt->type);
    1402:	92 e0       	ldi	r25, 0x02	; 2
    1404:	3f c0       	rjmp	.+126    	; 0x1484 <rs232_settings_event_cb.lto_priv.31+0x262>
    1406:	85 30       	cpi	r24, 0x05	; 5
    1408:	79 f1       	breq	.+94     	; 0x1468 <rs232_settings_event_cb.lto_priv.31+0x246>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    140a:	f8 f0       	brcs	.+62     	; 0x144a <rs232_settings_event_cb.lto_priv.31+0x228>
    140c:	86 30       	cpi	r24, 0x06	; 6
    140e:	09 f0       	breq	.+2      	; 0x1412 <rs232_settings_event_cb.lto_priv.31+0x1f0>
}

void task_set_id(struct task_cb *task, unsigned char id) {
    task->id = id;
    1410:	42 c0       	rjmp	.+132    	; 0x1496 <rs232_settings_event_cb.lto_priv.31+0x274>
    1412:	f8 01       	movw	r30, r16
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <rs232_task.lto_priv.46+0x2>

    if (ApplicationEvents.LongKeyPressed) {
        switch (row_selector) {
            case BTN_ID:
                task_set_id(&rs232_id_select_task, device_id);
                task_set_type(&rs232_id_select_task, evt-> type);
    141a:	88 ec       	ldi	r24, 0xC8	; 200
    task->event_handler = cb;
    task->id = 0;
}

void task_set_type(struct task_cb *task, unsigned char type) {
    task->type = type;
    141c:	92 e0       	ldi	r25, 0x02	; 2
    141e:	32 c0       	rjmp	.+100    	; 0x1484 <rs232_settings_event_cb.lto_priv.31+0x262>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    1420:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <device_id.3121>
    1424:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <rs232_id_select_task.lto_priv.51+0x3>
                break;
            case BTN_BAUDRATE:
                schedule_task(&rs232_baud_select_task);
                break;
            case BTN_NETWORK:
                write_reg = DOT_OMNI_NET_MODE;
    1428:	f8 01       	movw	r30, r16
    142a:	82 81       	ldd	r24, Z+2	; 0x02
                reg_value = net_mode ? 0 : 1;
    142c:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <rs232_id_select_task.lto_priv.51+0x2>
    1430:	8c eb       	ldi	r24, 0xBC	; 188
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	27 c0       	rjmp	.+78     	; 0x1484 <rs232_settings_event_cb.lto_priv.31+0x262>
    1436:	8b e1       	ldi	r24, 0x1B	; 27
    1438:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <write_reg.3122>
                option_selector = MB_WRITE_OPTION;
                break;
            case BTN_AUTO:
                write_reg = DOT_OMNI_AUTO_SEND;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <net_mode.3123>
                reg_value = auto_send;
                if (++reg_value > 2) reg_value = 0;
    1442:	99 23       	and	r25, r25
    1444:	e1 f0       	breq	.+56     	; 0x147e <rs232_settings_event_cb.lto_priv.31+0x25c>
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	1a c0       	rjmp	.+52     	; 0x147e <rs232_settings_event_cb.lto_priv.31+0x25c>
    144a:	89 e1       	ldi	r24, 0x19	; 25
    144c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <write_reg.3122>
    1450:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <auto_send.3124>
                option_selector = MB_WRITE_OPTION;
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <reg_value.3126>
                break;
            case BTN_PERIOD:
                write_reg = DOT_OMNI_INTERVAL;
    145a:	83 30       	cpi	r24, 0x03	; 3
    145c:	10 f0       	brcs	.+4      	; 0x1462 <rs232_settings_event_cb.lto_priv.31+0x240>
                reg_value = omni_interval + 10;
    145e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <reg_value.3126>
    1462:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <option_selector.3120>
    1466:	17 c0       	rjmp	.+46     	; 0x1496 <rs232_settings_event_cb.lto_priv.31+0x274>
                if (reg_value > 60) reg_value = 10;
    1468:	8a e1       	ldi	r24, 0x1A	; 26
    146a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <write_reg.3122>
    146e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <omni_interval.3125>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    1472:	86 5f       	subi	r24, 0xF6	; 246
    1474:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <reg_value.3126>
    1478:	8d 33       	cpi	r24, 0x3D	; 61
    ApplicationEvents.TaskChanged = 1;
    147a:	98 f3       	brcs	.-26     	; 0x1462 <rs232_settings_event_cb.lto_priv.31+0x240>
    147c:	8a e0       	ldi	r24, 0x0A	; 10
    147e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <reg_value.3126>
    1482:	ef cf       	rjmp	.-34     	; 0x1462 <rs232_settings_event_cb.lto_priv.31+0x240>
            case BTN_EXIT:
                task_set_type(&rs232_task, evt->type);
                schedule_task(&rs232_task);
                break;
        }
        ApplicationEvents.LongKeyPressed = 0;
    1484:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <current_task.lto_priv.44+0x1>
    1488:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <current_task.lto_priv.44>
    148c:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    }
}
    1490:	84 60       	ori	r24, 0x04	; 4
    1492:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>

        ApplicationEvents.LongKeyPressed = 0;
    }
}

static void rs232_param_adjust_event_cb(task_t *evt) {
    1496:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    149a:	8d 7f       	andi	r24, 0xFD	; 253
    149c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    14a0:	26 96       	adiw	r28, 0x06	; 6
            val[6 - i] = tmp[len - i];
        }
        memcpy(&framebuffer[3][pofs], val, 6);
    }

    if (ApplicationEvents.TaskChanged) {
    14a2:	e5 e0       	ldi	r30, 0x05	; 5
    14a4:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__epilogue_restores__+0x1a>

000014a8 <rs232_param_adjust_event_cb.lto_priv.34>:
        load_frame();
    14a8:	a0 e0       	ldi	r26, 0x00	; 0
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
        device_id = evt->id;
    14ac:	ea e5       	ldi	r30, 0x5A	; 90
    14ae:	fa e0       	ldi	r31, 0x0A	; 10
        menu_selector = BTN_DIGIT0;
    14b0:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__prologue_saves__+0x14>
        edit_mode = 0;
    14b4:	ec 01       	movw	r28, r24
    14b6:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>

        //@WARNING: unsafe!
        memcpy_P(&framebuffer[2][pofs], parameters.param_str, strlen_P(parameters.param_str));
    14ba:	82 ff       	sbrs	r24, 2
    14bc:	2a c0       	rjmp	.+84     	; 0x1512 <rs232_param_adjust_event_cb.lto_priv.34+0x6a>
    14be:	cc d1       	rcall	.+920    	; 0x1858 <load_frame.lto_priv.57>
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <device_id.3050>
    14c6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <menu_selector.3049>
    14ca:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <edit_mode.3051>
    14ce:	c0 91 43 01 	lds	r28, 0x0143	; 0x800143 <parameters+0xc>
        lcpy(parameters.register_value);
    14d2:	d0 91 44 01 	lds	r29, 0x0144	; 0x800144 <parameters+0xd>
    14d6:	ce 01       	movw	r24, r28
    14d8:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__strlen_P>
    14dc:	ac 01       	movw	r20, r24
    14de:	be 01       	movw	r22, r28
    14e0:	8f ec       	ldi	r24, 0xCF	; 207
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <memcpy_P>
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    14e8:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <parameters+0x4>
    frameSelection.sel_end = sel_end;
    14ec:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <parameters+0x5>
    14f0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <parameters+0x6>
        //@WARNING: unsafe!
        memcpy_P(&framebuffer[2][pofs], parameters.param_str, strlen_P(parameters.param_str));
        lcpy(parameters.register_value);

        menu_item_highlight(3, pofs, pofs + 1);
        redraw();
    14f4:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <parameters+0x7>

        ApplicationEvents.TaskChanged = 0;
    14f8:	27 d1       	rcall	.+590    	; 0x1748 <lcpy.3054.lto_priv.64>
    14fa:	83 ec       	ldi	r24, 0xC3	; 195
    14fc:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    }

    if (ApplicationEvents.ShortKeyPressed) {
    1500:	81 e4       	ldi	r24, 0x41	; 65
    1502:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <frameSelection.lto_priv.66+0x1>
    1506:	18 d3       	rcall	.+1584   	; 0x1b38 <redraw.lto_priv.56>
        if (!edit_mode) {
    1508:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    150c:	8b 7f       	andi	r24, 0xFB	; 251
    150e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
            if (++menu_selector > BTN_OK)
    1512:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1516:	80 ff       	sbrs	r24, 0
    1518:	59 c0       	rjmp	.+178    	; 0x15cc <rs232_param_adjust_event_cb.lto_priv.34+0x124>
    151a:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <edit_mode.3051>
                menu_selector = BTN_DIGIT0;
    151e:	91 11       	cpse	r25, r1
    1520:	09 c0       	rjmp	.+18     	; 0x1534 <rs232_param_adjust_event_cb.lto_priv.34+0x8c>
        }

        switch (menu_selector) {
    1522:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <menu_selector.3049>
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <menu_selector.3049>
    152c:	89 30       	cpi	r24, 0x09	; 9
    152e:	10 f0       	brcs	.+4      	; 0x1534 <rs232_param_adjust_event_cb.lto_priv.34+0x8c>
    1530:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <menu_selector.3049>
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1534:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <menu_selector.3049>
    1538:	e6 30       	cpi	r30, 0x06	; 6
    frameSelection.sel_end = sel_end;
    153a:	b9 f1       	breq	.+110    	; 0x15aa <rs232_param_adjust_event_cb.lto_priv.34+0x102>
    153c:	48 f0       	brcs	.+18     	; 0x1550 <rs232_param_adjust_event_cb.lto_priv.34+0xa8>
                menu_selector = BTN_DIGIT0;
        }

        switch (menu_selector) {
            case BTN_DIGIT0 ... BTN_DIGIT5:
                if (edit_mode) {
    153e:	e7 30       	cpi	r30, 0x07	; 7
    1540:	c9 f1       	breq	.+114    	; 0x15b4 <rs232_param_adjust_event_cb.lto_priv.34+0x10c>
                    if (++val[menu_selector] > '9')
    1542:	e8 30       	cpi	r30, 0x08	; 8
    1544:	e9 f5       	brne	.+122    	; 0x15c0 <rs232_param_adjust_event_cb.lto_priv.34+0x118>
    1546:	87 e4       	ldi	r24, 0x47	; 71
    1548:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    154c:	8c ea       	ldi	r24, 0xAC	; 172
    154e:	36 c0       	rjmp	.+108    	; 0x15bc <rs232_param_adjust_event_cb.lto_priv.34+0x114>
    1550:	99 23       	and	r25, r25
                        val[menu_selector] = '0';
    1552:	b1 f0       	breq	.+44     	; 0x1580 <rs232_param_adjust_event_cb.lto_priv.34+0xd8>
    1554:	f0 e0       	ldi	r31, 0x00	; 0
                    memcpy(&framebuffer[3][pofs], val, 6);
    1556:	e0 5d       	subi	r30, 0xD0	; 208
    1558:	fe 4f       	sbci	r31, 0xFE	; 254
    155a:	80 81       	ld	r24, Z
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	80 83       	st	Z, r24
    1560:	8a 33       	cpi	r24, 0x3A	; 58
    1562:	10 f0       	brcs	.+4      	; 0x1568 <rs232_param_adjust_event_cb.lto_priv.34+0xc0>
    1564:	80 e3       	ldi	r24, 0x30	; 48
                    timer0_reset();
    1566:	80 83       	st	Z, r24
    1568:	86 e0       	ldi	r24, 0x06	; 6
    156a:	e0 e3       	ldi	r30, 0x30	; 48
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    156c:	f1 e0       	ldi	r31, 0x01	; 1
    156e:	a5 ee       	ldi	r26, 0xE5	; 229
    1570:	b1 e0       	ldi	r27, 0x01	; 1
    1572:	01 90       	ld	r0, Z+
    1574:	0d 92       	st	X+, r0
    1576:	8a 95       	dec	r24
    1578:	e1 f7       	brne	.-8      	; 0x1572 <rs232_param_adjust_event_cb.lto_priv.34+0xca>
    157a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <timer0_reset>
    157e:	20 c0       	rjmp	.+64     	; 0x15c0 <rs232_param_adjust_event_cb.lto_priv.34+0x118>
    1580:	87 e0       	ldi	r24, 0x07	; 7
    1582:	8e 0f       	add	r24, r30
    frameSelection.sel_end = sel_end;
    1584:	98 2f       	mov	r25, r24
    1586:	92 95       	swap	r25
    1588:	99 0f       	add	r25, r25
    158a:	99 0f       	add	r25, r25
    158c:	90 7c       	andi	r25, 0xC0	; 192
    158e:	93 60       	ori	r25, 0x03	; 3
    1590:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <frameSelection.lto_priv.66>
    1594:	86 95       	lsr	r24
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1596:	86 95       	lsr	r24
    1598:	e8 5f       	subi	r30, 0xF8	; 248
    159a:	ee 0f       	add	r30, r30
    frameSelection.sel_end = sel_end;
    159c:	ee 0f       	add	r30, r30
    159e:	ee 0f       	add	r30, r30
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    15a0:	87 70       	andi	r24, 0x07	; 7
    15a2:	e8 2b       	or	r30, r24
    15a4:	e0 93 46 01 	sts	0x0146, r30	; 0x800146 <frameSelection.lto_priv.66+0x1>
    frameSelection.sel_end = sel_end;
    15a8:	0b c0       	rjmp	.+22     	; 0x15c0 <rs232_param_adjust_event_cb.lto_priv.34+0x118>
    15aa:	85 ec       	ldi	r24, 0xC5	; 197

            case BTN_OK:
                menu_item_highlight(7, 17, 21);
                break;
        }
        redraw();
    15ac:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>

        ApplicationEvents.ShortKeyPressed = 0;
    15b0:	81 e7       	ldi	r24, 0x71	; 113
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <rs232_param_adjust_event_cb.lto_priv.34+0x114>
    15b4:	87 e4       	ldi	r24, 0x47	; 71
    15b6:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    }

    if (timer0_expired() && edit_mode) {
    15ba:	88 e4       	ldi	r24, 0x48	; 72
    15bc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <frameSelection.lto_priv.66+0x1>
    15c0:	bb d2       	rcall	.+1398   	; 0x1b38 <redraw.lto_priv.56>
    15c2:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    15c6:	8e 7f       	andi	r24, 0xFE	; 254
        /* Blink digit selector */
        static uint8_t flip = 0;
        if (flip ^= 1) {
    15c8:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    15cc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <timer0_expired>
    15d0:	88 23       	and	r24, r24
    15d2:	31 f1       	breq	.+76     	; 0x1620 <rs232_param_adjust_event_cb.lto_priv.34+0x178>
    15d4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <edit_mode.3051>
            uint8_t sel = menu_selector + pofs;
    15d8:	88 23       	and	r24, r24
    15da:	11 f1       	breq	.+68     	; 0x1620 <rs232_param_adjust_event_cb.lto_priv.34+0x178>
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    15dc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <flip.3070>
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 27       	eor	r24, r25
    15e4:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <flip.3070>
    15e8:	88 23       	and	r24, r24
    15ea:	c9 f0       	breq	.+50     	; 0x161e <rs232_param_adjust_event_cb.lto_priv.34+0x176>
    15ec:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <menu_selector.3049>
    15f0:	97 e0       	ldi	r25, 0x07	; 7
    15f2:	98 0f       	add	r25, r24
    15f4:	29 2f       	mov	r18, r25
    frameSelection.sel_end = sel_end;
    15f6:	22 95       	swap	r18
    15f8:	22 0f       	add	r18, r18
    15fa:	22 0f       	add	r18, r18
    15fc:	20 7c       	andi	r18, 0xC0	; 192
    15fe:	23 60       	ori	r18, 0x03	; 3
    1600:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <frameSelection.lto_priv.66>
    1604:	29 2f       	mov	r18, r25
    1606:	26 95       	lsr	r18
    1608:	26 95       	lsr	r18
        static uint8_t flip = 0;
        if (flip ^= 1) {
            uint8_t sel = menu_selector + pofs;
            menu_item_highlight(3, sel, sel + 1);
        }
        redraw();
    160a:	88 5f       	subi	r24, 0xF8	; 248
    160c:	98 2f       	mov	r25, r24
    }

    if (ApplicationEvents.LongKeyPressed) {
    160e:	99 0f       	add	r25, r25
    1610:	99 0f       	add	r25, r25
    1612:	99 0f       	add	r25, r25
    1614:	82 2f       	mov	r24, r18
        switch (menu_selector) {
    1616:	87 70       	andi	r24, 0x07	; 7
    1618:	89 2b       	or	r24, r25
    161a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <frameSelection.lto_priv.66+0x1>
    161e:	8c d2       	rcall	.+1304   	; 0x1b38 <redraw.lto_priv.56>
    1620:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1624:	81 ff       	sbrs	r24, 1
    1626:	8b c0       	rjmp	.+278    	; 0x173e <rs232_param_adjust_event_cb.lto_priv.34+0x296>
    1628:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <menu_selector.3049>
            case BTN_DIGIT0 ... BTN_DIGIT5:
                edit_mode = !edit_mode;
    162c:	86 30       	cpi	r24, 0x06	; 6
    162e:	61 f1       	breq	.+88     	; 0x1688 <rs232_param_adjust_event_cb.lto_priv.34+0x1e0>
    1630:	30 f0       	brcs	.+12     	; 0x163e <rs232_param_adjust_event_cb.lto_priv.34+0x196>
    1632:	87 30       	cpi	r24, 0x07	; 7
    1634:	09 f4       	brne	.+2      	; 0x1638 <rs232_param_adjust_event_cb.lto_priv.34+0x190>
    1636:	73 c0       	rjmp	.+230    	; 0x171e <rs232_param_adjust_event_cb.lto_priv.34+0x276>
    TimerEvents.TimerExpired = 0;
    ctr = 0;
}

void timer0_preload_ms(uint16_t ms) {
    preload = ms / 10;
    1638:	88 30       	cpi	r24, 0x08	; 8
    163a:	91 f1       	breq	.+100    	; 0x16a0 <rs232_param_adjust_event_cb.lto_priv.34+0x1f8>
    163c:	7b c0       	rjmp	.+246    	; 0x1734 <rs232_param_adjust_event_cb.lto_priv.34+0x28c>
    163e:	91 e0       	ldi	r25, 0x01	; 1
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1640:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <edit_mode.3051>
    1644:	21 11       	cpse	r18, r1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <edit_mode.3051>
    164c:	28 e2       	ldi	r18, 0x28	; 40
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <preload.lto_priv.47+0x1>
    1654:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <preload.lto_priv.47>
    1658:	97 e0       	ldi	r25, 0x07	; 7
    frameSelection.sel_end = sel_end;
    165a:	98 0f       	add	r25, r24
    165c:	29 2f       	mov	r18, r25
    165e:	22 95       	swap	r18
    1660:	22 0f       	add	r18, r18
    1662:	22 0f       	add	r18, r18
    1664:	20 7c       	andi	r18, 0xC0	; 192
    1666:	23 60       	ori	r18, 0x03	; 3
    1668:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <frameSelection.lto_priv.66>
    166c:	29 2f       	mov	r18, r25
                menu_item_highlight(3, sel, sel + 1);
                redraw_partial(3);
                break;

            case BTN_RESET:
                lcpy(parameters.default_value);
    166e:	26 95       	lsr	r18
    1670:	26 95       	lsr	r18
    1672:	88 5f       	subi	r24, 0xF8	; 248
    1674:	98 2f       	mov	r25, r24
    1676:	99 0f       	add	r25, r25
    1678:	99 0f       	add	r25, r25
    167a:	99 0f       	add	r25, r25
    167c:	82 2f       	mov	r24, r18
    167e:	87 70       	andi	r24, 0x07	; 7
    1680:	89 2b       	or	r24, r25
                redraw_partial(3);
    1682:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <frameSelection.lto_priv.66+0x1>
    1686:	09 c0       	rjmp	.+18     	; 0x169a <rs232_param_adjust_event_cb.lto_priv.34+0x1f2>
    1688:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <parameters>
                break;

            case BTN_OK:;
                int8_t ok = 0;
                /* Perform write */
                if (parameters.register_type == FLOAT_TYPE) {
    168c:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <parameters+0x1>
    1690:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <parameters+0x2>
                    float reg = atol(val);
    1694:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <parameters+0x3>
    1698:	57 d0       	rcall	.+174    	; 0x1748 <lcpy.3054.lto_priv.64>

                    union {
                        float f;
                        uint16_t r[2];
                    } fcast;
                    fcast.f = reg;
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	c4 d1       	rcall	.+904    	; 0x1a26 <redraw_partial.lto_priv.21>
    169e:	4a c0       	rjmp	.+148    	; 0x1734 <rs232_param_adjust_event_cb.lto_priv.34+0x28c>

                    modbus_poll_wr(parameters.register_addr, fcast.r[1], device_id);
    16a0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <parameters+0xb>
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	b1 f4       	brne	.+44     	; 0x16d4 <rs232_param_adjust_event_cb.lto_priv.34+0x22c>
    16a8:	80 e3       	ldi	r24, 0x30	; 48
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 ba 19 	call	0x3374	; 0x3374 <atol>
                    ok = modbus_poll_wr(parameters.register_addr + 1, fcast.r[0], device_id);
    16b0:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__floatsisf>
    16b4:	6b 01       	movw	r12, r22
    16b6:	7c 01       	movw	r14, r24
    16b8:	c0 91 4a 01 	lds	r28, 0x014A	; 0x80014a <device_id.3050>
                } else if (parameters.register_type == USHORT_TYPE) {
    16bc:	00 91 41 01 	lds	r16, 0x0141	; 0x800141 <parameters+0xa>
                    uint32_t reg = atol(val);
    16c0:	10 e0       	ldi	r17, 0x00	; 0
    16c2:	4c 2f       	mov	r20, r28
    16c4:	b7 01       	movw	r22, r14
                    if (reg > parameters.max_value) {
    16c6:	c8 01       	movw	r24, r16
    16c8:	7b d0       	rcall	.+246    	; 0x17c0 <modbus_poll_wr.lto_priv.63>
    16ca:	4c 2f       	mov	r20, r28
    16cc:	b6 01       	movw	r22, r12
    16ce:	c8 01       	movw	r24, r16
    16d0:	01 96       	adiw	r24, 0x01	; 1
                        reg = parameters.max_value;
                    }
                    ok = modbus_poll_wr(parameters.register_addr, reg, device_id);
    16d2:	22 c0       	rjmp	.+68     	; 0x1718 <rs232_param_adjust_event_cb.lto_priv.34+0x270>
    16d4:	81 11       	cpse	r24, r1
    16d6:	2e c0       	rjmp	.+92     	; 0x1734 <rs232_param_adjust_event_cb.lto_priv.34+0x28c>
    16d8:	80 e3       	ldi	r24, 0x30	; 48
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	0e 94 ba 19 	call	0x3374	; 0x3374 <atol>
    16e0:	00 91 3f 01 	lds	r16, 0x013F	; 0x80013f <parameters+0x8>
    16e4:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <parameters+0x9>
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	c0 91 4a 01 	lds	r28, 0x014A	; 0x80014a <device_id.3050>
    16f0:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <parameters+0xa>
                    if (parameters.register_addr == DOT_TIME_AVERAGE) {
    16f4:	06 17       	cp	r16, r22
                        ok = modbus_poll_wr(DOT_AVERAGE, 0x01, device_id);
    16f6:	17 07       	cpc	r17, r23
    16f8:	28 07       	cpc	r18, r24
    16fa:	39 07       	cpc	r19, r25
    16fc:	10 f4       	brcc	.+4      	; 0x1702 <rs232_param_adjust_event_cb.lto_priv.34+0x25a>
    16fe:	c9 01       	movw	r24, r18
    1700:	b8 01       	movw	r22, r16
    1702:	4c 2f       	mov	r20, r28
                    }
                }
                if (ok)
    1704:	8d 2f       	mov	r24, r29
    1706:	90 e0       	ldi	r25, 0x00	; 0
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    1708:	5b d0       	rcall	.+182    	; 0x17c0 <modbus_poll_wr.lto_priv.63>
    170a:	d6 31       	cpi	r29, 0x16	; 22
    170c:	31 f4       	brne	.+12     	; 0x171a <rs232_param_adjust_event_cb.lto_priv.34+0x272>
    170e:	4c 2f       	mov	r20, r28
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	70 e0       	ldi	r23, 0x00	; 0
    ApplicationEvents.TaskChanged = 1;
    1714:	85 e1       	ldi	r24, 0x15	; 21
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	53 d0       	rcall	.+166    	; 0x17c0 <modbus_poll_wr.lto_priv.63>
    171a:	88 23       	and	r24, r24
    171c:	59 f0       	breq	.+22     	; 0x1734 <rs232_param_adjust_event_cb.lto_priv.34+0x28c>
                }
                if (ok)
                    schedule_task(&rs232_task);
                break;
        }
        ApplicationEvents.LongKeyPressed = 0;
    171e:	88 ec       	ldi	r24, 0xC8	; 200
    1720:	92 e0       	ldi	r25, 0x02	; 2
    1722:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <current_task.lto_priv.44+0x1>
    1726:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <current_task.lto_priv.44>
    }
}
    172a:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    172e:	84 60       	ori	r24, 0x04	; 4
    1730:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    1734:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1738:	8d 7f       	andi	r24, 0xFD	; 253
    173a:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	e8 e0       	ldi	r30, 0x08	; 8
    1744:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__epilogue_restores__+0x14>

00001748 <lcpy.3054.lto_priv.64>:
    static enum menuSelector menu_selector;
    static uint8_t device_id;
    static uint8_t edit_mode = 0;
    static char val[7];

    void lcpy(int32_t num) {
    1748:	aa e0       	ldi	r26, 0x0A	; 10
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	ea ea       	ldi	r30, 0xAA	; 170
    174e:	fb e0       	ldi	r31, 0x0B	; 11
    1750:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__prologue_saves__+0x14>
    1754:	6b 01       	movw	r12, r22
    1756:	7c 01       	movw	r14, r24
        strcpy_P(val, PSTR("000000"));
    1758:	6e e3       	ldi	r22, 0x3E	; 62
    175a:	71 e0       	ldi	r23, 0x01	; 1
    175c:	80 e3       	ldi	r24, 0x30	; 48
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strcpy_P>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    1764:	2a e0       	ldi	r18, 0x0A	; 10
    1766:	8e 01       	movw	r16, r28
    1768:	0f 5f       	subi	r16, 0xFF	; 255
    176a:	1f 4f       	sbci	r17, 0xFF	; 255
    176c:	a8 01       	movw	r20, r16
    176e:	c7 01       	movw	r24, r14
    1770:	b6 01       	movw	r22, r12
    1772:	0e 94 18 1a 	call	0x3430	; 0x3430 <__ultoa_ncheck>
        char tmp[10];
        ultoa(num, tmp, 10);
        int len = strlen(tmp);
    1776:	f8 01       	movw	r30, r16
    1778:	01 90       	ld	r0, Z+
    177a:	00 20       	and	r0, r0
    177c:	e9 f7       	brne	.-6      	; 0x1778 <lcpy.3054.lto_priv.64+0x30>
    177e:	31 97       	sbiw	r30, 0x01	; 1
    1780:	cf 01       	movw	r24, r30
    1782:	80 1b       	sub	r24, r16
    1784:	91 0b       	sbc	r25, r17
    1786:	f8 01       	movw	r30, r16
    1788:	e8 0f       	add	r30, r24
    178a:	f9 1f       	adc	r31, r25
    178c:	a6 e3       	ldi	r26, 0x36	; 54
    178e:	b1 e0       	ldi	r27, 0x01	; 1
        for (int i = 1; i <= len; i++) {
    1790:	21 e0       	ldi	r18, 0x01	; 1
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	31 97       	sbiw	r30, 0x01	; 1
    1796:	82 17       	cp	r24, r18
    1798:	93 07       	cpc	r25, r19
    179a:	2c f0       	brlt	.+10     	; 0x17a6 <lcpy.3054.lto_priv.64+0x5e>
            val[6 - i] = tmp[len - i];
    179c:	40 81       	ld	r20, Z
    179e:	4e 93       	st	-X, r20
    void lcpy(int32_t num) {
        strcpy_P(val, PSTR("000000"));
        char tmp[10];
        ultoa(num, tmp, 10);
        int len = strlen(tmp);
        for (int i = 1; i <= len; i++) {
    17a0:	2f 5f       	subi	r18, 0xFF	; 255
    17a2:	3f 4f       	sbci	r19, 0xFF	; 255
    17a4:	f7 cf       	rjmp	.-18     	; 0x1794 <lcpy.3054.lto_priv.64+0x4c>
            val[6 - i] = tmp[len - i];
        }
        memcpy(&framebuffer[3][pofs], val, 6);
    17a6:	86 e0       	ldi	r24, 0x06	; 6
    17a8:	e0 e3       	ldi	r30, 0x30	; 48
    17aa:	f1 e0       	ldi	r31, 0x01	; 1
    17ac:	a5 ee       	ldi	r26, 0xE5	; 229
    17ae:	b1 e0       	ldi	r27, 0x01	; 1
    17b0:	01 90       	ld	r0, Z+
    17b2:	0d 92       	st	X+, r0
    17b4:	8a 95       	dec	r24
    17b6:	e1 f7       	brne	.-8      	; 0x17b0 <lcpy.3054.lto_priv.64+0x68>
    }
    17b8:	2a 96       	adiw	r28, 0x0a	; 10
    17ba:	e8 e0       	ldi	r30, 0x08	; 8
    17bc:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__epilogue_restores__+0x14>

000017c0 <modbus_poll_wr.lto_priv.63>:
 * @param reg register value
 * @param id client ID
 * @return 0 - busy,
 *         1 - packet OK
 */
static int8_t modbus_poll_wr(uint16_t address, uint16_t reg, uint8_t id) {
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	14 2f       	mov	r17, r20

void ServerWriteSingleRegister(uint16_t adress, uint16_t reg, uint8_t id) {
    WRITE_SINGLE_REGISTER_REQ *req;

    req = (WRITE_SINGLE_REGISTER_REQ *) (&DataBuffer0[1]);
    req->function_code = MOD_SERV_WRITE_SINGLE_REGISTER;
    17c8:	26 e0       	ldi	r18, 0x06	; 6
    17ca:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <DataBuffer0+0x1>
    req->st_adr_hi = (uint8_t) (adress >> 8);
    17ce:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <DataBuffer0+0x2>
    req->st_adr_lo = (uint8_t) adress;
    17d2:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <DataBuffer0+0x3>
    req->value_hi = (uint8_t) (reg >> 8);
    17d6:	70 93 53 02 	sts	0x0253, r23	; 0x800253 <DataBuffer0+0x4>
    req->value_lo = (uint8_t) reg;
    17da:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <DataBuffer0+0x5>

    MBSerialSend(sizeof (WRITE_SINGLE_REGISTER_REQ), id);
    17de:	84 2f       	mov	r24, r20
    17e0:	fc d5       	rcall	.+3064   	; 0x23da <MBSerialSend.constprop.14>
    17e2:	c0 e0       	ldi	r28, 0x00	; 0
    17e4:	d0 e0       	ldi	r29, 0x00	; 0
    return DataBuffer0[0];
}

uint8_t modbus_write_ok(uint8_t id) {
    uint16_t TrustSize = 8;
    return modbus_ok(TrustSize, id);
    17e6:	61 2f       	mov	r22, r17
    17e8:	88 e0       	ldi	r24, 0x08	; 8
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	79 d7       	rcall	.+3826   	; 0x26e0 <modbus_ok.lto_priv.75>
    17ee:	21 96       	adiw	r28, 0x01	; 1
    ServerWriteSingleRegister(address, reg, id);
    uint32_t ctr = 0;
    uint8_t ok = 0;
    while (!ok) {
    17f0:	81 11       	cpse	r24, r1
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <modbus_poll_wr.lto_priv.63+0x3e>
        if (ctr++ >= F_CPU / 512) {
    17f4:	c0 38       	cpi	r28, 0x80	; 128
    17f6:	80 e7       	ldi	r24, 0x70	; 112
    17f8:	d8 07       	cpc	r29, r24
    17fa:	a9 f7       	brne	.-22     	; 0x17e6 <modbus_poll_wr.lto_priv.63+0x26>
            ctr = 0;
            return -1;
    17fc:	8f ef       	ldi	r24, 0xFF	; 255
        }
        ok = modbus_write_ok(id);
    }
    return ok;
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	08 95       	ret

00001806 <modbus_poll_r.lto_priv.55>:
 * @param count registers count
 * @param id client ID
 * @return 0 - busy,
 *         1 - packet OK
 */
static uint8_t modbus_poll_r(uint8_t addr, uint8_t count, uint8_t id) {
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	18 2f       	mov	r17, r24
    180e:	c6 2f       	mov	r28, r22
    1810:	d4 2f       	mov	r29, r20
    if (timer0_expired())
    1812:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <timer0_expired>
    1816:	88 23       	and	r24, r24
    1818:	69 f0       	breq	.+26     	; 0x1834 <modbus_poll_r.lto_priv.55+0x2e>

void ServerReadInputRegister(uint16_t adress, uint8_t count, uint8_t id) {
    READ_INPUT_REGS_REQ *req;

    req = (READ_INPUT_REGS_REQ *) (&DataBuffer0[1]);
    req->function_code = MOD_SERV_READ_INPUT_REGISTER;
    181a:	84 e0       	ldi	r24, 0x04	; 4
    181c:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <DataBuffer0+0x1>
    req->st_adr_hi = (uint8_t) (adress >> 8);
    1820:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <DataBuffer0+0x2>
    req->st_adr_lo = (uint8_t) adress;
    1824:	10 93 52 02 	sts	0x0252, r17	; 0x800252 <DataBuffer0+0x3>
    req->quantity_hi = 0;
    1828:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <DataBuffer0+0x4>
    req->quantity_lo = count;
    182c:	c0 93 54 02 	sts	0x0254, r28	; 0x800254 <DataBuffer0+0x5>
    //uint16_t TrustSize = 2 + 3 + count * 2;

    MBSerialSend(sizeof (READ_INPUT_REGS_REQ), id);
    1830:	8d 2f       	mov	r24, r29
    1832:	d3 d5       	rcall	.+2982   	; 0x23da <MBSerialSend.constprop.14>
    return modbus_ok(TrustSize, id);
}

uint8_t modbus_read_ok(uint16_t count, uint8_t id) {
    uint16_t TrustSize = 2 + 3 + count * 2;
    return modbus_ok(TrustSize, id);
    1834:	8c 2f       	mov	r24, r28
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	6d 2f       	mov	r22, r29
    183e:	05 96       	adiw	r24, 0x05	; 5
    1840:	4f d7       	rcall	.+3742   	; 0x26e0 <modbus_ok.lto_priv.75>
        ServerReadInputRegister(addr, count, id);
    return modbus_read_ok(count, id);
}
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	08 95       	ret

0000184a <menu_row_highlight.lto_priv.59>:
 * Highlight complete row
 * @param row
 */
static void menu_row_highlight(uint8_t row) {
    frameSelection.row = row;
    frameSelection.sel_start = 0;
    184a:	8f 73       	andi	r24, 0x3F	; 63
    184c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    frameSelection.sel_end = FRAME_LENGTH;
    1850:	80 eb       	ldi	r24, 0xB0	; 176
    1852:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <frameSelection.lto_priv.66+0x1>
    1856:	08 95       	ret

00001858 <load_frame.lto_priv.57>:
}

/**
 * Load frame associated w/ current task
 */
static void load_frame() {
    1858:	ef 92       	push	r14
    185a:	ff 92       	push	r15
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	0c e9       	ldi	r16, 0x9C	; 156
    1866:	11 e0       	ldi	r17, 0x01	; 1
    1868:	8c e4       	ldi	r24, 0x4C	; 76
    186a:	92 e0       	ldi	r25, 0x02	; 2
    186c:	f8 01       	movw	r30, r16
}

static void fb_clear() {
    char *c = framebuffer[0];
    while (c <= &framebuffer[7][21])
        *(c++) = ' ';
    186e:	20 e2       	ldi	r18, 0x20	; 32
    1870:	21 93       	st	Z+, r18
    frameSelection.row = -1;
}

static void fb_clear() {
    char *c = framebuffer[0];
    while (c <= &framebuffer[7][21])
    1872:	8e 17       	cp	r24, r30
    1874:	9f 07       	cpc	r25, r31
    1876:	d9 f7       	brne	.-10     	; 0x186e <load_frame.lto_priv.57+0x16>
/**
 * Load frame associated w/ current task
 */
static void load_frame() {
    fb_clear();
    struct frame_t *fs = (struct frame_t *) current_task->container;
    1878:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <current_task.lto_priv.44>
    187c:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <current_task.lto_priv.44+0x1>
    1880:	e4 80       	ldd	r14, Z+4	; 0x04
    1882:	f5 80       	ldd	r15, Z+5	; 0x05
    1884:	c0 e0       	ldi	r28, 0x00	; 0
    1886:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
        strcpy_P(framebuffer[i], (PGM_P) pgm_read_word(&(fs->frame_ptr[i])));
    1888:	d7 01       	movw	r26, r14
    188a:	ed 91       	ld	r30, X+
    188c:	fc 91       	ld	r31, X
    188e:	ec 0f       	add	r30, r28
    1890:	fd 1f       	adc	r31, r29
    1892:	65 91       	lpm	r22, Z+
    1894:	74 91       	lpm	r23, Z
    1896:	c8 01       	movw	r24, r16
    1898:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strcpy_P>
    189c:	22 96       	adiw	r28, 0x02	; 2
    189e:	0a 5e       	subi	r16, 0xEA	; 234
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
 * Load frame associated w/ current task
 */
static void load_frame() {
    fb_clear();
    struct frame_t *fs = (struct frame_t *) current_task->container;
    for (uint8_t i = 0; i < 8; i++)
    18a2:	c0 31       	cpi	r28, 0x10	; 16
    18a4:	d1 05       	cpc	r29, r1
    18a6:	81 f7       	brne	.-32     	; 0x1888 <load_frame.lto_priv.57+0x30>
        strcpy_P(framebuffer[i], (PGM_P) pgm_read_word(&(fs->frame_ptr[i])));
}
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	e6 e0       	ldi	r30, 0x06	; 6
    18ae:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__epilogue_restores__+0x18>

000018b2 <fb_clear_line.lto_priv.22>:
    char *c = framebuffer[0];
    while (c <= &framebuffer[7][21])
        *(c++) = ' ';
}

static void fb_clear_line(uint8_t l) {
    18b2:	96 e1       	ldi	r25, 0x16	; 22
    18b4:	89 9f       	mul	r24, r25
    18b6:	a0 01       	movw	r20, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    for (uint8_t i = 0; i < FRAME_LENGTH; i++)
        framebuffer[l][i] = ' ';
    18be:	f9 01       	movw	r30, r18
    18c0:	e4 0f       	add	r30, r20
    18c2:	f5 1f       	adc	r31, r21
    18c4:	e4 56       	subi	r30, 0x64	; 100
    18c6:	fe 4f       	sbci	r31, 0xFE	; 254
    18c8:	90 e2       	ldi	r25, 0x20	; 32
    18ca:	90 83       	st	Z, r25
    18cc:	2f 5f       	subi	r18, 0xFF	; 255
    18ce:	3f 4f       	sbci	r19, 0xFF	; 255
    while (c <= &framebuffer[7][21])
        *(c++) = ' ';
}

static void fb_clear_line(uint8_t l) {
    for (uint8_t i = 0; i < FRAME_LENGTH; i++)
    18d0:	26 31       	cpi	r18, 0x16	; 22
    18d2:	31 05       	cpc	r19, r1
    18d4:	a1 f7       	brne	.-24     	; 0x18be <fb_clear_line.lto_priv.22+0xc>
        framebuffer[l][i] = ' ';
}
    18d6:	08 95       	ret

000018d8 <fb_put_str.lto_priv.20>:

/**
 * @param row framebuffer row (0..7)
 * @param str PGM_P string
 */
static void fb_put_str(uint8_t row, PGM_P str) {
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	c8 2f       	mov	r28, r24
    fb_clear_line(row);
    18e0:	8b 01       	movw	r16, r22
    18e2:	e7 df       	rcall	.-50     	; 0x18b2 <fb_clear_line.lto_priv.22>
    18e4:	c8 01       	movw	r24, r16
    18e6:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__strlen_P>
    memcpy_P(framebuffer[row], str, strlen_P(str));
    18ea:	46 e1       	ldi	r20, 0x16	; 22
    18ec:	c4 9f       	mul	r28, r20
    18ee:	90 01       	movw	r18, r0
    18f0:	11 24       	eor	r1, r1
    18f2:	ac 01       	movw	r20, r24
    18f4:	b8 01       	movw	r22, r16
    18f6:	c9 01       	movw	r24, r18
    18f8:	84 56       	subi	r24, 0x64	; 100
    18fa:	9e 4f       	sbci	r25, 0xFE	; 254
    18fc:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <memcpy_P>
}
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	08 95       	ret

00001908 <fb_put_tag_str.lto_priv.61>:
/**
 * @param row framebuffer row (0..7)
 * @param str PGM_P string (left-aligned)
 * @param tag text tag (right-aligned)
 */
static void fb_put_tag_str(uint8_t row, PGM_P str, PGM_P tag) {
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	c8 2f       	mov	r28, r24
    1916:	7b 01       	movw	r14, r22
    fb_clear_line(row);
    1918:	8a 01       	movw	r16, r20
    191a:	cb df       	rcall	.-106    	; 0x18b2 <fb_clear_line.lto_priv.22>
    strcpy_P(framebuffer[row], str);
    191c:	86 e1       	ldi	r24, 0x16	; 22
    191e:	c8 9f       	mul	r28, r24
    1920:	e0 01       	movw	r28, r0
    1922:	11 24       	eor	r1, r1
    1924:	b7 01       	movw	r22, r14
    1926:	ce 01       	movw	r24, r28
    1928:	84 56       	subi	r24, 0x64	; 100
    192a:	9e 4f       	sbci	r25, 0xFE	; 254
    192c:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strcpy_P>
    1930:	c8 01       	movw	r24, r16
    1932:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__strlen_P>
    /*@note: strcpy would copy additional character */
    memcpy_P(&framebuffer[row][FRAME_LENGTH - strlen_P(tag)], tag, strlen_P(tag));
    1936:	c8 1b       	sub	r28, r24
    1938:	d9 0b       	sbc	r29, r25
    193a:	ac 01       	movw	r20, r24
    193c:	b8 01       	movw	r22, r16
    193e:	ce 01       	movw	r24, r28
    1940:	8e 54       	subi	r24, 0x4E	; 78
    1942:	9e 4f       	sbci	r25, 0xFE	; 254
    1944:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <memcpy_P>
}
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	e6 e0       	ldi	r30, 0x06	; 6
    194e:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__epilogue_restores__+0x18>

00001952 <fb_put_tag.lto_priv.62>:
        c[ofs++] = '0';
    itoa(i, &c[ofs], 10);
    memcpy(&framebuffer[row][col], c, strlen(c));
}

static void fb_put_tag(uint8_t row, PGM_P tag, uint32_t value) {
    1952:	ab e0       	ldi	r26, 0x0B	; 11
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef ea       	ldi	r30, 0xAF	; 175
    1958:	fc e0       	ldi	r31, 0x0C	; 12
    195a:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__prologue_saves__+0x14>
    195e:	08 2f       	mov	r16, r24
    1960:	6b 01       	movw	r12, r22
    1962:	ca 01       	movw	r24, r20
    1964:	b9 01       	movw	r22, r18
    1966:	2a e0       	ldi	r18, 0x0A	; 10
    1968:	ae 01       	movw	r20, r28
    196a:	4f 5f       	subi	r20, 0xFF	; 255
    196c:	5f 4f       	sbci	r21, 0xFF	; 255
    196e:	7a 01       	movw	r14, r20
    1970:	0e 94 18 1a 	call	0x3430	; 0x3430 <__ultoa_ncheck>
    char v[11];
    ultoa(value, v, 10);
    fb_clear_line(row);
    1974:	80 2f       	mov	r24, r16
    1976:	9d df       	rcall	.-198    	; 0x18b2 <fb_clear_line.lto_priv.22>
    strcpy_P(framebuffer[row], tag);
    1978:	56 e1       	ldi	r21, 0x16	; 22
    197a:	05 9f       	mul	r16, r21
    197c:	80 01       	movw	r16, r0
    197e:	11 24       	eor	r1, r1
    1980:	b6 01       	movw	r22, r12
    1982:	c8 01       	movw	r24, r16
    1984:	84 56       	subi	r24, 0x64	; 100
    1986:	9e 4f       	sbci	r25, 0xFE	; 254
    1988:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strcpy_P>
    memcpy(&framebuffer[row][FRAME_LENGTH - strlen(v)], v, strlen(v));
    198c:	f7 01       	movw	r30, r14
    198e:	01 90       	ld	r0, Z+
    1990:	00 20       	and	r0, r0
    1992:	e9 f7       	brne	.-6      	; 0x198e <fb_put_tag.lto_priv.62+0x3c>
    1994:	31 97       	sbiw	r30, 0x01	; 1
    1996:	af 01       	movw	r20, r30
    1998:	4e 19       	sub	r20, r14
    199a:	5f 09       	sbc	r21, r15
    199c:	c8 01       	movw	r24, r16
    199e:	84 1b       	sub	r24, r20
    19a0:	95 0b       	sbc	r25, r21
    19a2:	b7 01       	movw	r22, r14
    19a4:	8e 54       	subi	r24, 0x4E	; 78
    19a6:	9e 4f       	sbci	r25, 0xFE	; 254
    19a8:	0e 94 5f 1c 	call	0x38be	; 0x38be <memcpy>
}
    19ac:	2b 96       	adiw	r28, 0x0b	; 11
    19ae:	e8 e0       	ldi	r30, 0x08	; 8
    19b0:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__epilogue_restores__+0x14>

000019b4 <print_ushort_register.lto_priv.60>:
        fb_put_tag(pos, str, a);
    }
    return got_val;
}

static uint8_t print_ushort_register(uint8_t reg, uint8_t pos, uint8_t device_id, PGM_P str) {
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    uint8_t got_val = modbus_poll_r(reg, 1, device_id);
    19bc:	d6 2f       	mov	r29, r22
    19be:	89 01       	movw	r16, r18
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    if (got_val && pos > 0 && pos < 8) {
    19c2:	21 df       	rcall	.-446    	; 0x1806 <modbus_poll_r.lto_priv.55>
    19c4:	c8 2f       	mov	r28, r24
    19c6:	88 23       	and	r24, r24
    19c8:	59 f0       	breq	.+22     	; 0x19e0 <print_ushort_register.lto_priv.60+0x2c>
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
        unsigned short us = GetInpRegsUSHORT(0);
    19cc:	8d 0f       	add	r24, r29
    19ce:	87 30       	cpi	r24, 0x07	; 7
        fb_put_tag(pos, str, us);
    19d0:	38 f4       	brcc	.+14     	; 0x19e0 <print_ushort_register.lto_priv.60+0x2c>
    19d2:	5c d5       	rcall	.+2744   	; 0x248c <GetInpRegsUSHORT.constprop.10>
    19d4:	9c 01       	movw	r18, r24
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	b8 01       	movw	r22, r16
    19dc:	8d 2f       	mov	r24, r29
    }
    return got_val;
}
    19de:	b9 df       	rcall	.-142    	; 0x1952 <fb_put_tag.lto_priv.62>
    19e0:	8c 2f       	mov	r24, r28
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
        ok = modbus_write_ok(id);
    }
    return ok;
}

static uint8_t print_float_register(uint8_t reg, uint8_t pos, uint8_t device_id, PGM_P str) {
    19e8:	0f 91       	pop	r16
    19ea:	08 95       	ret

000019ec <print_float_register>:
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    uint8_t got_val = modbus_poll_r(reg, 2, device_id);
    19f2:	df 93       	push	r29
    19f4:	d6 2f       	mov	r29, r22
    19f6:	89 01       	movw	r16, r18
    19f8:	62 e0       	ldi	r22, 0x02	; 2
    if (got_val && pos > 0 && pos < 8) {
    19fa:	05 df       	rcall	.-502    	; 0x1806 <modbus_poll_r.lto_priv.55>
    19fc:	c8 2f       	mov	r28, r24
    19fe:	88 23       	and	r24, r24
    1a00:	61 f0       	breq	.+24     	; 0x1a1a <print_float_register+0x2e>
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
        float f = GetInpRegsFLOAT(0);
    1a04:	8d 0f       	add	r24, r29
    1a06:	87 30       	cpi	r24, 0x07	; 7
        long unsigned int a = f;
        fb_put_tag(pos, str, a);
    1a08:	40 f4       	brcc	.+16     	; 0x1a1a <print_float_register+0x2e>
    1a0a:	56 d5       	rcall	.+2732   	; 0x24b8 <GetInpRegsFLOAT.constprop.8>
    1a0c:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fixunssfsi>
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	b8 01       	movw	r22, r16
    1a16:	8d 2f       	mov	r24, r29
    }
    return got_val;
}
    1a18:	9c df       	rcall	.-200    	; 0x1952 <fb_put_tag.lto_priv.62>
    1a1a:	8c 2f       	mov	r24, r28
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16

/**
 * Redraw a single line from framebuffer and apply selection.
 * @param row index in framebuffer
 */
static void redraw_partial(uint8_t row) {
    1a24:	08 95       	ret

00001a26 <redraw_partial.lto_priv.21>:
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    /* quick workaround to display external power */
    framebuffer[0][1] = (ApplicationFlags.ExternalVoltage) ? EXT_PWR_CHAR : ' ';
    1a2c:	df 93       	push	r29
    1a2e:	c8 2f       	mov	r28, r24
    1a30:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <ApplicationFlags>
    1a34:	80 fd       	sbrc	r24, 0
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <redraw_partial.lto_priv.21+0x16>
    1a38:	80 e2       	ldi	r24, 0x20	; 32
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <redraw_partial.lto_priv.21+0x18>
    1a3c:	84 e2       	ldi	r24, 0x24	; 36

    LCD_goto(row, 0);
    1a3e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <framebuffer.lto_priv.43+0x1>
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	8c 2f       	mov	r24, r28
    if (frameSelection.row == row) {
    1a46:	73 d7       	rcall	.+3814   	; 0x292e <LCD_goto>
    1a48:	00 91 45 01 	lds	r16, 0x0145	; 0x800145 <frameSelection.lto_priv.66>
    1a4c:	00 0f       	add	r16, r16
    1a4e:	00 0f       	add	r16, r16
    1a50:	05 95       	asr	r16
    1a52:	05 95       	asr	r16
    1a54:	00 2e       	mov	r0, r16
    1a56:	00 0c       	add	r0, r0
    1a58:	11 0b       	sbc	r17, r17
    1a5a:	8c 2f       	mov	r24, r28
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	08 17       	cp	r16, r24
    1a60:	19 07       	cpc	r17, r25
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <redraw_partial.lto_priv.21+0x40>
    1a64:	52 c0       	rjmp	.+164    	; 0x1b0a <redraw_partial.lto_priv.21+0xe4>
        register uint8_t j = 0;
        while (j < frameSelection.sel_start)
    1a66:	c0 e0       	ldi	r28, 0x00	; 0
    1a68:	2c 2f       	mov	r18, r28
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <frameSelection.lto_priv.66>
    1a70:	98 2f       	mov	r25, r24
    1a72:	92 95       	swap	r25
    1a74:	96 95       	lsr	r25
    1a76:	96 95       	lsr	r25
    1a78:	93 70       	andi	r25, 0x03	; 3
    1a7a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <frameSelection.lto_priv.66+0x1>
    1a7e:	87 70       	andi	r24, 0x07	; 7
    1a80:	88 0f       	add	r24, r24
    1a82:	88 0f       	add	r24, r24
    1a84:	89 2b       	or	r24, r25
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	28 17       	cp	r18, r24
            LCD_putchar(framebuffer[row][j++], 0);
    1a8a:	39 07       	cpc	r19, r25
    1a8c:	84 f4       	brge	.+32     	; 0x1aae <redraw_partial.lto_priv.21+0x88>
    1a8e:	cf 5f       	subi	r28, 0xFF	; 255
    1a90:	46 e1       	ldi	r20, 0x16	; 22
    1a92:	40 9f       	mul	r20, r16
    1a94:	c0 01       	movw	r24, r0
    1a96:	41 9f       	mul	r20, r17
    1a98:	90 0d       	add	r25, r0
    1a9a:	11 24       	eor	r1, r1
    1a9c:	84 56       	subi	r24, 0x64	; 100
    1a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	e2 0f       	add	r30, r18
    1aa4:	f3 1f       	adc	r31, r19
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z

        while (j < frameSelection.sel_end)
    1aaa:	06 d7       	rcall	.+3596   	; 0x28b8 <LCD_putchar>
    1aac:	dd cf       	rjmp	.-70     	; 0x1a68 <redraw_partial.lto_priv.21+0x42>
    1aae:	2c 2f       	mov	r18, r28
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <frameSelection.lto_priv.66+0x1>
    1ab6:	86 95       	lsr	r24
    1ab8:	86 95       	lsr	r24
    1aba:	86 95       	lsr	r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
            LCD_putchar(framebuffer[row][j++], 1);
    1abe:	28 17       	cp	r18, r24
    1ac0:	39 07       	cpc	r19, r25
    1ac2:	84 f4       	brge	.+32     	; 0x1ae4 <redraw_partial.lto_priv.21+0xbe>
    1ac4:	cf 5f       	subi	r28, 0xFF	; 255
    1ac6:	46 e1       	ldi	r20, 0x16	; 22
    1ac8:	40 9f       	mul	r20, r16
    1aca:	c0 01       	movw	r24, r0
    1acc:	41 9f       	mul	r20, r17
    1ace:	90 0d       	add	r25, r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	84 56       	subi	r24, 0x64	; 100
    1ad4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	e2 0f       	add	r30, r18
    1ada:	f3 1f       	adc	r31, r19
    1adc:	61 e0       	ldi	r22, 0x01	; 1

        while (j < FRAME_LENGTH)
    1ade:	80 81       	ld	r24, Z
            LCD_putchar(framebuffer[row][j++], 0);
    1ae0:	eb d6       	rcall	.+3542   	; 0x28b8 <LCD_putchar>
    1ae2:	e5 cf       	rjmp	.-54     	; 0x1aae <redraw_partial.lto_priv.21+0x88>
    1ae4:	c6 31       	cpi	r28, 0x16	; 22
    1ae6:	18 f5       	brcc	.+70     	; 0x1b2e <redraw_partial.lto_priv.21+0x108>
    1ae8:	d1 e0       	ldi	r29, 0x01	; 1
    1aea:	dc 0f       	add	r29, r28
    1aec:	86 e1       	ldi	r24, 0x16	; 22
    1aee:	80 9f       	mul	r24, r16
    1af0:	f0 01       	movw	r30, r0
    1af2:	81 9f       	mul	r24, r17
    1af4:	f0 0d       	add	r31, r0
    1af6:	11 24       	eor	r1, r1
    1af8:	e4 56       	subi	r30, 0x64	; 100
    1afa:	fe 4f       	sbci	r31, 0xFE	; 254
    1afc:	ec 0f       	add	r30, r28
    1afe:	f1 1d       	adc	r31, r1
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	d9 d6       	rcall	.+3506   	; 0x28b8 <LCD_putchar>
    1b06:	cd 2f       	mov	r28, r29
    1b08:	ed cf       	rjmp	.-38     	; 0x1ae4 <redraw_partial.lto_priv.21+0xbe>
static void redraw_partial(uint8_t row) {
    /* quick workaround to display external power */
    framebuffer[0][1] = (ApplicationFlags.ExternalVoltage) ? EXT_PWR_CHAR : ' ';

    LCD_goto(row, 0);
    if (frameSelection.row == row) {
    1b0a:	86 e1       	ldi	r24, 0x16	; 22
    1b0c:	c8 9f       	mul	r28, r24

        while (j < FRAME_LENGTH)
            LCD_putchar(framebuffer[row][j++], 0);
    } else {
        for (uint8_t j = 0; j < FRAME_LENGTH; j++)
            LCD_putchar(framebuffer[row][j], 0);
    1b0e:	80 01       	movw	r16, r0
    1b10:	11 24       	eor	r1, r1
    1b12:	c0 e0       	ldi	r28, 0x00	; 0
    1b14:	d0 e0       	ldi	r29, 0x00	; 0
    1b16:	fe 01       	movw	r30, r28
    1b18:	e0 0f       	add	r30, r16
    1b1a:	f1 1f       	adc	r31, r17
    1b1c:	e4 56       	subi	r30, 0x64	; 100
    1b1e:	fe 4f       	sbci	r31, 0xFE	; 254
            LCD_putchar(framebuffer[row][j++], 1);

        while (j < FRAME_LENGTH)
            LCD_putchar(framebuffer[row][j++], 0);
    } else {
        for (uint8_t j = 0; j < FRAME_LENGTH; j++)
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	c9 d6       	rcall	.+3474   	; 0x28b8 <LCD_putchar>
            LCD_putchar(framebuffer[row][j], 0);
    }
}
    1b26:	21 96       	adiw	r28, 0x01	; 1
    1b28:	c6 31       	cpi	r28, 0x16	; 22
    1b2a:	d1 05       	cpc	r29, r1
    1b2c:	a1 f7       	brne	.-24     	; 0x1b16 <redraw_partial.lto_priv.21+0xf0>
    1b2e:	df 91       	pop	r29

/**
 * Redraw screen from framebuffer and apply menu selection.
 * Clears frameSelection.
 */
static void redraw() {
    1b30:	cf 91       	pop	r28
    for (uint8_t i = 0; i < 8; i++)
    1b32:	1f 91       	pop	r17
        redraw_partial(i);
    1b34:	0f 91       	pop	r16
    1b36:	08 95       	ret

00001b38 <redraw.lto_priv.56>:
    1b38:	cf 93       	push	r28
/**
 * Redraw screen from framebuffer and apply menu selection.
 * Clears frameSelection.
 */
static void redraw() {
    for (uint8_t i = 0; i < 8; i++)
    1b3a:	c0 e0       	ldi	r28, 0x00	; 0
    1b3c:	8c 2f       	mov	r24, r28
        redraw_partial(i);
    frameSelection.row = -1;
    1b3e:	73 df       	rcall	.-282    	; 0x1a26 <redraw_partial.lto_priv.21>
    1b40:	cf 5f       	subi	r28, 0xFF	; 255
    1b42:	c8 30       	cpi	r28, 0x08	; 8
}
    1b44:	d9 f7       	brne	.-10     	; 0x1b3c <redraw.lto_priv.56+0x4>
    1b46:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <frameSelection.lto_priv.66>
        }
        ApplicationEvents.LongKeyPressed = 0;
    }
}

static void rs232_id_select_event_cb(task_t * evt) {
    1b4a:	8f 63       	ori	r24, 0x3F	; 63
    };

    static enum menuSelector menu_selector;
    static uint8_t id;

    if (ApplicationEvents.TaskChanged) {
    1b4c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    1b50:	cf 91       	pop	r28
        id = evt->id;
    1b52:	08 95       	ret

00001b54 <rs232_id_select_event_cb.lto_priv.32>:
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29

        menu_selector = 0;
    1b58:	ec 01       	movw	r28, r24
    1b5a:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
        load_frame();
    1b5e:	82 ff       	sbrs	r24, 2
        fb_put_u8(id, 3, 10);
    1b60:	15 c0       	rjmp	.+42     	; 0x1b8c <rs232_id_select_event_cb.lto_priv.32+0x38>
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <id.3028>
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1b68:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <menu_selector.3027>
    1b6c:	75 de       	rcall	.-790    	; 0x1858 <load_frame.lto_priv.57>
    frameSelection.sel_end = sel_end;
    1b6e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <id.3028>
    1b72:	bf d4       	rcall	.+2430   	; 0x24f2 <fb_put_u8.constprop.4>

        menu_selector = 0;
        load_frame();
        fb_put_u8(id, 3, 10);
        menu_item_highlight(3, 3, 6);
        redraw();
    1b74:	83 ec       	ldi	r24, 0xC3	; 195
    1b76:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>

        ApplicationEvents.TaskChanged = 0;
    1b7a:	80 e3       	ldi	r24, 0x30	; 48
    1b7c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <frameSelection.lto_priv.66+0x1>
    1b80:	db df       	rcall	.-74     	; 0x1b38 <redraw.lto_priv.56>
    }

    if (ApplicationEvents.ShortKeyPressed) {
    1b82:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1b86:	8b 7f       	andi	r24, 0xFB	; 251
    1b88:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
        if (++menu_selector > 3)
    1b8c:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1b90:	80 ff       	sbrs	r24, 0
    1b92:	2d c0       	rjmp	.+90     	; 0x1bee <rs232_id_select_event_cb.lto_priv.32+0x9a>
    1b94:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <menu_selector.3027>
            menu_selector = 0;
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <menu_selector.3027>

        switch (menu_selector) {
    1b9e:	84 30       	cpi	r24, 0x04	; 4
    1ba0:	10 f0       	brcs	.+4      	; 0x1ba6 <rs232_id_select_event_cb.lto_priv.32+0x52>
    1ba2:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <menu_selector.3027>
    1ba6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <menu_selector.3027>
    1baa:	81 30       	cpi	r24, 0x01	; 1
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1bac:	79 f0       	breq	.+30     	; 0x1bcc <rs232_id_select_event_cb.lto_priv.32+0x78>
    1bae:	48 f0       	brcs	.+18     	; 0x1bc2 <rs232_id_select_event_cb.lto_priv.32+0x6e>
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    frameSelection.sel_end = sel_end;
    1bb2:	89 f0       	breq	.+34     	; 0x1bd6 <rs232_id_select_event_cb.lto_priv.32+0x82>
    1bb4:	83 30       	cpi	r24, 0x03	; 3
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1bb6:	a9 f4       	brne	.+42     	; 0x1be2 <rs232_id_select_event_cb.lto_priv.32+0x8e>
    1bb8:	87 e4       	ldi	r24, 0x47	; 71
    1bba:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    frameSelection.sel_end = sel_end;
    1bbe:	8c ea       	ldi	r24, 0xAC	; 172
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1bc0:	0e c0       	rjmp	.+28     	; 0x1bde <rs232_id_select_event_cb.lto_priv.32+0x8a>
    1bc2:	83 ec       	ldi	r24, 0xC3	; 195
    1bc4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    frameSelection.sel_end = sel_end;
    1bc8:	80 e3       	ldi	r24, 0x30	; 48
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1bca:	09 c0       	rjmp	.+18     	; 0x1bde <rs232_id_select_event_cb.lto_priv.32+0x8a>
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    frameSelection.sel_end = sel_end;
    1bd2:	8c e9       	ldi	r24, 0x9C	; 156
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <rs232_id_select_event_cb.lto_priv.32+0x8a>
                break;
            case BTN_OK:
                menu_item_highlight(7, 17, 21);
                break;
        }
        redraw();
    1bd6:	87 e4       	ldi	r24, 0x47	; 71
        ApplicationEvents.ShortKeyPressed = 0;
    1bd8:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <frameSelection.lto_priv.66>
    1bdc:	88 e4       	ldi	r24, 0x48	; 72
    1bde:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <frameSelection.lto_priv.66+0x1>
    }

    //@FIXME: this still works like shit..
    if (ApplicationEvents.LongKeyPressed || get_key_rpt_l(1 << KEY3)) {
    1be2:	aa df       	rcall	.-172    	; 0x1b38 <redraw.lto_priv.56>
    1be4:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
        switch (menu_selector) {
    1be8:	8e 7f       	andi	r24, 0xFE	; 254
    1bea:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    1bee:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1bf2:	81 ff       	sbrs	r24, 1
    1bf4:	0a c0       	rjmp	.+20     	; 0x1c0a <rs232_id_select_event_cb.lto_priv.32+0xb6>
    1bf6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <menu_selector.3027>
    1bfa:	81 30       	cpi	r24, 0x01	; 1
uint8_t get_key_long(uint8_t key_mask) {
    return get_key_press(get_key_rpt(key_mask));
}

uint8_t get_key_rpt_l(uint8_t key_mask) {
    return get_key_rpt(~key_press & key_mask);
    1bfc:	d1 f0       	breq	.+52     	; 0x1c32 <rs232_id_select_event_cb.lto_priv.32+0xde>
    1bfe:	68 f0       	brcs	.+26     	; 0x1c1a <rs232_id_select_event_cb.lto_priv.32+0xc6>
    1c00:	82 30       	cpi	r24, 0x02	; 2
    1c02:	81 f1       	breq	.+96     	; 0x1c64 <rs232_id_select_event_cb.lto_priv.32+0x110>
    1c04:	83 30       	cpi	r24, 0x03	; 3
    1c06:	29 f1       	breq	.+74     	; 0x1c52 <rs232_id_select_event_cb.lto_priv.32+0xfe>
        redraw();
        ApplicationEvents.ShortKeyPressed = 0;
    }

    //@FIXME: this still works like shit..
    if (ApplicationEvents.LongKeyPressed || get_key_rpt_l(1 << KEY3)) {
    1c08:	38 c0       	rjmp	.+112    	; 0x1c7a <rs232_id_select_event_cb.lto_priv.32+0x126>
    1c0a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <key_press.lto_priv.67>
        switch (menu_selector) {
            case BTN_MINUS:
                if (id > 1) {
    1c0e:	80 95       	com	r24
    1c10:	88 70       	andi	r24, 0x08	; 8
                    id--;
    1c12:	9f d7       	rcall	.+3902   	; 0x2b52 <get_key_rpt>
    1c14:	81 11       	cpse	r24, r1
    1c16:	ef cf       	rjmp	.-34     	; 0x1bf6 <rs232_id_select_event_cb.lto_priv.32+0xa2>
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1c18:	35 c0       	rjmp	.+106    	; 0x1c84 <rs232_id_select_event_cb.lto_priv.32+0x130>
    1c1a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <id.3028>
    frameSelection.sel_end = sel_end;
    1c1e:	82 30       	cpi	r24, 0x02	; 2
                    fb_put_u8(id, 3, 10);
                    redraw();
                }
                break;
            case BTN_PLUS:
                if (id < 99) {
    1c20:	60 f1       	brcs	.+88     	; 0x1c7a <rs232_id_select_event_cb.lto_priv.32+0x126>
    1c22:	81 50       	subi	r24, 0x01	; 1
    1c24:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <id.3028>
                    id++;
    1c28:	93 ec       	ldi	r25, 0xC3	; 195
    1c2a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <frameSelection.lto_priv.66>
 * @param sel_start selection start
 * @param sel_end selection end
 */
static void menu_item_highlight(uint8_t row, uint8_t sel_start, uint8_t sel_end) {
    frameSelection.row = row;
    frameSelection.sel_start = sel_start;
    1c2e:	90 e3       	ldi	r25, 0x30	; 48
    1c30:	0b c0       	rjmp	.+22     	; 0x1c48 <rs232_id_select_event_cb.lto_priv.32+0xf4>
    1c32:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <id.3028>
    frameSelection.sel_end = sel_end;
    1c36:	83 36       	cpi	r24, 0x63	; 99
    1c38:	00 f5       	brcc	.+64     	; 0x1c7a <rs232_id_select_event_cb.lto_priv.32+0x126>
                break;
            case BTN_PLUS:
                if (id < 99) {
                    id++;
                    menu_item_highlight(3, 16, 19);
                    fb_put_u8(id, 3, 10);
    1c3a:	8f 5f       	subi	r24, 0xFF	; 255
    1c3c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <id.3028>
                    redraw();
    1c40:	93 e0       	ldi	r25, 0x03	; 3
    1c42:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <frameSelection.lto_priv.66>
                }
                break;
            case BTN_OK:
                /* Perform write operation */
                if (modbus_poll_wr(DOT_DEVICE_ID, id, evt->id) > 0)
    1c46:	9c e9       	ldi	r25, 0x9C	; 156
    1c48:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <frameSelection.lto_priv.66+0x1>
    1c4c:	52 d4       	rcall	.+2212   	; 0x24f2 <fb_put_u8.constprop.4>
    1c4e:	74 df       	rcall	.-280    	; 0x1b38 <redraw.lto_priv.56>
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <rs232_id_select_event_cb.lto_priv.32+0x126>
    1c52:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <id.3028>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	4b 81       	ldd	r20, Y+3	; 0x03
    1c5a:	8f e1       	ldi	r24, 0x1F	; 31
    ApplicationEvents.TaskChanged = 1;
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	b0 dd       	rcall	.-1184   	; 0x17c0 <modbus_poll_wr.lto_priv.63>
    1c60:	18 16       	cp	r1, r24
    1c62:	5c f4       	brge	.+22     	; 0x1c7a <rs232_id_select_event_cb.lto_priv.32+0x126>
    1c64:	82 ec       	ldi	r24, 0xC2	; 194
            case BTN_CANCEL:
                schedule_task(&rs232_settings_task);
                break;
        }

        ApplicationEvents.LongKeyPressed = 0;
    1c66:	92 e0       	ldi	r25, 0x02	; 2
    1c68:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <current_task.lto_priv.44+0x1>
    1c6c:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <current_task.lto_priv.44>
    }
}
    1c70:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1c74:	84 60       	ori	r24, 0x04	; 4
        BTN_FREQ = 1, BTN_ANALOG, BTN_232, BTN_485, BTN_SHUTDOWN = 7
    };

    static enum menuSelector row_selector = BTN_FREQ;

    if (ApplicationEvents.TaskChanged) {
    1c76:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    1c7a:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
        load_frame();
    1c7e:	8d 7f       	andi	r24, 0xFD	; 253
    1c80:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
        menu_row_highlight(row_selector);
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	08 95       	ret

00001c8a <mode_select_event_cb.lto_priv.28>:
        redraw();
    1c8a:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    }
    return ready;
}

void ADC_enable(struct ADC_result *res) {
    result = res;
    1c8e:	82 ff       	sbrs	r24, 2
    1c90:	17 c0       	rjmp	.+46     	; 0x1cc0 <mode_select_event_cb.lto_priv.28+0x36>
    1c92:	e2 dd       	rcall	.-1084   	; 0x1858 <load_frame.lto_priv.57>
    1c94:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <row_selector.2939>
    1c98:	d8 dd       	rcall	.-1104   	; 0x184a <menu_row_highlight.lto_priv.59>
    adc_channel = 0;
    1c9a:	4e df       	rcall	.-356    	; 0x1b38 <redraw.lto_priv.56>
    1c9c:	8a ea       	ldi	r24, 0xAA	; 170
    ADMUX = 0x00; // AREF, internal Vref turned off
    1c9e:	92 e0       	ldi	r25, 0x02	; 2
    ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | // Division Factor = 16
    1ca0:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <result.lto_priv.49+0x1>
    1ca4:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <result.lto_priv.49>
        ADC_enable(&adc);
        ApplicationEvents.TaskChanged = 0;
    1ca8:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <adc_channel.lto_priv.50>
    1cac:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    }

    if (ADC_ready()) {
    1cb0:	87 e8       	ldi	r24, 0x87	; 135
    1cb2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1cb6:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
        ApplicationFlags.ExternalVoltage = (adc.channel_12v >= EXT_VOLTAGE_THRESHOLD) ? 1 : 0;
    1cba:	8b 7f       	andi	r24, 0xFB	; 251
    1cbc:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    1cc0:	0e 94 11 18 	call	0x3022	; 0x3022 <ADC_ready>
    1cc4:	88 23       	and	r24, r24
    1cc6:	89 f0       	breq	.+34     	; 0x1cea <mode_select_event_cb.lto_priv.28+0x60>
    1cc8:	91 e0       	ldi	r25, 0x01	; 1
    1cca:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <adc.lto_priv.42+0x2>
    1cce:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <adc.lto_priv.42+0x3>
        redraw_partial(0);
    1cd2:	28 3f       	cpi	r18, 0xF8	; 248
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	08 f4       	brcc	.+2      	; 0x1cda <mode_select_event_cb.lto_priv.28+0x50>
    }

    if (ApplicationEvents.ShortKeyPressed) {
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <ApplicationFlags>
    1cde:	90 fb       	bst	r25, 0
        row_selector++;
    1ce0:	80 f9       	bld	r24, 0
    1ce2:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <ApplicationFlags>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	9e de       	rcall	.-708    	; 0x1a26 <redraw_partial.lto_priv.21>

        if (row_selector > BTN_SHUTDOWN)
    1cea:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
            row_selector = BTN_FREQ;
    1cee:	80 ff       	sbrs	r24, 0
    1cf0:	17 c0       	rjmp	.+46     	; 0x1d20 <mode_select_event_cb.lto_priv.28+0x96>
        else if (row_selector > BTN_485)
    1cf2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <row_selector.2939>
            row_selector = BTN_SHUTDOWN;
    1cf6:	8f 5f       	subi	r24, 0xFF	; 255
    1cf8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <row_selector.2939>

        menu_row_highlight(row_selector);
    1cfc:	88 30       	cpi	r24, 0x08	; 8
    1cfe:	10 f0       	brcs	.+4      	; 0x1d04 <mode_select_event_cb.lto_priv.28+0x7a>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <mode_select_event_cb.lto_priv.28+0x80>
        redraw();
    1d04:	85 30       	cpi	r24, 0x05	; 5
    1d06:	18 f0       	brcs	.+6      	; 0x1d0e <mode_select_event_cb.lto_priv.28+0x84>

        ApplicationEvents.ShortKeyPressed = 0;
    1d08:	87 e0       	ldi	r24, 0x07	; 7
    1d0a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <row_selector.2939>
    1d0e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <row_selector.2939>
    }

    if (ApplicationEvents.LongKeyPressed) {
    1d12:	9b dd       	rcall	.-1226   	; 0x184a <menu_row_highlight.lto_priv.59>
    1d14:	11 df       	rcall	.-478    	; 0x1b38 <redraw.lto_priv.56>
    1d16:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
        switch (row_selector) {
    1d1a:	8e 7f       	andi	r24, 0xFE	; 254
    1d1c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    1d20:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1d24:	81 ff       	sbrs	r24, 1
    1d26:	3d c0       	rjmp	.+122    	; 0x1da2 <mode_select_event_cb.lto_priv.28+0x118>
    1d28:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <row_selector.2939>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	29 f1       	breq	.+74     	; 0x1d7a <mode_select_event_cb.lto_priv.28+0xf0>

        ApplicationEvents.ShortKeyPressed = 0;
    }

    if (ApplicationEvents.LongKeyPressed) {
        switch (row_selector) {
    1d30:	38 f4       	brcc	.+14     	; 0x1d40 <mode_select_event_cb.lto_priv.28+0xb6>
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	f9 f0       	breq	.+62     	; 0x1d74 <mode_select_event_cb.lto_priv.28+0xea>
    1d36:	82 30       	cpi	r24, 0x02	; 2
    while (ADCSRA & (1 << ADSC));
    return ADC;
}

void ADC_disable() {
    result = NULL;
    1d38:	79 f5       	brne	.+94     	; 0x1d98 <mode_select_event_cb.lto_priv.28+0x10e>
    1d3a:	80 ee       	ldi	r24, 0xE0	; 224
    1d3c:	92 e0       	ldi	r25, 0x02	; 2
    1d3e:	1f c0       	rjmp	.+62     	; 0x1d7e <mode_select_event_cb.lto_priv.28+0xf4>
    ADMUX &= 0xF8;
    1d40:	84 30       	cpi	r24, 0x04	; 4
    1d42:	39 f1       	breq	.+78     	; 0x1d92 <mode_select_event_cb.lto_priv.28+0x108>
    1d44:	87 30       	cpi	r24, 0x07	; 7
    1d46:	41 f5       	brne	.+80     	; 0x1d98 <mode_select_event_cb.lto_priv.28+0x10e>
    1d48:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <result.lto_priv.49+0x1>
    ADCSRA = 0x00;
    1d4c:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <result.lto_priv.49>
            case BTN_485:
                schedule_task(&rs485_main_task);
                break;
            case BTN_SHUTDOWN:
                ADC_disable();
                LCD_clear();
    1d50:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    unsigned char TimerExpired : 1;
    unsigned char Timer3sExpired : 1;
} TimerEvents;

void schedule_delayed_sleep() {
    TimerEvents.DelayedSleepScheduled = 1;
    1d54:	88 7f       	andi	r24, 0xF8	; 248
    1d56:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1d5a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    sleep_counter = 0;
    1d5e:	92 d5       	rcall	.+2852   	; 0x2884 <LCD_clear>
    1d60:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    1d64:	82 60       	ori	r24, 0x02	; 2
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    1d66:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
    1d6a:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sleep_counter.lto_priv.24+0x1>
    1d6e:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sleep_counter.lto_priv.24>
    1d72:	12 c0       	rjmp	.+36     	; 0x1d98 <mode_select_event_cb.lto_priv.28+0x10e>
    1d74:	8a ed       	ldi	r24, 0xDA	; 218
    1d76:	92 e0       	ldi	r25, 0x02	; 2
    ApplicationEvents.TaskChanged = 1;
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <mode_select_event_cb.lto_priv.28+0xf4>
    1d7a:	84 ed       	ldi	r24, 0xD4	; 212
    1d7c:	92 e0       	ldi	r25, 0x02	; 2
    1d7e:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <current_task.lto_priv.44+0x1>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    1d82:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <current_task.lto_priv.44>
    1d86:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
                LCD_clear();
                schedule_delayed_sleep();
                break;
        }

        ApplicationEvents.LongKeyPressed = 0;
    1d8a:	84 60       	ori	r24, 0x04	; 4
    1d8c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    1d90:	03 c0       	rjmp	.+6      	; 0x1d98 <mode_select_event_cb.lto_priv.28+0x10e>
    1d92:	8e ec       	ldi	r24, 0xCE	; 206
    frame[FRAME_ID_SELECT].frame_ptr = &frame_id_select[0];
    frame[FRAME_BAUD_SELECT].frame_ptr = &frame_baud_select[0];
    frame[FRAME_FREQ_ADJUST].frame_ptr = &frame_param_adjust[0];
}

void LCD_puts(PGM_P str) {
    1d94:	92 e0       	ldi	r25, 0x02	; 2
    1d96:	f3 cf       	rjmp	.-26     	; 0x1d7e <mode_select_event_cb.lto_priv.28+0xf4>
    1d98:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1d9c:	8d 7f       	andi	r24, 0xFD	; 253
    1d9e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    char c[16], *ptr;
    strcpy_P(c, str);
    1da2:	08 95       	ret

00001da4 <LCD_puts>:
    1da4:	a0 e1       	ldi	r26, 0x10	; 16
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e8 ed       	ldi	r30, 0xD8	; 216
    1daa:	fe e0       	ldi	r31, 0x0E	; 14
    1dac:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x1c>
    ptr = c;
    while (*ptr)
    1db0:	bc 01       	movw	r22, r24
    1db2:	ce 01       	movw	r24, r28
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strcpy_P>
        LCD_putchar(*(ptr++), false);
    1dba:	8e 01       	movw	r16, r28
    1dbc:	0f 5f       	subi	r16, 0xFF	; 255
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	f8 01       	movw	r30, r16
}
    1dc2:	81 91       	ld	r24, Z+
    1dc4:	8f 01       	movw	r16, r30
    1dc6:	88 23       	and	r24, r24
    1dc8:	19 f0       	breq	.+6      	; 0x1dd0 <LCD_puts+0x2c>
    RS232_FF_PORT |= (1 << RS232_FF_PIN);
    RS232_EN_PORT &= ~(1 << RS232_EN_PIN);
}

static inline void rs232_disable() {
    RS232_FF_PORT &= ~(1 << RS232_FF_PIN);
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    RS232_EN_PORT |= (1 << RS232_EN_PIN);
    1dcc:	75 d5       	rcall	.+2794   	; 0x28b8 <LCD_putchar>
    1dce:	f8 cf       	rjmp	.-16     	; 0x1dc0 <LCD_puts+0x1c>
    RS485_RE_PORT |= (1 << RS485_RE_PIN);
    RS485_DE_PORT &= ~(1 << RS485_DE_PIN);
}

static inline void rs232_enable() {
    RS232_FF_PORT |= (1 << RS232_FF_PIN);
    1dd0:	60 96       	adiw	r28, 0x10	; 16
    RS232_EN_PORT &= ~(1 << RS232_EN_PIN);
    1dd2:	e4 e0       	ldi	r30, 0x04	; 4
    1dd4:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x1c>

00001dd8 <rs232_disable.lto_priv.40>:
    RS485_DE_PORT &= ~(1 << RS485_DE_PIN);
}

static inline void rs485_disable() {
    RS485_RE_PORT |= (1 << RS485_RE_PIN);
    RS485_DE_PORT &= ~(1 << RS485_DE_PIN);
    1dd8:	5c 98       	cbi	0x0b, 4	; 11
    1dda:	5a 9a       	sbi	0x0b, 2	; 11
    float freq;
    uint16_t max_n;
    uint16_t time_average;
} modbus_rx_data;

static void rs232_event_cb(task_t *evt) {
    1ddc:	08 95       	ret

00001dde <rs232_enable.lto_priv.58>:
    1dde:	5c 9a       	sbi	0x0b, 4	; 11
    1de0:	5a 98       	cbi	0x0b, 2	; 11
    1de2:	08 95       	ret

00001de4 <rs485_disable.lto_priv.39>:
    1de4:	42 9a       	sbi	0x08, 2	; 8
    1de6:	43 98       	cbi	0x08, 3	; 8
    1de8:	08 95       	ret

00001dea <rs232_event_cb.lto_priv.30>:
    1dea:	8f 92       	push	r8
    1dec:	9f 92       	push	r9
    1dee:	af 92       	push	r10
    static uint8_t scroll;
    static uint8_t device_id;

    static enum optionSelector option_selector;

    if (ApplicationEvents.TaskChanged) {
    1df0:	bf 92       	push	r11
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	1f 93       	push	r17
        enum sensorType sensor_type = (enum sensorType) evt->type;
    1df8:	cf 93       	push	r28

        modbus_rx_data.empty_tank = 0;
    1dfa:	df 93       	push	r29
    1dfc:	ec 01       	movw	r28, r24
    1dfe:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    1e02:	82 ff       	sbrs	r24, 2
    1e04:	5e c0       	rjmp	.+188    	; 0x1ec2 <rs232_event_cb.lto_priv.30+0xd8>
        modbus_rx_data.full_tank = 0;
    1e06:	1a 81       	ldd	r17, Y+2	; 0x02
    1e08:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <modbus_rx_data+0x4>
    1e0c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <modbus_rx_data+0x5>
    1e10:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <modbus_rx_data+0x6>
        modbus_rx_data.max_n = 0;
    1e14:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <modbus_rx_data+0x7>
        modbus_rx_data.time_average = 0;
    1e18:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <modbus_rx_data>

        if (!ApplicationFlags.ExternalVoltage)
    1e1c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <modbus_rx_data+0x1>
    1e20:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <modbus_rx_data+0x2>
            boost_enable();
        UART_init(baud_lut[baud_index]);
    1e24:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <modbus_rx_data+0x3>
    1e28:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <modbus_rx_data+0xd>
    1e2c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <modbus_rx_data+0xc>
    1e30:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <modbus_rx_data+0xf>
    1e34:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <modbus_rx_data+0xe>
    1e38:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <ApplicationFlags>
    1e3c:	80 ff       	sbrs	r24, 0
        load_frame();
    1e3e:	29 9a       	sbi	0x05, 1	; 5
    1e40:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
        bool use_rs485 = false;
        if (sensor_type == SENSOR_RS485) {
    1e44:	84 e0       	ldi	r24, 0x04	; 4
            fb_put_str(0, (PGM_P) str_title_rs485);
    1e46:	e8 9f       	mul	r30, r24
    1e48:	f0 01       	movw	r30, r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	e8 5e       	subi	r30, 0xE8	; 232
    1e4e:	fe 4f       	sbci	r31, 0xFE	; 254
            use_rs485 = true;
    1e50:	60 81       	ld	r22, Z
            rs232_disable();
        } else if (sensor_type == SENSOR_RS232) {
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
            rs485_disable();
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	54 d6       	rcall	.+3240   	; 0x2b02 <UART_init>
            rs232_enable();
    1e5a:	fe dc       	rcall	.-1540   	; 0x1858 <load_frame.lto_priv.57>
    1e5c:	14 30       	cpi	r17, 0x04	; 4

        if (!ApplicationFlags.ExternalVoltage)
            boost_enable();
        UART_init(baud_lut[baud_index]);
        load_frame();
        bool use_rs485 = false;
    1e5e:	39 f4       	brne	.+14     	; 0x1e6e <rs232_event_cb.lto_priv.30+0x84>

static uint8_t modbus_ok(uint16_t TrustSize, uint8_t id);
static uint8_t *Buf_data;

void Modbus_enable(bool rs485) {
    pUDR0 = &UDR0;
    1e60:	65 e6       	ldi	r22, 0x65	; 101
    1e62:	77 e0       	ldi	r23, 0x07	; 7
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	38 dd       	rcall	.-1424   	; 0x18d8 <fb_put_str.lto_priv.20>
    1e68:	b7 df       	rcall	.-146    	; 0x1dd8 <rs232_disable.lto_priv.40>
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    TIMSK2 |= (1 << TOV2);
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <rs232_event_cb.lto_priv.30+0x8e>
    1e6e:	13 30       	cpi	r17, 0x03	; 3
    1e70:	11 f4       	brne	.+4      	; 0x1e76 <rs232_event_cb.lto_priv.30+0x8c>
    1e72:	b8 df       	rcall	.-144    	; 0x1de4 <rs485_disable.lto_priv.39>
    1e74:	b4 df       	rcall	.-152    	; 0x1dde <rs232_enable.lto_priv.58>
    use_rs485 = (rs485) ? 1 : 0;
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	26 ec       	ldi	r18, 0xC6	; 198
    TimerEvents.TimerExpired = 0;
    ctr = 0;
}

void timer0_preload_ms(uint16_t ms) {
    preload = ms / 10;
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	30 93 4e 02 	sts	0x024E, r19	; 0x80024e <pUDR0+0x1>
    1e80:	20 93 4d 02 	sts	0x024D, r18	; 0x80024d <pUDR0>
    1e84:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
            rs485_disable();
            rs232_enable();
        }
        Modbus_enable(use_rs485);
        timer0_preload_ms(50); // retry failed packet every 50ms
        timer0_reset();
    1e88:	91 60       	ori	r25, 0x01	; 1
        device_id = 0;
    1e8a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
        scroll = 0;
    1e8e:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <use_rs485>
        option_selector = MB_LEVEL_PERCENT;
    1e92:	85 e0       	ldi	r24, 0x05	; 5
        row_selector = BTN_EMPTY;
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <preload.lto_priv.47+0x1>
        menu_row_highlight(row_selector);
    1e9a:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <preload.lto_priv.47>
        redraw();
    1e9e:	5e d7       	rcall	.+3772   	; 0x2d5c <timer0_reset>

        ApplicationEvents.TaskChanged = 0;
    1ea0:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <device_id.2992>
    1ea4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <scroll.2991>
    }

    if (device_id) {
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <option_selector.2993>
        uint8_t got_val = 0;
        uint8_t pos = option_selector - scroll;
    1eae:	86 e0       	ldi	r24, 0x06	; 6
    1eb0:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <row_selector.2990>
    1eb4:	ca dc       	rcall	.-1644   	; 0x184a <menu_row_highlight.lto_priv.59>
    1eb6:	40 de       	rcall	.-896    	; 0x1b38 <redraw.lto_priv.56>
    1eb8:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>

        static float lvl_percent = 0;

        switch (option_selector) {
    1ebc:	8b 7f       	andi	r24, 0xFB	; 251
    1ebe:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    1ec2:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <device_id.2992>
    1ec6:	44 23       	and	r20, r20
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <rs232_event_cb.lto_priv.30+0xe2>
    1eca:	d0 c0       	rjmp	.+416    	; 0x206c <rs232_event_cb.lto_priv.30+0x282>
    1ecc:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <option_selector.2993>
    1ed0:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <scroll.2991>
            case MB_LEVEL_PERCENT:
                got_val = print_float_register(DOT_LEVEL_PERCENT, pos, device_id, str_level_precent);
    1ed4:	1e 2f       	mov	r17, r30
    1ed6:	12 1b       	sub	r17, r18
    1ed8:	8e 2f       	mov	r24, r30
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	fc 01       	movw	r30, r24
                if (got_val) {
    1ede:	31 97       	sbiw	r30, 0x01	; 1
    1ee0:	e9 30       	cpi	r30, 0x09	; 9
    1ee2:	f1 05       	cpc	r31, r1
                    lvl_percent = GetInpRegsFLOAT(0);
    1ee4:	08 f0       	brcs	.+2      	; 0x1ee8 <rs232_event_cb.lto_priv.30+0xfe>
    1ee6:	b9 c0       	rjmp	.+370    	; 0x205a <rs232_event_cb.lto_priv.30+0x270>
    1ee8:	e5 5c       	subi	r30, 0xC5	; 197
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__tablejump2__>
    1ef0:	26 e1       	ldi	r18, 0x16	; 22
    1ef2:	37 e0       	ldi	r19, 0x07	; 7
    1ef4:	61 2f       	mov	r22, r17
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	79 dd       	rcall	.-1294   	; 0x19ec <print_float_register>
                    option_selector++;
                }
                break;
            case MB_LEVEL_N:
                got_val = modbus_poll_r(DOT_OMNI_MAX_N, 1, device_id);
    1efa:	88 23       	and	r24, r24
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <rs232_event_cb.lto_priv.30+0x116>
    1efe:	21 c2       	rjmp	.+1090   	; 0x2342 <rs232_event_cb.lto_priv.30+0x558>
    1f00:	db d2       	rcall	.+1462   	; 0x24b8 <GetInpRegsFLOAT.constprop.8>
                if (got_val) {
    1f02:	60 93 6d 01 	sts	0x016D, r22	; 0x80016d <lvl_percent.2998>
                    unsigned short omni_max_n = GetInpRegsUSHORT(0);
    1f06:	70 93 6e 01 	sts	0x016E, r23	; 0x80016e <lvl_percent.2998+0x1>
    1f0a:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <lvl_percent.2998+0x2>
                    modbus_rx_data.max_n = omni_max_n;
    1f0e:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <lvl_percent.2998+0x3>
                    omni_max_n *= (double) (lvl_percent / 100);
    1f12:	94 c0       	rjmp	.+296    	; 0x203c <rs232_event_cb.lto_priv.30+0x252>
    1f14:	61 e0       	ldi	r22, 0x01	; 1
    1f16:	8d e1       	ldi	r24, 0x1D	; 29
    1f18:	76 dc       	rcall	.-1812   	; 0x1806 <modbus_poll_r.lto_priv.55>
    1f1a:	88 23       	and	r24, r24
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <rs232_event_cb.lto_priv.30+0x136>
    1f1e:	11 c2       	rjmp	.+1058   	; 0x2342 <rs232_event_cb.lto_priv.30+0x558>
    1f20:	b5 d2       	rcall	.+1386   	; 0x248c <GetInpRegsUSHORT.constprop.10>
    1f22:	7c 01       	movw	r14, r24
    1f24:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <modbus_rx_data+0xd>
    1f28:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <modbus_rx_data+0xc>
    1f2c:	2a e0       	ldi	r18, 0x0A	; 10
    1f2e:	37 ed       	ldi	r19, 0xD7	; 215
    1f30:	43 e2       	ldi	r20, 0x23	; 35
    1f32:	5c e3       	ldi	r21, 0x3C	; 60
    1f34:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <lvl_percent.2998>
    1f38:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <lvl_percent.2998+0x1>
    1f3c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <lvl_percent.2998+0x2>
    1f40:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <lvl_percent.2998+0x3>
    1f44:	0e 94 89 1b 	call	0x3712	; 0x3712 <__mulsf3>
                    if (pos > 0) {
    1f48:	4b 01       	movw	r8, r22
                        fb_put_tag(pos, str_level_n, omni_max_n);
    1f4a:	5c 01       	movw	r10, r24
    1f4c:	b7 01       	movw	r22, r14
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <__floatunsisf>
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	c5 01       	movw	r24, r10
                    }
                    option_selector++;
                }
                break;
            case MB_DOT_FREQ:
                got_val = print_float_register(DOT_FREQ, pos, device_id, str_freq);
    1f5c:	b4 01       	movw	r22, r8
    1f5e:	0e 94 89 1b 	call	0x3712	; 0x3712 <__mulsf3>
    1f62:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fixunssfsi>
                if (got_val) {
    1f66:	11 23       	and	r17, r17
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <rs232_event_cb.lto_priv.30+0x182>
                    modbus_rx_data.freq = GetInpRegsFLOAT(0);
    1f6a:	68 c0       	rjmp	.+208    	; 0x203c <rs232_event_cb.lto_priv.30+0x252>
    1f6c:	9b 01       	movw	r18, r22
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	50 e0       	ldi	r21, 0x00	; 0
    1f72:	6b e0       	ldi	r22, 0x0B	; 11
    1f74:	77 e0       	ldi	r23, 0x07	; 7
    1f76:	81 2f       	mov	r24, r17
    1f78:	ec dc       	rcall	.-1576   	; 0x1952 <fb_put_tag.lto_priv.62>
    1f7a:	60 c0       	rjmp	.+192    	; 0x203c <rs232_event_cb.lto_priv.30+0x252>
    1f7c:	21 e0       	ldi	r18, 0x01	; 1
    1f7e:	37 e0       	ldi	r19, 0x07	; 7
                    option_selector++;
                }
                break;
            case MB_ERROR:
                got_val = print_ushort_register(DOT_ERROR_CODE, pos, device_id, str_modbus_error);
    1f80:	61 2f       	mov	r22, r17
    1f82:	86 e0       	ldi	r24, 0x06	; 6
    1f84:	33 dd       	rcall	.-1434   	; 0x19ec <print_float_register>
    1f86:	88 23       	and	r24, r24
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <rs232_event_cb.lto_priv.30+0x1a2>
    1f8a:	db c1       	rjmp	.+950    	; 0x2342 <rs232_event_cb.lto_priv.30+0x558>
                if (got_val) option_selector++;
    1f8c:	95 d2       	rcall	.+1322   	; 0x24b8 <GetInpRegsFLOAT.constprop.8>
    1f8e:	60 93 7d 01 	sts	0x017D, r22	; 0x80017d <modbus_rx_data+0x8>
                break;
            case MB_BLANK:
                option_selector++;
    1f92:	70 93 7e 01 	sts	0x017E, r23	; 0x80017e <modbus_rx_data+0x9>
                break;
            case MB_EMPTY_TANK:
                got_val = print_float_register(DOT_EMPTY_TANK, pos, device_id, str_empty_tank);
    1f96:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <modbus_rx_data+0xa>
    1f9a:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <modbus_rx_data+0xb>
    1f9e:	4e c0       	rjmp	.+156    	; 0x203c <rs232_event_cb.lto_priv.30+0x252>
                if (got_val) {
    1fa0:	2a ef       	ldi	r18, 0xFA	; 250
    1fa2:	36 e0       	ldi	r19, 0x06	; 6
                    modbus_rx_data.empty_tank = GetInpRegsFLOAT(0);
    1fa4:	61 2f       	mov	r22, r17
    1fa6:	82 e2       	ldi	r24, 0x22	; 34
    1fa8:	05 dd       	rcall	.-1526   	; 0x19b4 <print_ushort_register.lto_priv.60>
    1faa:	88 23       	and	r24, r24
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <rs232_event_cb.lto_priv.30+0x1c6>
    1fae:	c9 c1       	rjmp	.+914    	; 0x2342 <rs232_event_cb.lto_priv.30+0x558>
    1fb0:	45 c0       	rjmp	.+138    	; 0x203c <rs232_event_cb.lto_priv.30+0x252>
    1fb2:	86 e0       	ldi	r24, 0x06	; 6
    1fb4:	58 c0       	rjmp	.+176    	; 0x2066 <rs232_event_cb.lto_priv.30+0x27c>
    1fb6:	2c ed       	ldi	r18, 0xDC	; 220
                    option_selector++;
                }
                break;
            case MB_FULL_TANK:
                got_val = print_float_register(DOT_FULL_TANK, pos, device_id, str_full_tank);
    1fb8:	36 e0       	ldi	r19, 0x06	; 6
    1fba:	61 2f       	mov	r22, r17
    1fbc:	86 e2       	ldi	r24, 0x26	; 38
    1fbe:	16 dd       	rcall	.-1492   	; 0x19ec <print_float_register>
    1fc0:	88 23       	and	r24, r24
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <rs232_event_cb.lto_priv.30+0x1dc>
                if (got_val) {
    1fc4:	be c1       	rjmp	.+892    	; 0x2342 <rs232_event_cb.lto_priv.30+0x558>
    1fc6:	78 d2       	rcall	.+1264   	; 0x24b8 <GetInpRegsFLOAT.constprop.8>
    1fc8:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <modbus_rx_data+0x4>
                    modbus_rx_data.full_tank = GetInpRegsFLOAT(0);
    1fcc:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <modbus_rx_data+0x5>
    1fd0:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <modbus_rx_data+0x6>
    1fd4:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <modbus_rx_data+0x7>
    1fd8:	31 c0       	rjmp	.+98     	; 0x203c <rs232_event_cb.lto_priv.30+0x252>
    1fda:	22 ed       	ldi	r18, 0xD2	; 210
                    option_selector++;
                }
                break;
            case MB_NMAX:
                if (pos > 0 && pos < 8)
    1fdc:	36 e0       	ldi	r19, 0x06	; 6
    1fde:	61 2f       	mov	r22, r17
    1fe0:	84 e2       	ldi	r24, 0x24	; 36
                    fb_put_tag(pos, str_n_max, modbus_rx_data.max_n);
    1fe2:	04 dd       	rcall	.-1528   	; 0x19ec <print_float_register>
    1fe4:	88 23       	and	r24, r24
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <rs232_event_cb.lto_priv.30+0x200>
    1fe8:	ac c1       	rjmp	.+856    	; 0x2342 <rs232_event_cb.lto_priv.30+0x558>
    1fea:	66 d2       	rcall	.+1228   	; 0x24b8 <GetInpRegsFLOAT.constprop.8>
    1fec:	60 93 75 01 	sts	0x0175, r22	; 0x800175 <modbus_rx_data>
    1ff0:	70 93 76 01 	sts	0x0176, r23	; 0x800176 <modbus_rx_data+0x1>
    1ff4:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <modbus_rx_data+0x2>
                option_selector++;
    1ff8:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <modbus_rx_data+0x3>
    1ffc:	1f c0       	rjmp	.+62     	; 0x203c <rs232_event_cb.lto_priv.30+0x252>
    1ffe:	8f ef       	ldi	r24, 0xFF	; 255
                break;
            case MB_TIME_AVERAGE:
                got_val = print_ushort_register(DOT_TIME_AVERAGE, pos, device_id, str_t_average);
    2000:	81 0f       	add	r24, r17
    2002:	87 30       	cpi	r24, 0x07	; 7
    2004:	50 f4       	brcc	.+20     	; 0x201a <rs232_event_cb.lto_priv.30+0x230>
    2006:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <modbus_rx_data+0xc>
    200a:	30 91 82 01 	lds	r19, 0x0182	; 0x800182 <modbus_rx_data+0xd>
                if (got_val) {
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	50 e0       	ldi	r21, 0x00	; 0
                    modbus_rx_data.time_average = GetInpRegsUSHORT(0);
    2012:	6d ec       	ldi	r22, 0xCD	; 205
    2014:	76 e0       	ldi	r23, 0x06	; 6
    2016:	81 2f       	mov	r24, r17
    2018:	9c dc       	rcall	.-1736   	; 0x1952 <fb_put_tag.lto_priv.62>
    201a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <option_selector.2993>
                    option_selector++;
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	22 c0       	rjmp	.+68     	; 0x2066 <rs232_event_cb.lto_priv.30+0x27c>
    2022:	22 ec       	ldi	r18, 0xC2	; 194
    }
    return 0;
}

void timer3s_reset() {
    TimerEvents.Timer3sExpired = 0;
    2024:	36 e0       	ldi	r19, 0x06	; 6
    2026:	61 2f       	mov	r22, r17
    2028:	86 e1       	ldi	r24, 0x16	; 22
    202a:	c4 dc       	rcall	.-1656   	; 0x19b4 <print_ushort_register.lto_priv.60>
    counter_3s = 0;
    202c:	88 23       	and	r24, r24
    202e:	09 f4       	brne	.+2      	; 0x2032 <rs232_event_cb.lto_priv.30+0x248>
    2030:	88 c1       	rjmp	.+784    	; 0x2342 <rs232_event_cb.lto_priv.30+0x558>
    2032:	2c d2       	rcall	.+1112   	; 0x248c <GetInpRegsUSHORT.constprop.10>
    2034:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <modbus_rx_data+0xf>
                }
                break;
            default:
                menu_row_highlight(row_selector - scroll);
    2038:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <modbus_rx_data+0xe>
    203c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <option_selector.2993>
                redraw();
    2040:	8f 5f       	subi	r24, 0xFF	; 255
    2042:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <option_selector.2993>
                option_selector = MB_LEVEL_PERCENT;
    2046:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    204a:	87 7f       	andi	r24, 0xF7	; 247
            fb_put_str(0, (PGM_P) str_no_conn);
            redraw();
            device_id = 0;
        }
    } else {
        int8_t got_id = modbus_poll_r(DOT_DEVICE_ID, 1, 0);
    204c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
    2050:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <counter_3s.lto_priv.48+0x1>
    2054:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <counter_3s.lto_priv.48>
        if (got_id > 0) {
    2058:	1c c0       	rjmp	.+56     	; 0x2092 <rs232_event_cb.lto_priv.30+0x2a8>
    }
    return 0;
}

void timer3s_reset() {
    TimerEvents.Timer3sExpired = 0;
    205a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <row_selector.2990>
    205e:	82 1b       	sub	r24, r18
    2060:	f4 db       	rcall	.-2072   	; 0x184a <menu_row_highlight.lto_priv.59>
    2062:	6a dd       	rcall	.-1324   	; 0x1b38 <redraw.lto_priv.56>
    counter_3s = 0;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <option_selector.2993>
    206a:	6b c1       	rjmp	.+726    	; 0x2342 <rs232_event_cb.lto_priv.30+0x558>
            timer3s_reset();
            device_id = modbus_get_id();
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	8f e1       	ldi	r24, 0x1F	; 31
    2072:	c9 db       	rcall	.-2158   	; 0x1806 <modbus_poll_r.lto_priv.55>
        }
    }

    if (ApplicationEvents.ShortKeyPressed) {
    2074:	18 16       	cp	r1, r24
    2076:	6c f4       	brge	.+26     	; 0x2092 <rs232_event_cb.lto_priv.30+0x2a8>
    2078:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
        if (++row_selector > 7) {
    207c:	87 7f       	andi	r24, 0xF7	; 247
    207e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
    2082:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <counter_3s.lto_priv.48+0x1>
    2086:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <counter_3s.lto_priv.48>
    208a:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DataBuffer0>
            if (row_selector > BTN_EXIT) {
    208e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <device_id.2992>
                load_frame();
    2092:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
                if ((enum sensorType) evt->type == SENSOR_RS485)
    2096:	80 ff       	sbrs	r24, 0
    2098:	5f c0       	rjmp	.+190    	; 0x2158 <rs232_event_cb.lto_priv.30+0x36e>
                    fb_put_str(0, (PGM_P) str_title_rs485); // load 'rs485' title
    209a:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <row_selector.2990>
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	8e 0f       	add	r24, r30
    20a2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <row_selector.2990>
                //row_selector = BTN_LEVEL;
                row_selector = BTN_EMPTY;
    20a6:	88 30       	cpi	r24, 0x08	; 8
    20a8:	08 f4       	brcc	.+2      	; 0x20ac <rs232_event_cb.lto_priv.30+0x2c2>
                option_selector = MB_LEVEL_PERCENT;
    20aa:	43 c0       	rjmp	.+134    	; 0x2132 <rs232_event_cb.lto_priv.30+0x348>
    20ac:	8c 30       	cpi	r24, 0x0C	; 12
                scroll = 0;
    20ae:	88 f0       	brcs	.+34     	; 0x20d2 <rs232_event_cb.lto_priv.30+0x2e8>
            } else {
                scroll++;
    20b0:	d3 db       	rcall	.-2138   	; 0x1858 <load_frame.lto_priv.57>
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	84 30       	cpi	r24, 0x04	; 4
    20b6:	21 f4       	brne	.+8      	; 0x20c0 <rs232_event_cb.lto_priv.30+0x2d6>
                load_frame_scroll(row_selector - 7);
    20b8:	65 e6       	ldi	r22, 0x65	; 101
/**
 * Load frame and scroll down by 1 line
 * @param offset index of the next line in frame
 */
static void load_frame_scroll(uint8_t offset) {
    struct frame_t *fs = (struct frame_t *) current_task->container;
    20ba:	77 e0       	ldi	r23, 0x07	; 7
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	0c dc       	rcall	.-2024   	; 0x18d8 <fb_put_str.lto_priv.20>
    20c0:	86 e0       	ldi	r24, 0x06	; 6
    20c2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <row_selector.2990>
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <option_selector.2993>
    20cc:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <scroll.2991>
    20d0:	30 c0       	rjmp	.+96     	; 0x2132 <rs232_event_cb.lto_priv.30+0x348>
    /* skip framebuffer[0] to leave title intact and scroll lines down */
    for (uint8_t i = 1; i < 7; i++)
        memcpy(framebuffer[i], framebuffer[i + 1], FRAME_LENGTH);
    20d2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <scroll.2991>
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <scroll.2991>
    20dc:	1a ef       	ldi	r17, 0xFA	; 250
    20de:	1e 0f       	add	r17, r30
    20e0:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <current_task.lto_priv.44>
 * @param offset index of the next line in frame
 */
static void load_frame_scroll(uint8_t offset) {
    struct frame_t *fs = (struct frame_t *) current_task->container;
    /* skip framebuffer[0] to leave title intact and scroll lines down */
    for (uint8_t i = 1; i < 7; i++)
    20e4:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <current_task.lto_priv.44+0x1>
        memcpy(framebuffer[i], framebuffer[i + 1], FRAME_LENGTH);

    /* clear last line */
    fb_clear_line(7);
    20e8:	e4 80       	ldd	r14, Z+4	; 0x04
    20ea:	f5 80       	ldd	r15, Z+5	; 0x05
    20ec:	80 e0       	ldi	r24, 0x00	; 0

    /* load last line from flash */
    strcpy_P(framebuffer[7], (PGM_P) pgm_read_word(&(fs->frame_ptr[7 + offset])));
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	fc 01       	movw	r30, r24
    20f2:	e8 53       	subi	r30, 0x38	; 56
    20f4:	fe 4f       	sbci	r31, 0xFE	; 254
    20f6:	46 96       	adiw	r24, 0x16	; 22
    20f8:	dc 01       	movw	r26, r24
    20fa:	a4 56       	subi	r26, 0x64	; 100
    20fc:	be 4f       	sbci	r27, 0xFE	; 254
    20fe:	26 e1       	ldi	r18, 0x16	; 22
    2100:	01 90       	ld	r0, Z+
    2102:	0d 92       	st	X+, r0
    2104:	2a 95       	dec	r18
    2106:	e1 f7       	brne	.-8      	; 0x2100 <rs232_event_cb.lto_priv.30+0x316>
    2108:	84 38       	cpi	r24, 0x84	; 132
    210a:	91 05       	cpc	r25, r1
    210c:	89 f7       	brne	.-30     	; 0x20f0 <rs232_event_cb.lto_priv.30+0x306>
            } else {
                scroll++;
                load_frame_scroll(row_selector - 7);
            }
        }
        if (row_selector == BTN_PARAM_EDIT_LABEL) row_selector++;
    210e:	87 e0       	ldi	r24, 0x07	; 7
    2110:	d0 db       	rcall	.-2144   	; 0x18b2 <fb_clear_line.lto_priv.22>
    2112:	e1 2f       	mov	r30, r17
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	37 96       	adiw	r30, 0x07	; 7
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
        menu_row_highlight(row_selector - scroll);
    211c:	d7 01       	movw	r26, r14
    211e:	8d 91       	ld	r24, X+
    2120:	9c 91       	ld	r25, X
    2122:	e8 0f       	add	r30, r24
    2124:	f9 1f       	adc	r31, r25
    2126:	65 91       	lpm	r22, Z+
    2128:	74 91       	lpm	r23, Z
        redraw();
    212a:	86 e3       	ldi	r24, 0x36	; 54
    212c:	92 e0       	ldi	r25, 0x02	; 2

        ApplicationEvents.ShortKeyPressed = 0;
    212e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strcpy_P>
    2132:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <row_selector.2990>
    2136:	85 30       	cpi	r24, 0x05	; 5
    }

    redraw_partial(0);
    2138:	19 f4       	brne	.+6      	; 0x2140 <rs232_event_cb.lto_priv.30+0x356>
    213a:	86 e0       	ldi	r24, 0x06	; 6
    213c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <row_selector.2990>


    if (ApplicationEvents.LongKeyPressed) {
    2140:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <row_selector.2990>
    2144:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <scroll.2991>
        switch (row_selector) {
    2148:	89 1b       	sub	r24, r25
    214a:	7f db       	rcall	.-2306   	; 0x184a <menu_row_highlight.lto_priv.59>
    214c:	f5 dc       	rcall	.-1558   	; 0x1b38 <redraw.lto_priv.56>
    214e:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    2152:	8e 7f       	andi	r24, 0xFE	; 254
    2154:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	65 dc       	rcall	.-1846   	; 0x1a26 <redraw_partial.lto_priv.21>

                task_set_id(&rs232_param_adjust_task, device_id);
                schedule_task(&rs232_param_adjust_task);
                break;
            case BTN_FULL:
                parameters.default_value = modbus_rx_data.freq;
    215c:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    2160:	81 ff       	sbrs	r24, 1
    2162:	02 c1       	rjmp	.+516    	; 0x2368 <rs232_event_cb.lto_priv.30+0x57e>
    2164:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <row_selector.2990>
    2168:	88 30       	cpi	r24, 0x08	; 8
    216a:	09 f4       	brne	.+2      	; 0x216e <rs232_event_cb.lto_priv.30+0x384>
    216c:	80 c0       	rjmp	.+256    	; 0x226e <rs232_event_cb.lto_priv.30+0x484>
    216e:	b8 f5       	brcc	.+110    	; 0x21de <rs232_event_cb.lto_priv.30+0x3f4>
    2170:	86 30       	cpi	r24, 0x06	; 6
    2172:	09 f4       	brne	.+2      	; 0x2176 <rs232_event_cb.lto_priv.30+0x38c>
    2174:	4b c0       	rjmp	.+150    	; 0x220c <rs232_event_cb.lto_priv.30+0x422>
    2176:	87 30       	cpi	r24, 0x07	; 7
    2178:	09 f0       	breq	.+2      	; 0x217c <rs232_event_cb.lto_priv.30+0x392>
    217a:	dd c0       	rjmp	.+442    	; 0x2336 <rs232_event_cb.lto_priv.30+0x54c>
                parameters.register_value = modbus_rx_data.full_tank;
    217c:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <modbus_rx_data+0x8>
    2180:	70 91 7e 01 	lds	r23, 0x017E	; 0x80017e <modbus_rx_data+0x9>
    2184:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <modbus_rx_data+0xa>
    2188:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <modbus_rx_data+0xb>
    218c:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fixunssfsi>
    2190:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <parameters>
    2194:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <parameters+0x1>
    2198:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <parameters+0x2>
    219c:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <parameters+0x3>
                parameters.max_value = 0;
    21a0:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <modbus_rx_data>
    21a4:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <modbus_rx_data+0x1>
                parameters.register_type = FLOAT_TYPE;
    21a8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <modbus_rx_data+0x2>
    21ac:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <modbus_rx_data+0x3>
                parameters.register_addr = DOT_FULL_TANK;
    21b0:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fixunssfsi>
                parameters.param_str = str_full_tank;
    21b4:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <parameters+0x4>
    21b8:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <parameters+0x5>

    redraw_partial(0);


    if (ApplicationEvents.LongKeyPressed) {
        switch (row_selector) {
    21bc:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <parameters+0x6>
    21c0:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <parameters+0x7>
    21c4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <parameters+0x9>
    21c8:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <parameters+0x8>
}

void Modbus_disable() {
    TCCR2A = 0x00;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    TCCR2B = 0x00;
    21ce:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <parameters+0xb>
    TIMSK2 &= ~(1 << TOV2);
    21d2:	84 e2       	ldi	r24, 0x24	; 36
    21d4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <parameters+0xa>
    21d8:	82 ed       	ldi	r24, 0xD2	; 210
    21da:	96 e0       	ldi	r25, 0x06	; 6
static inline void boost_enable() {
    BOOST_PORT |= (1 << BOOST_PIN);
}

static inline void boost_disable() {
    BOOST_PORT &= ~(1 << BOOST_PIN);
    21dc:	6f c0       	rjmp	.+222    	; 0x22bc <rs232_event_cb.lto_priv.30+0x4d2>
                schedule_task(&rs232_settings_task);
                break;
            case BTN_EXIT:
                Modbus_disable();
                boost_disable();
                rs232_disable();
    21de:	8a 30       	cpi	r24, 0x0A	; 10
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <rs232_event_cb.lto_priv.30+0x3fa>
                rs485_disable();
    21e2:	9b c0       	rjmp	.+310    	; 0x231a <rs232_event_cb.lto_priv.30+0x530>
    21e4:	08 f4       	brcc	.+2      	; 0x21e8 <rs232_event_cb.lto_priv.30+0x3fe>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    21e6:	75 c0       	rjmp	.+234    	; 0x22d2 <rs232_event_cb.lto_priv.30+0x4e8>
    21e8:	8b 30       	cpi	r24, 0x0B	; 11
    21ea:	09 f0       	breq	.+2      	; 0x21ee <rs232_event_cb.lto_priv.30+0x404>


    if (ApplicationEvents.LongKeyPressed) {
        switch (row_selector) {
            case BTN_EMPTY:
                parameters.default_value = modbus_rx_data.freq;
    21ec:	a4 c0       	rjmp	.+328    	; 0x2336 <rs232_event_cb.lto_priv.30+0x54c>
    21ee:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    21f2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    21f6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    21fa:	8e 7f       	andi	r24, 0xFE	; 254
    21fc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    2200:	29 98       	cbi	0x05, 1	; 5
    2202:	ea dd       	rcall	.-1068   	; 0x1dd8 <rs232_disable.lto_priv.40>
    2204:	ef dd       	rcall	.-1058   	; 0x1de4 <rs485_disable.lto_priv.39>
    2206:	87 ee       	ldi	r24, 0xE7	; 231
    2208:	92 e0       	ldi	r25, 0x02	; 2
    220a:	8c c0       	rjmp	.+280    	; 0x2324 <rs232_event_cb.lto_priv.30+0x53a>
    220c:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <modbus_rx_data+0x8>
                parameters.register_value = modbus_rx_data.empty_tank;
    2210:	70 91 7e 01 	lds	r23, 0x017E	; 0x80017e <modbus_rx_data+0x9>
    2214:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <modbus_rx_data+0xa>
    2218:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <modbus_rx_data+0xb>
    221c:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fixunssfsi>
    2220:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <parameters>
    2224:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <parameters+0x1>
    2228:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <parameters+0x2>
    222c:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <parameters+0x3>
    2230:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <modbus_rx_data+0x4>
                parameters.max_value = 0;
    2234:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <modbus_rx_data+0x5>
    2238:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <modbus_rx_data+0x6>
                parameters.register_type = FLOAT_TYPE;
    223c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <modbus_rx_data+0x7>
    2240:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fixunssfsi>
                parameters.register_addr = DOT_EMPTY_TANK;
    2244:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <parameters+0x4>
                parameters.param_str = str_empty_tank;
    2248:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <parameters+0x5>
    224c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <parameters+0x6>

                task_set_id(&rs232_param_adjust_task, device_id);
                schedule_task(&rs232_param_adjust_task);
                break;
            case BTN_NMAX_EDIT:
                parameters.default_value = 1023;
    2250:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <parameters+0x7>
    2254:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <parameters+0x9>
    2258:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <parameters+0x8>
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <parameters+0xb>
    2262:	86 e2       	ldi	r24, 0x26	; 38
    2264:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <parameters+0xa>
                parameters.register_value = modbus_rx_data.max_n;
    2268:	8c ed       	ldi	r24, 0xDC	; 220
    226a:	96 e0       	ldi	r25, 0x06	; 6
    226c:	27 c0       	rjmp	.+78     	; 0x22bc <rs232_event_cb.lto_priv.30+0x4d2>
    226e:	8f ef       	ldi	r24, 0xFF	; 255
    2270:	93 e0       	ldi	r25, 0x03	; 3
    2272:	a0 e0       	ldi	r26, 0x00	; 0
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <parameters>
    227a:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <parameters+0x1>
    227e:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <parameters+0x2>
                parameters.max_value = 65535;
    2282:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <parameters+0x3>
    2286:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <modbus_rx_data+0xc>
    228a:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <modbus_rx_data+0xd>
                parameters.register_type = USHORT_TYPE;
    228e:	a0 e0       	ldi	r26, 0x00	; 0
    2290:	b0 e0       	ldi	r27, 0x00	; 0
                parameters.register_addr = DOT_OMNI_MAX_N;
    2292:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <parameters+0x4>
    2296:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <parameters+0x5>
                parameters.param_str = str_n_max;
    229a:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <parameters+0x6>
                parameters.default_value = modbus_rx_data.freq;
                parameters.register_value = modbus_rx_data.full_tank;
                parameters.max_value = 0;
                parameters.register_type = FLOAT_TYPE;
                parameters.register_addr = DOT_FULL_TANK;
                parameters.param_str = str_full_tank;
    229e:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <parameters+0x7>
    22a2:	8f ef       	ldi	r24, 0xFF	; 255
}

void task_set_id(struct task_cb *task, unsigned char id) {
    task->id = id;
    22a4:	9f ef       	ldi	r25, 0xFF	; 255
    22a6:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <parameters+0x9>
    22aa:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <parameters+0x8>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    22ae:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <parameters+0xb>

                task_set_id(&rs232_param_adjust_task, device_id);
                schedule_task(&rs232_param_adjust_task);
                break;
            case BTN_TAVERAGE_EDIT:
                parameters.default_value = 0;
    22b2:	8d e1       	ldi	r24, 0x1D	; 29
    22b4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <parameters+0xa>
    22b8:	8d ec       	ldi	r24, 0xCD	; 205
    22ba:	96 e0       	ldi	r25, 0x06	; 6
    22bc:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <parameters+0xd>
                parameters.register_value = modbus_rx_data.time_average;
    22c0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <parameters+0xc>
    22c4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <device_id.2992>
    22c8:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <rs232_param_adjust_task.lto_priv.70+0x3>
    22cc:	80 eb       	ldi	r24, 0xB0	; 176
    22ce:	92 e0       	ldi	r25, 0x02	; 2
    22d0:	29 c0       	rjmp	.+82     	; 0x2324 <rs232_event_cb.lto_priv.30+0x53a>
    22d2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <parameters>
    22d6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <parameters+0x1>
                parameters.max_value = 90;
    22da:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <parameters+0x2>
    22de:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <parameters+0x3>
    22e2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <modbus_rx_data+0xe>
                parameters.register_type = USHORT_TYPE;
    22e6:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <modbus_rx_data+0xf>
                parameters.register_addr = DOT_TIME_AVERAGE;
    22ea:	a0 e0       	ldi	r26, 0x00	; 0
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <parameters+0x4>
                parameters.param_str = str_t_average;
    22f2:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <parameters+0x5>

                task_set_id(&rs232_param_adjust_task, device_id);
                schedule_task(&rs232_param_adjust_task);
                break;
            case BTN_SETTINGS:
                task_set_type(&rs232_settings_task, (enum sensorType) evt->type);
    22f6:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <parameters+0x6>
    task->event_handler = cb;
    task->id = 0;
}

void task_set_type(struct task_cb *task, unsigned char type) {
    task->type = type;
    22fa:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <parameters+0x7>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    22fe:	8a e5       	ldi	r24, 0x5A	; 90
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <parameters+0x9>
    2306:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <parameters+0x8>
    ApplicationEvents.TaskChanged = 1;
    230a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <parameters+0xb>
    230e:	86 e1       	ldi	r24, 0x16	; 22
    2310:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <parameters+0xa>
                rs232_disable();
                rs485_disable();
                schedule_task(&mode_select_task);
                break;
        }
        ApplicationEvents.LongKeyPressed = 0;
    2314:	82 ec       	ldi	r24, 0xC2	; 194
    2316:	96 e0       	ldi	r25, 0x06	; 6
    2318:	d1 cf       	rjmp	.-94     	; 0x22bc <rs232_event_cb.lto_priv.30+0x4d2>
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <rs232_settings_task.lto_priv.54+0x2>
}

uint8_t timer3s_expired() {
    if (TimerEvents.Timer3sExpired) {
    2320:	82 ec       	ldi	r24, 0xC2	; 194
    2322:	92 e0       	ldi	r25, 0x02	; 2
    2324:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <current_task.lto_priv.44+0x1>
    }
    return 0;
}

void timer3s_reset() {
    TimerEvents.Timer3sExpired = 0;
    2328:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <current_task.lto_priv.44>
    counter_3s = 0;
    232c:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    2330:	84 60       	ori	r24, 0x04	; 4
    2332:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
            //            if ((enum sensorType) evt->type == SENSOR_RS485)
            //                fb_put_str(0, (PGM_P) str_title_rs485);
            //            else
            //                fb_put_str(0, (PGM_P) str_title_rs232);
        } else if (timer3s_expired()) {
            fb_put_str(0, (PGM_P) str_no_conn);
    2336:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    233a:	8d 7f       	andi	r24, 0xFD	; 253
    233c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
            redraw();
    2340:	13 c0       	rjmp	.+38     	; 0x2368 <rs232_event_cb.lto_priv.30+0x57e>
            device_id = 0;
    2342:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    2346:	83 ff       	sbrs	r24, 3
                schedule_task(&mode_select_task);
                break;
        }
        ApplicationEvents.LongKeyPressed = 0;
    }
}
    2348:	a4 ce       	rjmp	.-696    	; 0x2092 <rs232_event_cb.lto_priv.30+0x2a8>
    234a:	87 7f       	andi	r24, 0xF7	; 247
    234c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
    2350:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <counter_3s.lto_priv.48+0x1>
    2354:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <counter_3s.lto_priv.48>
    2358:	6d e2       	ldi	r22, 0x2D	; 45
    235a:	71 e0       	ldi	r23, 0x01	; 1
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	bc da       	rcall	.-2696   	; 0x18d8 <fb_put_str.lto_priv.20>
    2360:	eb db       	rcall	.-2090   	; 0x1b38 <redraw.lto_priv.56>
    2362:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <device_id.2992>
    2366:	95 ce       	rjmp	.-726    	; 0x2092 <rs232_event_cb.lto_priv.30+0x2a8>
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	ff 90       	pop	r15
    2370:	ef 90       	pop	r14
    2372:	bf 90       	pop	r11
    2374:	af 90       	pop	r10
    2376:	9f 90       	pop	r9
    2378:	8f 90       	pop	r8
    237a:	08 95       	ret

0000237c <crc16.constprop.15>:
static void rx_enable() {
    UCSR0B |= 1 << RXEN0;
    if (use_rs485) rs485_rx_enable();
}

static uint16_t crc16(uint8_t *buf, uint8_t len, uint16_t prev_crc) {
    237c:	ef e4       	ldi	r30, 0x4F	; 79
    237e:	f2 e0       	ldi	r31, 0x02	; 2
    uint16_t crc = prev_crc;
    2380:	2f ef       	ldi	r18, 0xFF	; 255
    2382:	3f ef       	ldi	r19, 0xFF	; 255
    while (len--)
    2384:	81 50       	subi	r24, 0x01	; 1
    2386:	c8 f0       	brcs	.+50     	; 0x23ba <crc16.constprop.15+0x3e>
        crc = _crc16_update(crc, *(buf++));
    2388:	91 91       	ld	r25, Z+
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    238a:	29 27       	eor	r18, r25
    238c:	92 2f       	mov	r25, r18
    238e:	92 95       	swap	r25
    2390:	92 27       	eor	r25, r18
    2392:	09 2e       	mov	r0, r25
    2394:	96 95       	lsr	r25
    2396:	96 95       	lsr	r25
    2398:	90 25       	eor	r25, r0
    239a:	09 2e       	mov	r0, r25
    239c:	96 95       	lsr	r25
    239e:	90 25       	eor	r25, r0
    23a0:	97 70       	andi	r25, 0x07	; 7
    23a2:	02 2e       	mov	r0, r18
    23a4:	23 2f       	mov	r18, r19
    23a6:	96 95       	lsr	r25
    23a8:	07 94       	ror	r0
    23aa:	97 95       	ror	r25
    23ac:	30 2d       	mov	r19, r0
    23ae:	29 27       	eor	r18, r25
    23b0:	06 94       	lsr	r0
    23b2:	97 95       	ror	r25
    23b4:	30 25       	eor	r19, r0
    23b6:	29 27       	eor	r18, r25
    23b8:	e5 cf       	rjmp	.-54     	; 0x2384 <crc16.constprop.15+0x8>
    return crc;
}
    23ba:	c9 01       	movw	r24, r18
    23bc:	08 95       	ret

000023be <StartModbusTimer0>:
    /* Disable timer */
    TCCR2B = 0x00;
}

static inline void StartModbusTimer0() {
    TCCR2A = 0x00;
    23be:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    /* Prescaler = 128 */
    TCCR2B = (1 << CS20) | (1 << CS22);
    23c2:	85 e0       	ldi	r24, 0x05	; 5
    23c4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    //Запуск таймера
    TCNT2 = 0;
    23c8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    23cc:	08 95       	ret

000023ce <fb_put_str_redraw.constprop.18>:
 * Write string into framebuffer and perform partial LCD redraw
 * @param str PGM_P string (left-aligned)
 * @param row framebuffer row (0..7)
 */
static void fb_put_str_redraw(PGM_P str, uint8_t row) {
    fb_put_str(row, str);
    23ce:	bc 01       	movw	r22, r24
    23d0:	85 e0       	ldi	r24, 0x05	; 5
    redraw_partial(row);
    23d2:	82 da       	rcall	.-2812   	; 0x18d8 <fb_put_str.lto_priv.20>
    23d4:	85 e0       	ldi	r24, 0x05	; 5
    23d6:	27 cb       	rjmp	.-2482   	; 0x1a26 <redraw_partial.lto_priv.21>
static volatile uint8_t * volatile pBuf0;
static volatile uint8_t BufferSize0 = 0;
static volatile uint8_t state0 = State_IDLE;

static void rx_disable() {
    UCSR0B &= ~(1 << RXEN0);
    23d8:	08 95       	ret

000023da <MBSerialSend.constprop.14>:
    23da:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    23de:	9f 7e       	andi	r25, 0xEF	; 239
    23e0:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    if (use_rs485) rs485_tx_enable();
    23e4:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <use_rs485>
    23e8:	99 23       	and	r25, r25
static inline void pullup_enable() {
    PULLUP_PORT &= ~(1 << PULLUP_PIN);
}

static inline void rs485_tx_enable() {
    RS485_RE_PORT |= (1 << RS485_RE_PIN);
    23ea:	11 f0       	breq	.+4      	; 0x23f0 <MBSerialSend.constprop.14+0x16>
    RS485_DE_PORT |= (1 << RS485_DE_PIN);
    23ec:	42 9a       	sbi	0x08, 2	; 8
        size = 2;
    }
    rx_disable();

    //DataBuffer0[0] = MBClientGetHostID0(); //первый эл-т буфера - номер хоста
    DataBuffer0[0] = id;
    23ee:	43 9a       	sbi	0x08, 3	; 8

    //дописываем CRC
    crc = crc16(DataBuffer0, size + 1, 0xFFFF);
    23f0:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DataBuffer0>
    23f4:	86 e0       	ldi	r24, 0x06	; 6
    DataBuffer0[size + 1] = (unsigned char) (crc & 0xFF);
    23f6:	c2 df       	rcall	.-124    	; 0x237c <crc16.constprop.15>
    23f8:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <DataBuffer0+0x6>
    DataBuffer0[size + 2] = (unsigned char) (crc >> 8);
    23fc:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <DataBuffer0+0x7>
    //Настраиваем указатель(используется в обработчике прерывания UART) на буфер 
    pBuf0 = DataBuffer0;
    2400:	8f e4       	ldi	r24, 0x4F	; 79
    2402:	92 e0       	ldi	r25, 0x02	; 2
    2404:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <pBuf0+0x1>
    2408:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <pBuf0>
    BufferSize0 = size + 3; //размер посылаемого пакета размер данных+1(адрес)+2(CRC)
    240c:	88 e0       	ldi	r24, 0x08	; 8
    240e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <BufferSize0>
    UCR0 |= (1 << UDRIE0); //разрешение прерывания     
    2412:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <pUDR0>
    2416:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <pUDR0+0x1>
    241a:	35 97       	sbiw	r30, 0x05	; 5
    241c:	80 81       	ld	r24, Z
    241e:	80 62       	ori	r24, 0x20	; 32
    while (!(UCSR0B & (1 << RXEN0))); //пока не очистится буфер.
    2420:	80 83       	st	Z, r24
    2422:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2426:	84 ff       	sbrs	r24, 4
}
    2428:	fc cf       	rjmp	.-8      	; 0x2422 <MBSerialSend.constprop.14+0x48>
    fb_clear_line(row);
    strcpy_P(framebuffer[row], tag);
    memcpy(&framebuffer[row][FRAME_LENGTH - strlen(v)], v, strlen(v));
}

static void fb_put_tag_at(uint8_t row, uint8_t col, PGM_P tag, uint16_t value) {
    242a:	08 95       	ret

0000242c <fb_put_tag_at.constprop.11>:
    242c:	ab e0       	ldi	r26, 0x0B	; 11
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	ec e1       	ldi	r30, 0x1C	; 28
    2432:	f2 e1       	ldi	r31, 0x12	; 18
    2434:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__prologue_saves__+0x10>
    2438:	18 2f       	mov	r17, r24
    243a:	6b 01       	movw	r12, r22
    243c:	ba 01       	movw	r22, r20
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	2a e0       	ldi	r18, 0x0A	; 10
    2444:	ae 01       	movw	r20, r28
    2446:	4f 5f       	subi	r20, 0xFF	; 255
    2448:	5f 4f       	sbci	r21, 0xFF	; 255
    char v[11];
    ultoa(value, v, 10);
    fb_clear_line(row);
    244a:	7a 01       	movw	r14, r20
    244c:	f1 d7       	rcall	.+4066   	; 0x3430 <__ultoa_ncheck>
    244e:	81 2f       	mov	r24, r17
    char *dest = strcpy_P(&framebuffer[row][col], tag);
    2450:	30 da       	rcall	.-2976   	; 0x18b2 <fb_clear_line.lto_priv.22>
    2452:	56 e1       	ldi	r21, 0x16	; 22
    2454:	15 9f       	mul	r17, r21
    2456:	c0 01       	movw	r24, r0
    2458:	11 24       	eor	r1, r1
    245a:	b6 01       	movw	r22, r12
    245c:	88 55       	subi	r24, 0x58	; 88
    245e:	9e 4f       	sbci	r25, 0xFE	; 254
    2460:	b8 d7       	rcall	.+3952   	; 0x33d2 <strcpy_P>
    //if (strlen(v) + strlen_P(tag) + col % 5 >= FRAME_LENGTH) return;
    memcpy(dest + strlen_P(tag), v, strlen(v));
    2462:	5c 01       	movw	r10, r24
    2464:	f7 01       	movw	r30, r14
    2466:	01 90       	ld	r0, Z+
    2468:	00 20       	and	r0, r0
    246a:	e9 f7       	brne	.-6      	; 0x2466 <fb_put_tag_at.constprop.11+0x3a>
    246c:	31 97       	sbiw	r30, 0x01	; 1
    246e:	8f 01       	movw	r16, r30
    2470:	0e 19       	sub	r16, r14
    2472:	1f 09       	sbc	r17, r15
    2474:	c6 01       	movw	r24, r12
    2476:	b4 d7       	rcall	.+3944   	; 0x33e0 <__strlen_P>
    2478:	a8 01       	movw	r20, r16
    247a:	b7 01       	movw	r22, r14
    247c:	8a 0d       	add	r24, r10
    247e:	9b 1d       	adc	r25, r11
    2480:	0e 94 5f 1c 	call	0x38be	; 0x38be <memcpy>
}
    2484:	2b 96       	adiw	r28, 0x0b	; 11
    2486:	ea e0       	ldi	r30, 0x0A	; 10
    2488:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__epilogue_restores__+0x10>

0000248c <GetInpRegsUSHORT.constprop.10>:
    return modbus_ok(TrustSize, id);
}

uint16_t GetInpRegsUSHORT(uint8_t index) {
    uint16_t hi;
    hi = Buf_data[3 + index * 2] << 8;
    248c:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <Buf_data.lto_priv.53>
    2490:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <Buf_data.lto_priv.53+0x1>
    return (uint16_t) (hi + Buf_data[ 4 + index * 2 ]);
    2494:	83 81       	ldd	r24, Z+3	; 0x03
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	98 2f       	mov	r25, r24
    249a:	88 27       	eor	r24, r24
}
    249c:	24 81       	ldd	r18, Z+4	; 0x04
    249e:	82 0f       	add	r24, r18
    24a0:	91 1d       	adc	r25, r1
    memrevercy(in_data, 4);
    memcpy(in_reg, in_data, 4);
    return in_reg[0];
}

static void memrevercy(uint8_t *data, uint8_t count) {
    24a2:	08 95       	ret

000024a4 <memrevercy.constprop.9>:
    uint8_t i;
    uint8_t temp;
    for (i = 0; i < count / 2; i++) {
        temp = data[i];
    24a4:	fc 01       	movw	r30, r24
        data[i] = data[count - i - 1];
    24a6:	80 81       	ld	r24, Z
    24a8:	93 81       	ldd	r25, Z+3	; 0x03
        data[count - i - 1] = temp;
    24aa:	90 83       	st	Z, r25

static void memrevercy(uint8_t *data, uint8_t count) {
    uint8_t i;
    uint8_t temp;
    for (i = 0; i < count / 2; i++) {
        temp = data[i];
    24ac:	83 83       	std	Z+3, r24	; 0x03
        data[i] = data[count - i - 1];
    24ae:	81 81       	ldd	r24, Z+1	; 0x01
    24b0:	92 81       	ldd	r25, Z+2	; 0x02
        data[count - i - 1] = temp;
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	82 83       	std	Z+2, r24	; 0x02
    uint16_t hi;
    hi = Buf_data[3 + index * 2] << 8;
    return (uint16_t) (hi + Buf_data[ 4 + index * 2 ]);
}

float GetInpRegsFLOAT(uint8_t index) {
    24b6:	08 95       	ret

000024b8 <GetInpRegsFLOAT.constprop.8>:
    24b8:	a4 e0       	ldi	r26, 0x04	; 4
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e2 e6       	ldi	r30, 0x62	; 98
    24be:	f2 e1       	ldi	r31, 0x12	; 18
    24c0:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__prologue_saves__+0x20>
    float in_reg[1];
    uint8_t in_data[4];
    memcpy((uint8_t *) in_data, (uint8_t *) (&Buf_data[3 + index * 2]), 4);
    24c4:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <Buf_data.lto_priv.53>
    24c8:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <Buf_data.lto_priv.53+0x1>
    24cc:	83 81       	ldd	r24, Z+3	; 0x03
    24ce:	94 81       	ldd	r25, Z+4	; 0x04
    24d0:	a5 81       	ldd	r26, Z+5	; 0x05
    24d2:	b6 81       	ldd	r27, Z+6	; 0x06
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    memrevercy(in_data, 4);
    24d8:	ab 83       	std	Y+3, r26	; 0x03
    24da:	bc 83       	std	Y+4, r27	; 0x04
    24dc:	ce 01       	movw	r24, r28
    24de:	01 96       	adiw	r24, 0x01	; 1
    memcpy(in_reg, in_data, 4);
    24e0:	e1 df       	rcall	.-62     	; 0x24a4 <memrevercy.constprop.9>
    24e2:	69 81       	ldd	r22, Y+1	; 0x01
    24e4:	7a 81       	ldd	r23, Y+2	; 0x02
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    return in_reg[0];
}
    24e8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ea:	24 96       	adiw	r28, 0x04	; 4
    24ec:	e2 e0       	ldi	r30, 0x02	; 2
    24ee:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__epilogue_restores__+0x20>

000024f2 <fb_put_u8.constprop.4>:
static void fb_clear_line(uint8_t l) {
    for (uint8_t i = 0; i < FRAME_LENGTH; i++)
        framebuffer[l][i] = ' ';
}

static void fb_put_u8(uint8_t i, uint8_t row, uint8_t col) {
    24f2:	a4 e0       	ldi	r26, 0x04	; 4
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	ef e7       	ldi	r30, 0x7F	; 127
    24f8:	f2 e1       	ldi	r31, 0x12	; 18
    24fa:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x1c>
    char c[4];
    uint8_t ofs = 0;
    if (i < 10)
    24fe:	8a 30       	cpi	r24, 0x0A	; 10
        c[ofs++] = '0';
    2500:	20 f4       	brcc	.+8      	; 0x250a <fb_put_u8.constprop.4+0x18>
    2502:	90 e3       	ldi	r25, 0x30	; 48
    2504:	99 83       	std	Y+1, r25	; 0x01
    2506:	91 e0       	ldi	r25, 0x01	; 1
        framebuffer[l][i] = ' ';
}

static void fb_put_u8(uint8_t i, uint8_t row, uint8_t col) {
    char c[4];
    uint8_t ofs = 0;
    2508:	01 c0       	rjmp	.+2      	; 0x250c <fb_put_u8.constprop.4+0x1a>
    if (i < 10)
        c[ofs++] = '0';
    itoa(i, &c[ofs], 10);
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	8e 01       	movw	r16, r28
    250e:	0f 5f       	subi	r16, 0xFF	; 255
    2510:	1f 4f       	sbci	r17, 0xFF	; 255
    2512:	b8 01       	movw	r22, r16
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2514:	69 0f       	add	r22, r25
    2516:	71 1d       	adc	r23, r1
    2518:	4a e0       	ldi	r20, 0x0A	; 10
    251a:	90 e0       	ldi	r25, 0x00	; 0
    memcpy(&framebuffer[row][col], c, strlen(c));
    251c:	6a d7       	rcall	.+3796   	; 0x33f2 <__itoa_ncheck>
    251e:	f8 01       	movw	r30, r16
    2520:	01 90       	ld	r0, Z+
    2522:	00 20       	and	r0, r0
    2524:	e9 f7       	brne	.-6      	; 0x2520 <fb_put_u8.constprop.4+0x2e>
    2526:	31 97       	sbiw	r30, 0x01	; 1
    2528:	af 01       	movw	r20, r30
    252a:	40 1b       	sub	r20, r16
    252c:	51 0b       	sbc	r21, r17
    252e:	b8 01       	movw	r22, r16
    2530:	88 ee       	ldi	r24, 0xE8	; 232
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	0e 94 5f 1c 	call	0x38be	; 0x38be <memcpy>
}
    2538:	24 96       	adiw	r28, 0x04	; 4
    253a:	e4 e0       	ldi	r30, 0x04	; 4
    253c:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x1c>

00002540 <__vector_9>:
        UCR0 &= ~(1 << UDRIE0); /* disable UDRE interrupt */
        UCSR0B |= 1 << TXCIE0;
    }
}

ISR(TIMER2_OVF_vect) {
    2540:	1f 92       	push	r1
    2542:	0f 92       	push	r0
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	0f 92       	push	r0
    2548:	11 24       	eor	r1, r1
    /* Set TCNT2 to MAX value */
    TCNT2 = 255;
    254a:	8f 93       	push	r24
    254c:	8f ef       	ldi	r24, 0xFF	; 255
    254e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    /* Disable timer */
    TCCR2B = 0x00;
    2552:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
}
    2556:	8f 91       	pop	r24
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	0f 90       	pop	r0
    255e:	1f 90       	pop	r1
    UCSR0B &= ~(1 << TXCIE0);
    state0 = State_IDLE; //Установить состояние инициализации
    rx_enable();
}

ISR(USART_UDRE_vect) { /* written to FIFO */
    2560:	18 95       	reti

00002562 <__vector_19>:
    2562:	1f 92       	push	r1
    2564:	0f 92       	push	r0
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	0f 92       	push	r0
    256a:	11 24       	eor	r1, r1
    256c:	8f 93       	push	r24
    256e:	9f 93       	push	r25
    2570:	af 93       	push	r26
    2572:	bf 93       	push	r27
    2574:	ef 93       	push	r30
    *pUDR0 = *pBuf0; /* start transmission */
    2576:	ff 93       	push	r31
    2578:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <pUDR0>
    257c:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <pUDR0+0x1>
    2580:	a0 91 95 02 	lds	r26, 0x0295	; 0x800295 <pBuf0>
    2584:	b0 91 96 02 	lds	r27, 0x0296	; 0x800296 <pBuf0+0x1>
    2588:	8c 91       	ld	r24, X
    pBuf0++;
    258a:	80 83       	st	Z, r24
    258c:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <pBuf0>
    2590:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <pBuf0+0x1>
    2594:	01 96       	adiw	r24, 0x01	; 1
    2596:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <pBuf0+0x1>
    259a:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <pBuf0>
    BufferSize0--;
    259e:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <BufferSize0>
    25a2:	81 50       	subi	r24, 0x01	; 1
    25a4:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <BufferSize0>
    if (!BufferSize0) {
    25a8:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <BufferSize0>
    25ac:	81 11       	cpse	r24, r1
        UCSR0A |= 1 << TXC0;
    25ae:	12 c0       	rjmp	.+36     	; 0x25d4 <__vector_19+0x72>
    25b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    25b4:	80 64       	ori	r24, 0x40	; 64
    25b6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        UCR0 &= ~(1 << UDRIE0); /* disable UDRE interrupt */
    25ba:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <pUDR0>
    25be:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <pUDR0+0x1>
    25c2:	35 97       	sbiw	r30, 0x05	; 5
    25c4:	80 81       	ld	r24, Z
    25c6:	8f 7d       	andi	r24, 0xDF	; 223
        UCSR0B |= 1 << TXCIE0;
    25c8:	80 83       	st	Z, r24
    25ca:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    25ce:	80 64       	ori	r24, 0x40	; 64
    25d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    25d4:	ff 91       	pop	r31
    25d6:	ef 91       	pop	r30
    25d8:	bf 91       	pop	r27
    25da:	af 91       	pop	r26
    25dc:	9f 91       	pop	r25
    25de:	8f 91       	pop	r24
    25e0:	0f 90       	pop	r0
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	0f 90       	pop	r0
    25e6:	1f 90       	pop	r1
    DataBuffer0[ BufferSize0++ ] = temp; //считать полученные данные в буфер
    if (BufferSize0 >= MBCLIENT_MAX_LENGHT)//если размер буфера превысил максимальное значение
        state0 = State_IDLE; //перейти в состояние ожидания
}

ISR(USART_TX_vect) {
    25e8:	18 95       	reti

000025ea <__vector_20>:
    25ea:	1f 92       	push	r1
    25ec:	0f 92       	push	r0
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	0f 92       	push	r0
    25f2:	11 24       	eor	r1, r1
    UCSR0B &= ~(1 << TXCIE0);
    25f4:	8f 93       	push	r24
    25f6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    25fa:	8f 7b       	andi	r24, 0xBF	; 191
    25fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    state0 = State_IDLE; //Установить состояние инициализации
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state0>
    UCSR0B &= ~(1 << RXEN0);
    if (use_rs485) rs485_tx_enable();
}

static void rx_enable() {
    UCSR0B |= 1 << RXEN0;
    2606:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    260a:	80 61       	ori	r24, 0x10	; 16
    260c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    if (use_rs485) rs485_rx_enable();
    2610:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <use_rs485>
    2614:	88 23       	and	r24, r24
}

static inline void rs485_rx_enable() {
    RS485_RE_PORT &= ~(1 << RS485_RE_PIN);
    2616:	11 f0       	breq	.+4      	; 0x261c <__vector_20+0x32>
    RS485_DE_PORT &= ~(1 << RS485_DE_PIN);
    2618:	42 98       	cbi	0x08, 2	; 8

ISR(USART_TX_vect) {
    UCSR0B &= ~(1 << TXCIE0);
    state0 = State_IDLE; //Установить состояние инициализации
    rx_enable();
}
    261a:	43 98       	cbi	0x08, 3	; 8
    261c:	8f 91       	pop	r24
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	0f 90       	pop	r0
    2624:	1f 90       	pop	r1
}

/**
 * обработка прерывания приёма данных в UART
 */
ISR(USART_RX_vect) {
    2626:	18 95       	reti

00002628 <__vector_18>:
    2628:	1f 92       	push	r1
    262a:	0f 92       	push	r0
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	0f 92       	push	r0
    2630:	11 24       	eor	r1, r1
    2632:	2f 93       	push	r18
    2634:	3f 93       	push	r19
    2636:	4f 93       	push	r20
    2638:	5f 93       	push	r21
    263a:	6f 93       	push	r22
    263c:	7f 93       	push	r23
    263e:	8f 93       	push	r24
    2640:	9f 93       	push	r25
    2642:	af 93       	push	r26
    2644:	bf 93       	push	r27
    2646:	cf 93       	push	r28
    2648:	ef 93       	push	r30
    uint8_t temp = *pUDR0;
    264a:	ff 93       	push	r31
    264c:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <pUDR0>
    2650:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <pUDR0+0x1>
    // если мы обрабатываем ранее принятый пакет то ничего не делаем
    // кроме сброса таймера
    if (state0 == State_WAITING) {
    2654:	c0 81       	ld	r28, Z
    2656:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state0>
    265a:	85 30       	cpi	r24, 0x05	; 5
        StartModbusTimer0();
        return;
    }
    // Если состояние State_IDLE то возможно это начало нового пакета
    if (state0 == State_IDLE) {
    265c:	91 f0       	breq	.+36     	; 0x2682 <__vector_18+0x5a>
    265e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state0>
    2662:	81 30       	cpi	r24, 0x01	; 1
        // если не выдержана заданная протоколом пауза значит, значит данную последовательность мы не рассматриваем
        if (TCNT2 >= T35_Ticks) {
    2664:	39 f4       	brne	.+14     	; 0x2674 <__vector_18+0x4c>
    2666:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    266a:	8a 3c       	cpi	r24, 0xCA	; 202
            // выдержана пауза, збрасываем счетчик принятых байт, будем рассматривать это как начало нового пакета            
            BufferSize0 = 0;
    266c:	50 f0       	brcs	.+20     	; 0x2682 <__vector_18+0x5a>
    266e:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <BufferSize0>
        } else {
            StartModbusTimer0(); //запуск таймера
            return;
        }
    } else {
        if (TCNT2 >= T15_Ticks) {
    2672:	09 c0       	rjmp	.+18     	; 0x2686 <__vector_18+0x5e>
    2674:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
            state0 = State_IDLE;
    2678:	87 ff       	sbrs	r24, 7
    267a:	05 c0       	rjmp	.+10     	; 0x2686 <__vector_18+0x5e>
            StartModbusTimer0();
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state0>
            return;
        }
    }
    StartModbusTimer0(); //запуск таймера
    2682:	9d de       	rcall	.-710    	; 0x23be <StartModbusTimer0>
    2684:	1b c0       	rjmp	.+54     	; 0x26bc <__vector_18+0x94>
    if (BufferSize0 == 0) {
    2686:	9b de       	rcall	.-714    	; 0x23be <StartModbusTimer0>
    2688:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <BufferSize0>
    268c:	81 11       	cpse	r24, r1
        // первый байт пакета должен иметь определенное значение, если он его не имеет
        // то рассматривать данный пакет дальше не имеет смысла
        //        if (/*temp == MBClientGetHostID0() ||*/ temp == 0 || temp == 0xFF || temp == TEMP_HOST_ID
        //                /*|| temp == OMNICOMM_MASTER_PREFIX || temp == OMNICOMM_OLD_PREFIX*/) {
        if (temp != 0) {
    268e:	05 c0       	rjmp	.+10     	; 0x269a <__vector_18+0x72>
    2690:	cc 23       	and	r28, r28
            state0 = State_RECEIVING; //Перейти в состояние приёма
    2692:	a1 f0       	breq	.+40     	; 0x26bc <__vector_18+0x94>
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state0>
        } else {
            return;
        }
    }
    DataBuffer0[ BufferSize0++ ] = temp; //считать полученные данные в буфер
    269a:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <BufferSize0>
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	8e 0f       	add	r24, r30
    26a2:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <BufferSize0>
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	e1 5b       	subi	r30, 0xB1	; 177
    26aa:	fd 4f       	sbci	r31, 0xFD	; 253
    if (BufferSize0 >= MBCLIENT_MAX_LENGHT)//если размер буфера превысил максимальное значение
    26ac:	c0 83       	st	Z, r28
    26ae:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <BufferSize0>
    26b2:	80 34       	cpi	r24, 0x40	; 64
        state0 = State_IDLE; //перейти в состояние ожидания
    26b4:	18 f0       	brcs	.+6      	; 0x26bc <__vector_18+0x94>
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state0>
}
    26bc:	ff 91       	pop	r31
    26be:	ef 91       	pop	r30
    26c0:	cf 91       	pop	r28
    26c2:	bf 91       	pop	r27
    26c4:	af 91       	pop	r26
    26c6:	9f 91       	pop	r25
    26c8:	8f 91       	pop	r24
    26ca:	7f 91       	pop	r23
    26cc:	6f 91       	pop	r22
    26ce:	5f 91       	pop	r21
    26d0:	4f 91       	pop	r20
    26d2:	3f 91       	pop	r19
    26d4:	2f 91       	pop	r18
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	0f 90       	pop	r0
    26dc:	1f 90       	pop	r1
    req->value_lo = (uint8_t) reg;

    MBSerialSend(sizeof (WRITE_SINGLE_REGISTER_REQ), id);
}

static uint8_t modbus_ok(uint16_t TrustSize, uint8_t id) {
    26de:	18 95       	reti

000026e0 <modbus_ok.lto_priv.75>:
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    UCR0 |= (1 << UDRIE0); //разрешение прерывания     
    while (!(UCSR0B & (1 << RXEN0))); //пока не очистится буфер.
}

uint8_t UartReceivePacket(void) {
    if (state0 == State_RECEIVING && TCNT2 >= T35_Ticks) {
    26e4:	df 93       	push	r29
    26e6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <state0>
    26ea:	22 30       	cpi	r18, 0x02	; 2
    26ec:	69 f4       	brne	.+26     	; 0x2708 <modbus_ok.lto_priv.75+0x28>
    26ee:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    26f2:	2a 3c       	cpi	r18, 0xCA	; 202
        state0 = State_WAITING;
    26f4:	48 f0       	brcs	.+18     	; 0x2708 <modbus_ok.lto_priv.75+0x28>
    26f6:	25 e0       	ldi	r18, 0x05	; 5
    26f8:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <state0>
        return BufferSize0;
    26fc:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <BufferSize0>
    if (!UartReceivePacket())
    2700:	22 23       	and	r18, r18
    2702:	09 f4       	brne	.+2      	; 0x2706 <modbus_ok.lto_priv.75+0x26>
    2704:	4a c0       	rjmp	.+148    	; 0x279a <modbus_ok.lto_priv.75+0xba>
    }
    if (state0 == State_WAITING) {
    2706:	09 c0       	rjmp	.+18     	; 0x271a <modbus_ok.lto_priv.75+0x3a>
    2708:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state0>
    270c:	85 30       	cpi	r24, 0x05	; 5
    270e:	09 f0       	breq	.+2      	; 0x2712 <modbus_ok.lto_priv.75+0x32>
        state0 = State_IDLE;
    2710:	44 c0       	rjmp	.+136    	; 0x279a <modbus_ok.lto_priv.75+0xba>
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state0>
    2718:	40 c0       	rjmp	.+128    	; 0x279a <modbus_ok.lto_priv.75+0xba>
    271a:	16 2f       	mov	r17, r22
 * @param clientID
 * @return 
 */
uint8_t check_modbus_packet(unsigned char clientID) {
    //контроль размера полученных данных
    if (!((BufferSize0 < 4) || (BufferSize0 > MBCLIENT_MAX_LENGHT))) {
    271c:	ec 01       	movw	r28, r24
    271e:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <BufferSize0>
    2722:	84 30       	cpi	r24, 0x04	; 4
    2724:	e0 f1       	brcs	.+120    	; 0x279e <modbus_ok.lto_priv.75+0xbe>
    2726:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <BufferSize0>
    return crc;
}

uint8_t CheckCRC0() {
    //Проверяем, совпадает ли пришедшее CRC с вычисленным
    if (crc16(DataBuffer0, BufferSize0 - 2, 0xFFFF) != *(unsigned int *) (DataBuffer0 + BufferSize0 - 2))
    272a:	81 34       	cpi	r24, 0x41	; 65
    272c:	c0 f5       	brcc	.+112    	; 0x279e <modbus_ok.lto_priv.75+0xbe>
    272e:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <BufferSize0>
    2732:	82 50       	subi	r24, 0x02	; 2
    2734:	23 de       	rcall	.-954    	; 0x237c <crc16.constprop.15>
    2736:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <BufferSize0>
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	e3 5b       	subi	r30, 0xB3	; 179
    273e:	fd 4f       	sbci	r31, 0xFD	; 253
    2740:	20 81       	ld	r18, Z
    2742:	31 81       	ldd	r19, Z+1	; 0x01
    2744:	82 17       	cp	r24, r18
    2746:	93 07       	cpc	r25, r19
uint8_t check_modbus_packet(unsigned char clientID) {
    //контроль размера полученных данных
    if (!((BufferSize0 < 4) || (BufferSize0 > MBCLIENT_MAX_LENGHT))) {
        //проверяем CRC
        if (!CheckCRC0()) {
            CPT0[BUS_MSG_CNTR].i++;
    2748:	51 f5       	brne	.+84     	; 0x279e <modbus_ok.lto_priv.75+0xbe>
    274a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <CPT0+0x2>
    274e:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <CPT0+0x3>
    2752:	01 96       	adiw	r24, 0x01	; 1
    2754:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <CPT0+0x3>
    2758:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <CPT0+0x2>
            //проверяем, нам ли предназначен пакет
            /* Ignore if we haven't resolved id yet */
            if (clientID == 0 || (DataBuffer0[0] == clientID)) {
    275c:	11 23       	and	r17, r17
    275e:	21 f0       	breq	.+8      	; 0x2768 <modbus_ok.lto_priv.75+0x88>
    2760:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DataBuffer0>
    2764:	18 13       	cpse	r17, r24
                //если всё правильно возвращаем длину	        
                CPT0[SLAVE_MSG_CNTR].i++;
    2766:	24 c0       	rjmp	.+72     	; 0x27b0 <modbus_ok.lto_priv.75+0xd0>
    2768:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <CPT0+0x8>
    276c:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <CPT0+0x9>
    2770:	01 96       	adiw	r24, 0x01	; 1
    2772:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <CPT0+0x9>
    2776:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <CPT0+0x8>
                return (BufferSize0 - 3);
    277a:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <BufferSize0>
        return 0;

    uint8_t Size_R = check_modbus_packet(id);
    Buf_data = (Size_R) ? DataBuffer0 : 0;
    277e:	23 50       	subi	r18, 0x03	; 3
    2780:	c1 f0       	breq	.+48     	; 0x27b2 <modbus_ok.lto_priv.75+0xd2>
    2782:	8f e4       	ldi	r24, 0x4F	; 79
    2784:	92 e0       	ldi	r25, 0x02	; 2
    2786:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <Buf_data.lto_priv.53+0x1>
    278a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <Buf_data.lto_priv.53>
    MBSerialSend(sizeof (WRITE_SINGLE_REGISTER_REQ), id);
}

static uint8_t modbus_ok(uint16_t TrustSize, uint8_t id) {
    if (!UartReceivePacket())
        return 0;
    278e:	23 97       	sbiw	r28, 0x03	; 3
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	c2 17       	cp	r28, r18
    2796:	d3 07       	cpc	r29, r19
    2798:	79 f0       	breq	.+30     	; 0x27b8 <modbus_ok.lto_priv.75+0xd8>
    279a:	80 e0       	ldi	r24, 0x00	; 0
            }
        } else {
            CPT0[BUS_COM_ERR_CNTR].i++;
    279c:	0d c0       	rjmp	.+26     	; 0x27b8 <modbus_ok.lto_priv.75+0xd8>
    279e:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <CPT0+0x4>
    27a2:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <CPT0+0x5>
    27a6:	01 96       	adiw	r24, 0x01	; 1
    27a8:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <CPT0+0x5>
    27ac:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <CPT0+0x4>

    uint8_t Size_R = check_modbus_packet(id);
    Buf_data = (Size_R) ? DataBuffer0 : 0;
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0

    if ((TrustSize - 3) == Size_R) return 1;
    else return 0;
}
    27b6:	e7 cf       	rjmp	.-50     	; 0x2786 <modbus_ok.lto_priv.75+0xa6>
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
        capture_count = 0;
        TCNT1 = 0; // restart timer
    }
}

ISR(TIMER1_OVF_vect) {
    27be:	08 95       	ret

000027c0 <__vector_13>:
    27c0:	1f 92       	push	r1
    27c2:	0f 92       	push	r0
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	0f 92       	push	r0
    27c8:	11 24       	eor	r1, r1
    timer_ovf_count++;
    27ca:	8f 93       	push	r24
    27cc:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <timer_ovf_count>
    27d0:	8f 5f       	subi	r24, 0xFF	; 255
    27d2:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <timer_ovf_count>
    if (timer_ovf_count > 254) {
    27d6:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <timer_ovf_count>
    27da:	8f 3f       	cpi	r24, 0xFF	; 255
        result_timer_ovf_count = 0;
    27dc:	41 f4       	brne	.+16     	; 0x27ee <__vector_13+0x2e>
    27de:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <result_timer_ovf_count+0x1>
    27e2:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <result_timer_ovf_count>
        result_val = 0;
    27e6:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <result_val+0x1>
    27ea:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <result_val>
    }
}
    27ee:	8f 91       	pop	r24
    27f0:	0f 90       	pop	r0
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	0f 90       	pop	r0
    27f6:	1f 90       	pop	r1
    }
    result = F_CPU * 10 / result;
    return result;
}

ISR(TIMER1_CAPT_vect) {
    27f8:	18 95       	reti

000027fa <__vector_10>:
    27fa:	1f 92       	push	r1
    27fc:	0f 92       	push	r0
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	0f 92       	push	r0
    2802:	11 24       	eor	r1, r1
    2804:	2f 93       	push	r18
    2806:	3f 93       	push	r19
    2808:	8f 93       	push	r24
    uint16_t val = ICR1;
    280a:	9f 93       	push	r25
    280c:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    2810:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>

    if (capture_count++ >= MAX_FREQ_COUNTS) {
    2814:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <capture_count>
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	98 0f       	add	r25, r24
    281c:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <capture_count>
    2820:	80 34       	cpi	r24, 0x40	; 64
        result_val = val;
    2822:	98 f0       	brcs	.+38     	; 0x284a <__vector_10+0x50>
    2824:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <result_val+0x1>
    2828:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <result_val>
        result_timer_ovf_count = timer_ovf_count;
    282c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <timer_ovf_count>
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <result_timer_ovf_count+0x1>
    2836:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <result_timer_ovf_count>
        timer_ovf_count = 0;
    283a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <timer_ovf_count>
        capture_count = 0;
    283e:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <capture_count>
        TCNT1 = 0; // restart timer
    2842:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2846:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    }
}
    284a:	9f 91       	pop	r25
    284c:	8f 91       	pop	r24
    284e:	3f 91       	pop	r19
    2850:	2f 91       	pop	r18
    2852:	0f 90       	pop	r0
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	0f 90       	pop	r0
    2858:	1f 90       	pop	r1
    TIMSK2 &= ~(1 << OCIE2A);
}

ISR(TIMER2_COMPA_vect, ISR_NAKED) {
    /* Toggle output pin */
    PWM_OUT_PIN_REG |= 1 << PWM_OUT_PIN;
    285a:	18 95       	reti

0000285c <__vector_7>:
    reti();
    285c:	1a 9a       	sbi	0x03, 2	; 3
    OCR2A = (F_CPU / (2 * 128 * (uint32_t) frequency)) - 1;
}

void soft_PWM_stop() {
    //PWM_OUT_DR |= 1 << PWM_OUT_PIN;
    PWM_OUT_PORT &= ~(1 << PWM_OUT_PIN);
    285e:	18 95       	reti

00002860 <soft_PWM_stop>:
    TCCR2A = 0;
    2860:	2a 98       	cbi	0x05, 2	; 5
    2862:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    TCCR2B = 0;
    TIMSK2 &= ~(1 << OCIE2A);
    2866:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    286a:	e0 e7       	ldi	r30, 0x70	; 112
    286c:	f0 e0       	ldi	r31, 0x00	; 0
void i2c_disable() {
    TWCR &= ~((1 << TWSTO) | (1 << TWEN));
}

void i2c_start() {
    TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    286e:	80 81       	ld	r24, Z
    2870:	8d 7f       	andi	r24, 0xFD	; 253
    LCD_close();
}

void LCD_open() {
    i2c_start();
    i2c_write(LCD_ADDR_DATA);
    2872:	80 83       	st	Z, r24
    i2c_busy_wait();
    2874:	08 95       	ret

00002876 <LCD_open>:
    2876:	84 ea       	ldi	r24, 0xA4	; 164
    LCD_set_column(col);
}

void LCD_clear(void) {
    i2c_start();
    i2c_write(LCD_ADDR_CMD);
    2878:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    /* Page 0 */
    i2c_write(0b10110000);
    287c:	8a d2       	rcall	.+1300   	; 0x2d92 <i2c_busy_wait.lto_priv.23>
    287e:	82 e7       	ldi	r24, 0x72	; 114
    /* Column 0 */
    i2c_write(0b00000000);
    2880:	a8 c2       	rjmp	.+1360   	; 0x2dd2 <i2c_write>
    2882:	08 95       	ret

00002884 <LCD_clear>:
    2884:	cf 93       	push	r28
    i2c_write(0b00010000);
    2886:	df 93       	push	r29
    2888:	84 ea       	ldi	r24, 0xA4	; 164
    288a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    i2c_stop();
    288e:	81 d2       	rcall	.+1282   	; 0x2d92 <i2c_busy_wait.lto_priv.23>

    LCD_open();
    2890:	80 e7       	ldi	r24, 0x70	; 112
    2892:	9f d2       	rcall	.+1342   	; 0x2dd2 <i2c_write>
    2894:	80 eb       	ldi	r24, 0xB0	; 176
    2896:	9d d2       	rcall	.+1338   	; 0x2dd2 <i2c_write>

    for (uint16_t i = 1056; i > 0; i--)
        i2c_write(0x00);
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	9b d2       	rcall	.+1334   	; 0x2dd2 <i2c_write>
    289c:	80 e1       	ldi	r24, 0x10	; 16
    i2c_write(0b00010000);
    i2c_stop();

    LCD_open();

    for (uint16_t i = 1056; i > 0; i--)
    289e:	99 d2       	rcall	.+1330   	; 0x2dd2 <i2c_write>
    i2c_start();
    i2c_write(LCD_ADDR_DATA);
}

void LCD_close() {
    i2c_stop();
    28a0:	70 d2       	rcall	.+1248   	; 0x2d82 <i2c_stop>
    28a2:	e9 df       	rcall	.-46     	; 0x2876 <LCD_open>

    for (uint16_t i = 1056; i > 0; i--)
        i2c_write(0x00);

    LCD_close();
}
    28a4:	c0 e2       	ldi	r28, 0x20	; 32
    28a6:	d4 e0       	ldi	r29, 0x04	; 4
    28a8:	80 e0       	ldi	r24, 0x00	; 0
static int _LCD_putchar(char c, FILE *stream) {
    LCD_putchar(c, false);
    return 0;
}

void LCD_putchar(uint8_t ch, bool inverse) {
    28aa:	93 d2       	rcall	.+1318   	; 0x2dd2 <i2c_write>
    28ac:	21 97       	sbiw	r28, 0x01	; 1
    28ae:	e1 f7       	brne	.-8      	; 0x28a8 <LCD_clear+0x24>
    28b0:	68 d2       	rcall	.+1232   	; 0x2d82 <i2c_stop>
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    //        return;
    //    }

    //символы и латинские буквы начинаются с позиции 0 в массиве
    //поэтомы позиция = код - 0x20
    if ((int) ch >= ' ' && (int) ch <= '~') {
    28b6:	08 95       	ret

000028b8 <LCD_putchar>:
    28b8:	ff 92       	push	r15
    28ba:	0f 93       	push	r16
void LCD_disable() {
    LCD_write_reg(UC1601S_DISABLE);
}

static uint8_t LCD_get_char_index(uint8_t ch) {
    uint8_t index = 0;
    28bc:	1f 93       	push	r17
}

void LCD_putchar(uint8_t ch, bool inverse) {
    uint8_t index = LCD_get_char_index(ch);

    LCD_open();
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29

    for (uint8_t i = 0; i < 5; i++) {
        uint8_t buffer = pgm_read_word(&(font[index * 5 + i]));
    28c2:	f6 2e       	mov	r15, r22
    28c4:	c0 ee       	ldi	r28, 0xE0	; 224
    28c6:	c8 0f       	add	r28, r24
    28c8:	cf 35       	cpi	r28, 0x5F	; 95
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <LCD_putchar+0x16>
    28cc:	c0 e0       	ldi	r28, 0x00	; 0
    28ce:	d3 df       	rcall	.-90     	; 0x2876 <LCD_open>
    28d0:	85 e0       	ldi	r24, 0x05	; 5
    28d2:	c8 9f       	mul	r28, r24
        i2c_write(inverse ? ~buffer : buffer);
    28d4:	e0 01       	movw	r28, r0
    28d6:	11 24       	eor	r1, r1
    28d8:	00 e0       	ldi	r16, 0x00	; 0
    28da:	10 e0       	ldi	r17, 0x00	; 0
    28dc:	fe 01       	movw	r30, r28
void LCD_putchar(uint8_t ch, bool inverse) {
    uint8_t index = LCD_get_char_index(ch);

    LCD_open();

    for (uint8_t i = 0; i < 5; i++) {
    28de:	e0 0f       	add	r30, r16
        uint8_t buffer = pgm_read_word(&(font[index * 5 + i]));
        i2c_write(inverse ? ~buffer : buffer);
    }

    i2c_write(inverse ? ~0x00 : 0x00);
    28e0:	f1 1f       	adc	r31, r17
    28e2:	eb 5b       	subi	r30, 0xBB	; 187
    i2c_start();
    i2c_write(LCD_ADDR_DATA);
}

void LCD_close() {
    i2c_stop();
    28e4:	fe 4f       	sbci	r31, 0xFE	; 254
    28e6:	85 91       	lpm	r24, Z+
    }

    i2c_write(inverse ? ~0x00 : 0x00);

    LCD_close();
}
    28e8:	94 91       	lpm	r25, Z
    28ea:	f1 10       	cpse	r15, r1
    28ec:	80 95       	com	r24
    28ee:	71 d2       	rcall	.+1250   	; 0x2dd2 <i2c_write>
    return index;
}

/* Used for printf */
static int _LCD_putchar(char c, FILE *stream) {
    LCD_putchar(c, false);
    28f0:	0f 5f       	subi	r16, 0xFF	; 255
    return 0;
}
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
static void LCD_set_column(uint8_t Column);

static int _LCD_putchar(char c, FILE *stream);
static FILE LCD_stdout = FDEV_SETUP_STREAM(_LCD_putchar, NULL, _FDEV_SETUP_WRITE);

static void LCD_write_reg(uint8_t reg) {
    28f4:	05 30       	cpi	r16, 0x05	; 5
void i2c_disable() {
    TWCR &= ~((1 << TWSTO) | (1 << TWEN));
}

void i2c_start() {
    TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    28f6:	11 05       	cpc	r17, r1
    28f8:	89 f7       	brne	.-30     	; 0x28dc <LCD_putchar+0x24>
    i2c_start();
    i2c_write(LCD_ADDR_CMD);
    28fa:	8f 2d       	mov	r24, r15
    28fc:	81 95       	neg	r24
    28fe:	69 d2       	rcall	.+1234   	; 0x2dd2 <i2c_write>
    i2c_write(reg);
    2900:	40 d2       	rcall	.+1152   	; 0x2d82 <i2c_stop>
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    i2c_stop();
    2906:	e5 e0       	ldi	r30, 0x05	; 5
    2908:	cc c7       	rjmp	.+3992   	; 0x38a2 <__epilogue_restores__+0x1a>

0000290a <_LCD_putchar.lto_priv.38>:
}
    290a:	60 e0       	ldi	r22, 0x00	; 0

static void LCD_set_row(uint8_t Row) {
    LCD_write_reg(UC1601S_ROW | Row);
}

void LCD_goto(uint8_t row, uint8_t col) {
    290c:	d5 df       	rcall	.-86     	; 0x28b8 <LCD_putchar>
    i2c_write((Column >> 4) | UC1601S_CLMN_MSB);
    i2c_stop();
}

static void LCD_set_row(uint8_t Row) {
    LCD_write_reg(UC1601S_ROW | Row);
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	08 95       	ret

00002914 <LCD_write_reg.lto_priv.41>:
    2914:	cf 93       	push	r28
    2916:	c8 2f       	mov	r28, r24
    i2c_busy_wait();
    2918:	84 ea       	ldi	r24, 0xA4	; 164
    291a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    LCD_write_reg(UC1601S_INVERSE + mode);
}

static void LCD_set_column(uint8_t Column) {
    i2c_start();
    i2c_write(LCD_ADDR_CMD);
    291e:	39 d2       	rcall	.+1138   	; 0x2d92 <i2c_busy_wait.lto_priv.23>
    2920:	80 e7       	ldi	r24, 0x70	; 112
    i2c_write(UC1601S_CLMN_LSB & Column);
    2922:	57 d2       	rcall	.+1198   	; 0x2dd2 <i2c_write>
    2924:	8c 2f       	mov	r24, r28
    2926:	55 d2       	rcall	.+1194   	; 0x2dd2 <i2c_write>
    i2c_write((Column >> 4) | UC1601S_CLMN_MSB);
    2928:	2c d2       	rcall	.+1112   	; 0x2d82 <i2c_stop>
    292a:	cf 91       	pop	r28
    292c:	08 95       	ret

0000292e <LCD_goto>:
    292e:	cf 93       	push	r28
    2930:	c6 2f       	mov	r28, r22
    i2c_stop();
    2932:	80 6b       	ori	r24, 0xB0	; 176
}

void LCD_goto(uint8_t row, uint8_t col) {
    LCD_set_row(row);
    LCD_set_column(col);
}
    2934:	ef df       	rcall	.-34     	; 0x2914 <LCD_write_reg.lto_priv.41>
    2936:	84 ea       	ldi	r24, 0xA4	; 164

void LCD_close() {
    i2c_stop();
}

static void LCD_put_large_digit(uint8_t d, uint8_t row, uint8_t column) {
    2938:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    293c:	2a d2       	rcall	.+1108   	; 0x2d92 <i2c_busy_wait.lto_priv.23>
    293e:	80 e7       	ldi	r24, 0x70	; 112
    2940:	48 d2       	rcall	.+1168   	; 0x2dd2 <i2c_write>
    2942:	8c 2f       	mov	r24, r28
    LCD_goto(row, column);
    2944:	8f 70       	andi	r24, 0x0F	; 15
    2946:	45 d2       	rcall	.+1162   	; 0x2dd2 <i2c_write>

    const uint8_t *p = &font11x15[d * 11 * 2];
    2948:	8c 2f       	mov	r24, r28
    294a:	82 95       	swap	r24
    294c:	8f 70       	andi	r24, 0x0F	; 15
    294e:	80 61       	ori	r24, 0x10	; 16
    const uint8_t *end = p + 11;

    LCD_open();
    2950:	40 d2       	rcall	.+1152   	; 0x2dd2 <i2c_write>
    2952:	17 d2       	rcall	.+1070   	; 0x2d82 <i2c_stop>
    2954:	cf 91       	pop	r28
    while (p < end)
        i2c_write(pgm_read_word(p++));
    2956:	08 95       	ret

00002958 <LCD_put_large_digit.constprop.13>:
    2958:	ff 92       	push	r15
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	c8 2f       	mov	r28, r24
    2964:	f6 2e       	mov	r15, r22

    const uint8_t *p = &font11x15[d * 11 * 2];
    const uint8_t *end = p + 11;

    LCD_open();
    while (p < end)
    2966:	82 e0       	ldi	r24, 0x02	; 2
    2968:	e2 df       	rcall	.-60     	; 0x292e <LCD_goto>
    296a:	86 e1       	ldi	r24, 0x16	; 22
    i2c_start();
    i2c_write(LCD_ADDR_DATA);
}

void LCD_close() {
    i2c_stop();
    296c:	c8 9f       	mul	r28, r24
    296e:	e0 01       	movw	r28, r0
    LCD_open();
    while (p < end)
        i2c_write(pgm_read_word(p++));
    LCD_close();

    LCD_goto(row + 1, column);
    2970:	11 24       	eor	r1, r1
    2972:	c0 5a       	subi	r28, 0xA0	; 160
    2974:	db 4f       	sbci	r29, 0xFB	; 251
    2976:	7f df       	rcall	.-258    	; 0x2876 <LCD_open>
    end += 11;
    2978:	00 e0       	ldi	r16, 0x00	; 0
    297a:	10 e0       	ldi	r17, 0x00	; 0
    297c:	fe 01       	movw	r30, r28

    LCD_open();
    297e:	e0 0f       	add	r30, r16
    2980:	f1 1f       	adc	r31, r17
    2982:	85 91       	lpm	r24, Z+

    while (p < end)
    2984:	94 91       	lpm	r25, Z
    2986:	25 d2       	rcall	.+1098   	; 0x2dd2 <i2c_write>
    2988:	0f 5f       	subi	r16, 0xFF	; 255
        i2c_write(pgm_read_word(p++));
    298a:	1f 4f       	sbci	r17, 0xFF	; 255
    298c:	0b 30       	cpi	r16, 0x0B	; 11
    298e:	11 05       	cpc	r17, r1
    2990:	a9 f7       	brne	.-22     	; 0x297c <LCD_put_large_digit.constprop.13+0x24>
    2992:	f7 d1       	rcall	.+1006   	; 0x2d82 <i2c_stop>
    2994:	6f 2d       	mov	r22, r15
    i2c_start();
    i2c_write(LCD_ADDR_DATA);
}

void LCD_close() {
    i2c_stop();
    2996:	83 e0       	ldi	r24, 0x03	; 3
    2998:	ca df       	rcall	.-108    	; 0x292e <LCD_goto>
    LCD_open();

    while (p < end)
        i2c_write(pgm_read_word(p++));
    LCD_close();
}
    299a:	8e 01       	movw	r16, r28
    299c:	0a 5e       	subi	r16, 0xEA	; 234
    299e:	1f 4f       	sbci	r17, 0xFF	; 255
    29a0:	6a df       	rcall	.-300    	; 0x2876 <LCD_open>
    29a2:	2b 96       	adiw	r28, 0x0b	; 11
    uint8_t pos = LCD_put_large_int(n, dec, 3, row, column, true);
    /* Place 'V' */
    LCD_put_large_digit(13, row, pos += 11);
}

uint8_t LCD_put_large_int(uint32_t n, uint8_t dec, uint8_t min_sz, uint8_t row, uint8_t column, bool align_right) {
    29a4:	c0 17       	cp	r28, r16
    29a6:	d1 07       	cpc	r29, r17
    29a8:	30 f4       	brcc	.+12     	; 0x29b6 <LCD_put_large_digit.constprop.13+0x5e>
    29aa:	fe 01       	movw	r30, r28
    29ac:	85 91       	lpm	r24, Z+
    29ae:	94 91       	lpm	r25, Z
    29b0:	10 d2       	rcall	.+1056   	; 0x2dd2 <i2c_write>
    29b2:	21 96       	adiw	r28, 0x01	; 1
    int8_t idx = 0;

    uint8_t buf[6] = {0};
    29b4:	f7 cf       	rjmp	.-18     	; 0x29a4 <LCD_put_large_digit.constprop.13+0x4c>
    29b6:	e5 d1       	rcall	.+970    	; 0x2d82 <i2c_stop>
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	e5 e0       	ldi	r30, 0x05	; 5
    29be:	71 c7       	rjmp	.+3810   	; 0x38a2 <__epilogue_restores__+0x1a>

000029c0 <LCD_put_large_int.constprop.12>:
    29c0:	a6 e0       	ldi	r26, 0x06	; 6
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e5 ee       	ldi	r30, 0xE5	; 229

    if (n == 0) idx = dec + 1;
    29c6:	f4 e1       	ldi	r31, 0x14	; 20
    29c8:	4b c7       	rjmp	.+3734   	; 0x3860 <__prologue_saves__+0x10>
    29ca:	b4 2e       	mov	r11, r20
    29cc:	a2 2e       	mov	r10, r18
    29ce:	9e 01       	movw	r18, r28
    29d0:	2f 5f       	subi	r18, 0xFF	; 255
    29d2:	3f 4f       	sbci	r19, 0xFF	; 255
    29d4:	79 01       	movw	r14, r18
    29d6:	26 e0       	ldi	r18, 0x06	; 6
    29d8:	f7 01       	movw	r30, r14
    29da:	11 92       	st	Z+, r1

    /* Extract digits (slow) */
    while (n > 0) {
        buf[idx++] = n % 10;
    29dc:	2a 95       	dec	r18
    29de:	e9 f7       	brne	.-6      	; 0x29da <LCD_put_large_int.constprop.12+0x1a>
    29e0:	61 15       	cp	r22, r1
    29e2:	71 05       	cpc	r23, r1
    29e4:	81 05       	cpc	r24, r1
    29e6:	91 05       	cpc	r25, r1
    29e8:	19 f4       	brne	.+6      	; 0x29f0 <LCD_put_large_int.constprop.12+0x30>
    29ea:	11 e0       	ldi	r17, 0x01	; 1
    29ec:	14 0f       	add	r17, r20
    uint8_t buf[6] = {0};

    if (n == 0) idx = dec + 1;

    /* Extract digits (slow) */
    while (n > 0) {
    29ee:	17 c0       	rjmp	.+46     	; 0x2a1e <LCD_put_large_int.constprop.12+0x5e>
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	11 e0       	ldi	r17, 0x01	; 1
    29f4:	12 0f       	add	r17, r18
        buf[idx++] = n % 10;
        n /= 10;
    };

    while (idx < min_sz)
    29f6:	67 01       	movw	r12, r14
    29f8:	c2 0e       	add	r12, r18
    29fa:	d1 1c       	adc	r13, r1
    29fc:	27 fd       	sbrc	r18, 7
    29fe:	da 94       	dec	r13
    2a00:	2a e0       	ldi	r18, 0x0A	; 10
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	50 e0       	ldi	r21, 0x00	; 0
        buf[idx++] = 0;
    2a08:	fb d6       	rcall	.+3574   	; 0x3800 <__udivmodsi4>
    2a0a:	f6 01       	movw	r30, r12
    2a0c:	60 83       	st	Z, r22
    2a0e:	b9 01       	movw	r22, r18
    2a10:	ca 01       	movw	r24, r20

    /* Align text */
    uint8_t pos = column;
    pos += (align_right) ? (6 - idx)*11 : 0;
    2a12:	21 2f       	mov	r18, r17
    2a14:	61 15       	cp	r22, r1
    2a16:	71 05       	cpc	r23, r1
    2a18:	81 05       	cpc	r24, r1
    2a1a:	91 05       	cpc	r25, r1
    2a1c:	51 f7       	brne	.-44     	; 0x29f2 <LCD_put_large_int.constprop.12+0x32>
    2a1e:	81 2f       	mov	r24, r17
    2a20:	01 2e       	mov	r0, r17
    2a22:	00 0c       	add	r0, r0

    /* @TODO: this should be a separate function */
    LCD_goto(row, 0);
    2a24:	99 0b       	sbc	r25, r25
    2a26:	2a 2d       	mov	r18, r10
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	82 17       	cp	r24, r18
    LCD_open();
    2a2c:	93 07       	cpc	r25, r19
    for (uint8_t i = 0; i < pos; i++)
    2a2e:	34 f4       	brge	.+12     	; 0x2a3c <LCD_put_large_int.constprop.12+0x7c>
    2a30:	1f 5f       	subi	r17, 0xFF	; 255
    2a32:	f7 01       	movw	r30, r14
        i2c_write(0x00);
    2a34:	e8 0f       	add	r30, r24
    2a36:	f9 1f       	adc	r31, r25
    2a38:	10 82       	st	Z, r1
    pos += (align_right) ? (6 - idx)*11 : 0;

    /* @TODO: this should be a separate function */
    LCD_goto(row, 0);
    LCD_open();
    for (uint8_t i = 0; i < pos; i++)
    2a3a:	f1 cf       	rjmp	.-30     	; 0x2a1e <LCD_put_large_int.constprop.12+0x5e>
    2a3c:	26 e0       	ldi	r18, 0x06	; 6
    i2c_start();
    i2c_write(LCD_ADDR_DATA);
}

void LCD_close() {
    i2c_stop();
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	a9 01       	movw	r20, r18
    LCD_open();
    for (uint8_t i = 0; i < pos; i++)
        i2c_write(0x00);
    LCD_close();

    LCD_goto(row + 1, 0);
    2a42:	48 1b       	sub	r20, r24
    2a44:	59 0b       	sbc	r21, r25
    2a46:	ca 01       	movw	r24, r20
    LCD_open();
    2a48:	5b e0       	ldi	r21, 0x0B	; 11
    2a4a:	85 9f       	mul	r24, r21
    for (uint8_t i = 0; i < pos; i++)
    2a4c:	00 0d       	add	r16, r0
    2a4e:	11 24       	eor	r1, r1
        i2c_write(0x00);
    2a50:	60 e0       	ldi	r22, 0x00	; 0
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	6c df       	rcall	.-296    	; 0x292e <LCD_goto>
        i2c_write(0x00);
    LCD_close();

    LCD_goto(row + 1, 0);
    LCD_open();
    for (uint8_t i = 0; i < pos; i++)
    2a56:	0f df       	rcall	.-482    	; 0x2876 <LCD_open>
    i2c_start();
    i2c_write(LCD_ADDR_DATA);
}

void LCD_close() {
    i2c_stop();
    2a58:	d1 2c       	mov	r13, r1
    2a5a:	0d 15       	cp	r16, r13
    2a5c:	21 f0       	breq	.+8      	; 0x2a66 <LCD_put_large_int.constprop.12+0xa6>
        i2c_write(0x00);
    LCD_close();
    /*********************************************/

    /* Place all digits preceding delimiter */
    while (idx-- > dec) {
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	b8 d1       	rcall	.+880    	; 0x2dd2 <i2c_write>
    2a62:	d3 94       	inc	r13
    2a64:	fa cf       	rjmp	.-12     	; 0x2a5a <LCD_put_large_int.constprop.12+0x9a>
    2a66:	8d d1       	rcall	.+794    	; 0x2d82 <i2c_stop>
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	83 e0       	ldi	r24, 0x03	; 3
        LCD_put_large_digit(buf[idx], row, pos);
    2a6c:	60 df       	rcall	.-320    	; 0x292e <LCD_goto>
    2a6e:	03 df       	rcall	.-506    	; 0x2876 <LCD_open>
    2a70:	d1 2c       	mov	r13, r1
    2a72:	0d 15       	cp	r16, r13
    2a74:	21 f0       	breq	.+8      	; 0x2a7e <LCD_put_large_int.constprop.12+0xbe>
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	ac d1       	rcall	.+856    	; 0x2dd2 <i2c_write>
    2a7a:	d3 94       	inc	r13
    2a7c:	fa cf       	rjmp	.-12     	; 0x2a72 <LCD_put_large_int.constprop.12+0xb2>
        pos += 11;
    2a7e:	81 d1       	rcall	.+770    	; 0x2d82 <i2c_stop>
        i2c_write(0x00);
    LCD_close();
    /*********************************************/

    /* Place all digits preceding delimiter */
    while (idx-- > dec) {
    2a80:	dd 24       	eor	r13, r13
    2a82:	da 94       	dec	r13
        LCD_put_large_digit(buf[idx], row, pos);
        pos += 11;
    }

    /* Place delimiter */
    if (dec) LCD_put_large_digit(10, row, pos);
    2a84:	d1 0e       	add	r13, r17
    2a86:	81 2f       	mov	r24, r17
    2a88:	01 2e       	mov	r0, r17
    2a8a:	00 0c       	add	r0, r0
    2a8c:	99 0b       	sbc	r25, r25
    2a8e:	2b 2d       	mov	r18, r11

    /* Place remaining digits */
    while (idx >= 0)
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	28 17       	cp	r18, r24
        LCD_put_large_digit(buf[idx--], row, pos += 11);
    2a94:	39 07       	cpc	r19, r25
    2a96:	5c f4       	brge	.+22     	; 0x2aae <LCD_put_large_int.constprop.12+0xee>
    2a98:	f7 01       	movw	r30, r14
    2a9a:	ed 0d       	add	r30, r13
    2a9c:	f1 1d       	adc	r31, r1
    2a9e:	d7 fc       	sbrc	r13, 7
    2aa0:	fa 95       	dec	r31
    2aa2:	60 2f       	mov	r22, r16
    2aa4:	80 81       	ld	r24, Z
    2aa6:	58 df       	rcall	.-336    	; 0x2958 <LCD_put_large_digit.constprop.13>
    2aa8:	05 5f       	subi	r16, 0xF5	; 245
    2aaa:	1d 2d       	mov	r17, r13
    2aac:	e9 cf       	rjmp	.-46     	; 0x2a80 <LCD_put_large_int.constprop.12+0xc0>

    return pos;
}
    2aae:	bb 20       	and	r11, r11
    2ab0:	19 f0       	breq	.+6      	; 0x2ab8 <LCD_put_large_int.constprop.12+0xf8>
    2ab2:	60 2f       	mov	r22, r16
    2ab4:	8a e0       	ldi	r24, 0x0A	; 10
    2ab6:	50 df       	rcall	.-352    	; 0x2958 <LCD_put_large_digit.constprop.13>
    while (p < end)
        i2c_write(pgm_read_word(p++));
    LCD_close();
}

void LCD_put_hz(uint32_t n, uint8_t dec, uint8_t row, uint8_t column) {
    2ab8:	d7 fc       	sbrc	r13, 7
    2aba:	0d c0       	rjmp	.+26     	; 0x2ad6 <LCD_put_large_int.constprop.12+0x116>
    uint8_t pos = LCD_put_large_int(n, dec, 1, row, column, true);
    2abc:	05 5f       	subi	r16, 0xF5	; 245
    2abe:	1f ef       	ldi	r17, 0xFF	; 255
    2ac0:	1d 0d       	add	r17, r13
    2ac2:	f7 01       	movw	r30, r14
    2ac4:	ed 0d       	add	r30, r13
    2ac6:	f1 1d       	adc	r31, r1
    /* Place 'Hz' */
    LCD_put_large_digit(11, row, pos += 11);
    2ac8:	d7 fc       	sbrc	r13, 7
    2aca:	fa 95       	dec	r31
    2acc:	60 2f       	mov	r22, r16
    2ace:	80 81       	ld	r24, Z
    2ad0:	43 df       	rcall	.-378    	; 0x2958 <LCD_put_large_digit.constprop.13>
    LCD_put_large_digit(12, row, pos += 11);
    2ad2:	d1 2e       	mov	r13, r17
    2ad4:	f1 cf       	rjmp	.-30     	; 0x2ab8 <LCD_put_large_int.constprop.12+0xf8>
    2ad6:	80 2f       	mov	r24, r16
    2ad8:	26 96       	adiw	r28, 0x06	; 6
    2ada:	ea e0       	ldi	r30, 0x0A	; 10
}
    2adc:	dd c6       	rjmp	.+3514   	; 0x3898 <__epilogue_restores__+0x10>

00002ade <LCD_put_hz.constprop.6>:
    2ade:	0f 93       	push	r16
    2ae0:	cf 93       	push	r28
#include <stdio.h>
#include <string.h>
#include <avr/interrupt.h>
#include "uart.h"

void UART_init(uint32_t baud) {
    2ae2:	0c e0       	ldi	r16, 0x0C	; 12
    2ae4:	21 e0       	ldi	r18, 0x01	; 1
    2ae6:	41 e0       	ldi	r20, 0x01	; 1
    2ae8:	6b df       	rcall	.-298    	; 0x29c0 <LCD_put_large_int.constprop.12>
    uint16_t baudrate = ((F_CPU + baud * 8L) / (baud * 16L) - 1);
    2aea:	c8 2f       	mov	r28, r24
    2aec:	6b e0       	ldi	r22, 0x0B	; 11
    2aee:	68 0f       	add	r22, r24
    2af0:	8b e0       	ldi	r24, 0x0B	; 11
    2af2:	32 df       	rcall	.-412    	; 0x2958 <LCD_put_large_digit.constprop.13>
    2af4:	66 e1       	ldi	r22, 0x16	; 22
    2af6:	6c 0f       	add	r22, r28
    2af8:	8c e0       	ldi	r24, 0x0C	; 12
    2afa:	2e df       	rcall	.-420    	; 0x2958 <LCD_put_large_digit.constprop.13>
    2afc:	cf 91       	pop	r28
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret

00002b02 <UART_init>:
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	8b 01       	movw	r16, r22
    2b08:	9c 01       	movw	r18, r24
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	90 5e       	subi	r25, 0xE0	; 224
    2b10:	a3 4e       	sbci	r26, 0xE3	; 227
    2b12:	bf 4f       	sbci	r27, 0xFF	; 255
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	43 e0       	ldi	r20, 0x03	; 3
    2b1a:	66 0f       	add	r22, r22
    2b1c:	77 1f       	adc	r23, r23
    2b1e:	88 1f       	adc	r24, r24

    UBRR0H = (baudrate >> 8);
    2b20:	99 1f       	adc	r25, r25
    2b22:	4a 95       	dec	r20
    UBRR0L = baudrate;
    2b24:	d1 f7       	brne	.-12     	; 0x2b1a <UART_init+0x18>
    2b26:	a9 01       	movw	r20, r18
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | /* Enable RX/TX lines */
    2b28:	98 01       	movw	r18, r16
    2b2a:	e4 e0       	ldi	r30, 0x04	; 4
    2b2c:	22 0f       	add	r18, r18
            (1 << RXCIE0); /* Enable interrupt on RX complete*/

    /* 8 data bits, 2 stop bits, no parity */
    //UCSR0C = (1 << USBS0) | (1 << UCSZ00) | (1 << UCSZ01);
}
    2b2e:	33 1f       	adc	r19, r19
    2b30:	44 1f       	adc	r20, r20
    2b32:	55 1f       	adc	r21, r21
    sei();
    return key_mask;
}

uint8_t get_key_rpt(uint8_t key_mask) {
    cli(); // read and clear atomic !
    2b34:	ea 95       	dec	r30
    key_mask &= key_rpt; // read key(s)
    2b36:	d1 f7       	brne	.-12     	; 0x2b2c <UART_init+0x2a>
    2b38:	63 d6       	rcall	.+3270   	; 0x3800 <__udivmodsi4>
    2b3a:	21 50       	subi	r18, 0x01	; 1
    key_rpt ^= key_mask; // clear key(s)
    2b3c:	31 09       	sbc	r19, r1
    2b3e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    2b42:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    sei();
    2b46:	88 e9       	ldi	r24, 0x98	; 152
    return key_mask;
}
    2b48:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}

uint8_t get_key_press(uint8_t key_mask) {
    cli(); // read and clear atomic !
    key_mask &= key_press; // read key(s)
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	08 95       	ret

00002b52 <get_key_rpt>:
    key_press ^= key_mask; // clear key(s)
    2b52:	f8 94       	cli
    2b54:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <key_rpt>
    2b58:	89 23       	and	r24, r25
    2b5a:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <key_rpt>
    sei();
    return key_mask;
}
    2b5e:	98 27       	eor	r25, r24
        OCR0A = 200;
        beeper_mode = BEEP_DOUBLE;
    }
}

ISR(TIMER0_OVF_vect) {
    2b60:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <key_rpt>
    2b64:	78 94       	sei
    2b66:	08 95       	ret

00002b68 <get_key_press>:
    2b68:	f8 94       	cli
    2b6a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <key_press.lto_priv.67>
    2b6e:	89 23       	and	r24, r25
    2b70:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <key_press.lto_priv.67>
    2b74:	98 27       	eor	r25, r24
    static uint16_t ctr = 0;
    if (beeper_mode == BEEP_SHORT) {
    2b76:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <key_press.lto_priv.67>
    2b7a:	78 94       	sei
    2b7c:	08 95       	ret

00002b7e <__vector_16>:
        if (ctr++ >= 512) {
    2b7e:	1f 92       	push	r1
    2b80:	0f 92       	push	r0
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	0f 92       	push	r0
    2b86:	11 24       	eor	r1, r1
    2b88:	2f 93       	push	r18
    2b8a:	3f 93       	push	r19
    2b8c:	4f 93       	push	r20
    2b8e:	5f 93       	push	r21
    2b90:	8f 93       	push	r24
    2b92:	9f 93       	push	r25
    2b94:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <beeper_mode.lto_priv.26>
            ctr = 0;
            beeper_mode = 0;

            TCCR0B = (1 << CS02) | (1 << CS00);
            TCCR0A = 0x00;
        } else if (ctr >= 128) {
    2b98:	81 30       	cpi	r24, 0x01	; 1
    2b9a:	c1 f4       	brne	.+48     	; 0x2bcc <__vector_16+0x4e>
    2b9c:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <ctr.1666>
            OCR0A = 32;
    2ba0:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <ctr.1666+0x1>
        } else if (ctr >= 64) {
    2ba4:	c9 01       	movw	r24, r18
    2ba6:	01 96       	adiw	r24, 0x01	; 1
    2ba8:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <ctr.1666+0x1>
            OCR0A = 64;
    2bac:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <ctr.1666>
        }
    } else if (beeper_mode == BEEP_DOUBLE) {
    2bb0:	21 15       	cp	r18, r1
        if (ctr++ >= 1024 * 4) {
    2bb2:	32 40       	sbci	r19, 0x02	; 2
    2bb4:	d0 f4       	brcc	.+52     	; 0x2bea <__vector_16+0x6c>
    2bb6:	80 38       	cpi	r24, 0x80	; 128
    2bb8:	91 05       	cpc	r25, r1
    2bba:	10 f0       	brcs	.+4      	; 0x2bc0 <__vector_16+0x42>
    2bbc:	80 e2       	ldi	r24, 0x20	; 32
    2bbe:	24 c0       	rjmp	.+72     	; 0x2c08 <__vector_16+0x8a>
    2bc0:	80 34       	cpi	r24, 0x40	; 64
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	08 f4       	brcc	.+2      	; 0x2bc8 <__vector_16+0x4a>
    2bc6:	bf c0       	rjmp	.+382    	; 0x2d46 <__vector_16+0x1c8>
    2bc8:	80 e4       	ldi	r24, 0x40	; 64
    2bca:	1e c0       	rjmp	.+60     	; 0x2c08 <__vector_16+0x8a>
            ctr = 0;
    2bcc:	82 30       	cpi	r24, 0x02	; 2
    2bce:	f1 f4       	brne	.+60     	; 0x2c0c <__vector_16+0x8e>
    2bd0:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <ctr.1666>
            beeper_mode = 0;
    2bd4:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <ctr.1666+0x1>

            TCCR0B = (1 << CS02) | (1 << CS00);
    2bd8:	c9 01       	movw	r24, r18
    2bda:	01 96       	adiw	r24, 0x01	; 1
            TCCR0A = 0x00;
    2bdc:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <ctr.1666+0x1>
        } else if (ctr >= 512) {
    2be0:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <ctr.1666>
    2be4:	21 15       	cp	r18, r1
    2be6:	30 41       	sbci	r19, 0x10	; 16
            OCR0A = 29;
    2be8:	50 f0       	brcs	.+20     	; 0x2bfe <__vector_16+0x80>
    2bea:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <ctr.1666+0x1>

/**
 * Timer callback function (executed every 10ms).
 */
static void timer0_callback() {
    if (TimerEvents.SleepScheduled)
    2bee:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <ctr.1666>
    2bf2:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <beeper_mode.lto_priv.26>
        sleep_counter = 0;
    2bf6:	85 e0       	ldi	r24, 0x05	; 5
    2bf8:	85 bd       	out	0x25, r24	; 37
    2bfa:	14 bc       	out	0x24, r1	; 36
    2bfc:	a4 c0       	rjmp	.+328    	; 0x2d46 <__vector_16+0x1c8>
    2bfe:	81 15       	cp	r24, r1
    else {
        sleep_counter++;
    2c00:	92 40       	sbci	r25, 0x02	; 2
    2c02:	08 f4       	brcc	.+2      	; 0x2c06 <__vector_16+0x88>
    2c04:	a0 c0       	rjmp	.+320    	; 0x2d46 <__vector_16+0x1c8>
    2c06:	8d e1       	ldi	r24, 0x1D	; 29
    2c08:	87 bd       	out	0x27, r24	; 39
    2c0a:	9d c0       	rjmp	.+314    	; 0x2d46 <__vector_16+0x1c8>
    2c0c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    2c10:	80 ff       	sbrs	r24, 0
    2c12:	05 c0       	rjmp	.+10     	; 0x2c1e <__vector_16+0xa0>
        if (sleep_counter >= SLEEP_TIMEOUT) {
    2c14:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sleep_counter.lto_priv.24+0x1>
    2c18:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sleep_counter.lto_priv.24>
            sleep_counter = 0;
    2c1c:	21 c0       	rjmp	.+66     	; 0x2c60 <__vector_16+0xe2>
    2c1e:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <sleep_counter.lto_priv.24>
    2c22:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <sleep_counter.lto_priv.24+0x1>
            TimerEvents.SleepScheduled = 1;
    2c26:	2f 5f       	subi	r18, 0xFF	; 255
        } else if (TimerEvents.DelayedSleepScheduled && sleep_counter >= DELAYED_SLEEP_TIMEOUT) {
    2c28:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2a:	30 93 8c 01 	sts	0x018C, r19	; 0x80018c <sleep_counter.lto_priv.24+0x1>
    2c2e:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <sleep_counter.lto_priv.24>
            sleep_counter = 0;
    2c32:	20 35       	cpi	r18, 0x50	; 80
    2c34:	46 e4       	ldi	r20, 0x46	; 70
    2c36:	34 07       	cpc	r19, r20
    2c38:	30 f0       	brcs	.+12     	; 0x2c46 <__vector_16+0xc8>
            TimerEvents.SleepScheduled = 1;
            TimerEvents.DelayedSleepScheduled = 0;
    2c3a:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sleep_counter.lto_priv.24+0x1>
    2c3e:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sleep_counter.lto_priv.24>
        }
    }

    if (!TimerEvents.Timer3sExpired) {
    2c42:	81 60       	ori	r24, 0x01	; 1
    2c44:	0b c0       	rjmp	.+22     	; 0x2c5c <__vector_16+0xde>
    2c46:	81 ff       	sbrs	r24, 1
    2c48:	0b c0       	rjmp	.+22     	; 0x2c60 <__vector_16+0xe2>
        if (counter_3s++ >= TIMEOUT_3SEC) {
    2c4a:	24 36       	cpi	r18, 0x64	; 100
    2c4c:	31 05       	cpc	r19, r1
    2c4e:	40 f0       	brcs	.+16     	; 0x2c60 <__vector_16+0xe2>
    2c50:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sleep_counter.lto_priv.24+0x1>
    2c54:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sleep_counter.lto_priv.24>
    2c58:	81 60       	ori	r24, 0x01	; 1
    2c5a:	8d 7f       	andi	r24, 0xFD	; 253
    2c5c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
    2c60:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    2c64:	83 fd       	sbrc	r24, 3
            counter_3s = 0;
    2c66:	15 c0       	rjmp	.+42     	; 0x2c92 <__vector_16+0x114>
    2c68:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <counter_3s.lto_priv.48>
    2c6c:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <counter_3s.lto_priv.48+0x1>
            TimerEvents.Timer3sExpired = 1;
    2c70:	a9 01       	movw	r20, r18
    2c72:	4f 5f       	subi	r20, 0xFF	; 255
        }
    }

    if (!TimerEvents.TimerExpired) {
    2c74:	5f 4f       	sbci	r21, 0xFF	; 255
    2c76:	50 93 8a 01 	sts	0x018A, r21	; 0x80018a <counter_3s.lto_priv.48+0x1>
    2c7a:	40 93 89 01 	sts	0x0189, r20	; 0x800189 <counter_3s.lto_priv.48>
        if (ctr++ >= preload) {
    2c7e:	2c 32       	cpi	r18, 0x2C	; 44
    2c80:	31 40       	sbci	r19, 0x01	; 1
    2c82:	38 f0       	brcs	.+14     	; 0x2c92 <__vector_16+0x114>
    2c84:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <counter_3s.lto_priv.48+0x1>
    2c88:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <counter_3s.lto_priv.48>
    2c8c:	88 60       	ori	r24, 0x08	; 8
    2c8e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
    2c92:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    2c96:	82 fd       	sbrc	r24, 2
    2c98:	19 c0       	rjmp	.+50     	; 0x2ccc <__vector_16+0x14e>
    2c9a:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <ctr>
    2c9e:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <ctr+0x1>
            ctr = 0;
    2ca2:	a9 01       	movw	r20, r18
    2ca4:	4f 5f       	subi	r20, 0xFF	; 255
    2ca6:	5f 4f       	sbci	r21, 0xFF	; 255
            TimerEvents.TimerExpired = 1;
    2ca8:	50 93 90 02 	sts	0x0290, r21	; 0x800290 <ctr+0x1>
    2cac:	40 93 8f 02 	sts	0x028F, r20	; 0x80028f <ctr>
static uint8_t ct0, ct1, rpt;

void debounce_keys() {
    uint8_t i;

    TCNT0 = (uint8_t) (int16_t)-(F_CPU / 1024 * 10e-3 + 0.5); // preload for 10ms
    2cb0:	40 91 87 01 	lds	r20, 0x0187	; 0x800187 <preload.lto_priv.47>
    //TCNT0 = (uint8_t) (int16_t)-(F_CPU / 12288 * 10e-3 + 0.5); // preload for 10ms

    i = key_state ^ ~KEY_PIN; // key changed ?
    2cb4:	50 91 88 01 	lds	r21, 0x0188	; 0x800188 <preload.lto_priv.47+0x1>
    2cb8:	24 17       	cp	r18, r20
    2cba:	35 07       	cpc	r19, r21
    2cbc:	38 f0       	brcs	.+14     	; 0x2ccc <__vector_16+0x14e>
    ct0 = ~(ct0 & i); // reset or count ct0
    2cbe:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <ctr+0x1>
    2cc2:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <ctr>
    2cc6:	84 60       	ori	r24, 0x04	; 4
    2cc8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
    ct1 = ct0 ^ (ct1 & i); // reset or count ct1
    2ccc:	80 e7       	ldi	r24, 0x70	; 112
    2cce:	86 bd       	out	0x26, r24	; 38
    2cd0:	89 b1       	in	r24, 0x09	; 9
    2cd2:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <key_state.lto_priv.27>
    2cd6:	80 95       	com	r24
    2cd8:	28 2f       	mov	r18, r24
    i &= ct0 & ct1; // count until roll over ?
    2cda:	29 27       	eor	r18, r25
    key_state ^= i; // then toggle debounced state
    2cdc:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <ct0.lto_priv.35>
    2ce0:	92 23       	and	r25, r18
    2ce2:	89 2f       	mov	r24, r25
    key_press |= key_state & i; // 0->1: key press detect
    2ce4:	80 95       	com	r24
    2ce6:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <ct0.lto_priv.35>
    2cea:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <ct1.lto_priv.36>
    2cee:	92 23       	and	r25, r18
    2cf0:	98 27       	eor	r25, r24
    2cf2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <ct1.lto_priv.36>

    if ((key_state & REPEAT_MASK) == 0) // check repeat function
    2cf6:	82 23       	and	r24, r18
    2cf8:	89 23       	and	r24, r25
    2cfa:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <key_state.lto_priv.27>
        rpt = REPEAT_START; // start delay
    2cfe:	98 27       	eor	r25, r24
    2d00:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <key_state.lto_priv.27>
    if (--rpt == 0) {
    2d04:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <key_state.lto_priv.27>
    2d08:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <key_press.lto_priv.67>
    2d0c:	82 23       	and	r24, r18
    2d0e:	89 2b       	or	r24, r25
        rpt = REPEAT_NEXT; // repeat delay
    2d10:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <key_press.lto_priv.67>
    2d14:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <key_state.lto_priv.27>
        key_rpt |= (key_state & REPEAT_MASK);
    2d18:	83 fd       	sbrc	r24, 3
    2d1a:	03 c0       	rjmp	.+6      	; 0x2d22 <__vector_16+0x1a4>
    2d1c:	82 e3       	ldi	r24, 0x32	; 50
    2d1e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <rpt.lto_priv.37>
    2d22:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <rpt.lto_priv.37>
    } else {
        /* every 10ms */
        timer0_callback();
        debounce_keys();
    }
}
    2d26:	81 50       	subi	r24, 0x01	; 1
    2d28:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <rpt.lto_priv.37>
    2d2c:	81 11       	cpse	r24, r1
    2d2e:	0b c0       	rjmp	.+22     	; 0x2d46 <__vector_16+0x1c8>
    2d30:	84 e1       	ldi	r24, 0x14	; 20
    2d32:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <rpt.lto_priv.37>
    2d36:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <key_state.lto_priv.27>
    2d3a:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <key_rpt>
uint8_t ready_to_sleep() {
    return TimerEvents.SleepScheduled;
}

void timer0_reset() {
    TimerEvents.TimerExpired = 0;
    2d3e:	88 70       	andi	r24, 0x08	; 8
    2d40:	89 2b       	or	r24, r25
    2d42:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <key_rpt>
    ctr = 0;
    2d46:	9f 91       	pop	r25
    2d48:	8f 91       	pop	r24
    2d4a:	5f 91       	pop	r21
    2d4c:	4f 91       	pop	r20
    2d4e:	3f 91       	pop	r19
void timer0_preload_ms(uint16_t ms) {
    preload = ms / 10;
}

uint8_t timer0_expired() {
    if (TimerEvents.TimerExpired) {
    2d50:	2f 91       	pop	r18
    2d52:	0f 90       	pop	r0
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	0f 90       	pop	r0
    2d58:	1f 90       	pop	r1
    2d5a:	18 95       	reti

00002d5c <timer0_reset>:
        timer0_reset();
    2d5c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
        return 1;
    2d60:	8b 7f       	andi	r24, 0xFB	; 251
    }
    return 0;
}
    2d62:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
    2d66:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <ctr+0x1>
    2d6a:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <ctr>
    2d6e:	08 95       	ret

00002d70 <timer0_expired>:
    2d70:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    2d74:	89 2f       	mov	r24, r25
    2d76:	84 70       	andi	r24, 0x04	; 4
    2d78:	92 ff       	sbrs	r25, 2
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <timer0_expired+0x10>
    2d7c:	ef df       	rcall	.-34     	; 0x2d5c <timer0_reset>
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	08 95       	ret

00002d82 <i2c_stop>:
}

void i2c_stop() {
    TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWSTO));
    2d82:	84 e9       	ldi	r24, 0x94	; 148
    2d84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d88:	81 e3       	ldi	r24, 0x31	; 49
    2d8a:	8a 95       	dec	r24
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <i2c_stop+0x8>
    2d8e:	00 00       	nop
    2d90:	08 95       	ret

00002d92 <i2c_busy_wait.lto_priv.23>:

#define I2C_TIMEOUT 100000U

static void i2c_busy_wait() {
    uint32_t timeout = 0;
    wdt_reset();
    2d92:	a8 95       	wdr
    2d94:	81 ea       	ldi	r24, 0xA1	; 161
    2d96:	96 e8       	ldi	r25, 0x86	; 134
    2d98:	a1 e0       	ldi	r26, 0x01	; 1
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(TWCR & (1 << TWINT)) && TWSR != 0) {
    2d9c:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2da0:	27 fd       	sbrc	r18, 7
    2da2:	16 c0       	rjmp	.+44     	; 0x2dd0 <i2c_busy_wait.lto_priv.23+0x3e>
    2da4:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2da8:	22 23       	and	r18, r18
    2daa:	91 f0       	breq	.+36     	; 0x2dd0 <i2c_busy_wait.lto_priv.23+0x3e>
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	a1 09       	sbc	r26, r1
    2db0:	b1 09       	sbc	r27, r1
        if (timeout++ >= I2C_TIMEOUT) {
    2db2:	a1 f7       	brne	.-24     	; 0x2d9c <i2c_busy_wait.lto_priv.23+0xa>
    TWBR = (F_CPU / F_SCL - 16) / 2;
    TWCR = (1 << TWEN);
}

void i2c_disable() {
    TWCR &= ~((1 << TWSTO) | (1 << TWEN));
    2db4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2db8:	8b 7e       	andi	r24, 0xEB	; 235
    2dba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    /*
     * scl_freq = f_cpu/(16 + 2*TWBR*prescaler)
     * f_cpu/scl_freq - 16 = 2*twbr*presc
     * twbr = (F_CPU/SCL - 16)/(2*prescaler)
     */
    TWSR = 0x00; // prescaler = 0
    2dbe:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR = (F_CPU / F_SCL - 16) / 2;
    2dc2:	8a e0       	ldi	r24, 0x0A	; 10
    2dc4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    TWCR = (1 << TWEN);
    2dc8:	84 e0       	ldi	r24, 0x04	; 4
    2dca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dce:	08 95       	ret
    2dd0:	08 95       	ret

00002dd2 <i2c_write>:
    TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWSTO));
    _delay_us(10); //wait for a short time
}

void i2c_write(uint8_t word) {
    TWDR = word;
    2dd2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    2dd6:	84 e8       	ldi	r24, 0x84	; 132
    2dd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    i2c_busy_wait();
    2ddc:	da cf       	rjmp	.-76     	; 0x2d92 <i2c_busy_wait.lto_priv.23>
    task_register(&rs232_param_adjust_task, 0, &frame[FRAME_FREQ_ADJUST], rs232_param_adjust_event_cb);
}

static void try_to_sleep() {
    static bool firstBoot = true;
    wdt_reset();
    2dde:	08 95       	ret

00002de0 <try_to_sleep>:
    TimerEvents.SleepScheduled = 0;
    TimerEvents.DelayedSleepScheduled = 0;
}

uint8_t ready_to_sleep() {
    return TimerEvents.SleepScheduled;
    2de0:	a8 95       	wdr
    2de2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    if (ready_to_sleep() || firstBoot) {
    2de6:	80 fd       	sbrc	r24, 0
    2de8:	05 c0       	rjmp	.+10     	; 0x2df4 <try_to_sleep+0x14>
    2dea:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <firstBoot.3188>
    2dee:	88 23       	and	r24, r24
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <try_to_sleep+0x14>
        cli();
    2df2:	16 c1       	rjmp	.+556    	; 0x3020 <try_to_sleep+0x240>

        if (firstBoot) {
    2df4:	f8 94       	cli
    2df6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <firstBoot.3188>
    2dfa:	88 23       	and	r24, r24
            /* Reset ports to default state
             * in case bootloader messed things up */
            DDRB = DDRC = DDRD = 0x00;
    2dfc:	49 f0       	breq	.+18     	; 0x2e10 <try_to_sleep+0x30>
    2dfe:	1a b8       	out	0x0a, r1	; 10
    2e00:	17 b8       	out	0x07, r1	; 7
            PORTB = PORTC = PORTD = 0x00;
    2e02:	14 b8       	out	0x04, r1	; 4
    2e04:	1b b8       	out	0x0b, r1	; 11
    2e06:	18 b8       	out	0x08, r1	; 8
            firstBoot = false;
    2e08:	15 b8       	out	0x05, r1	; 5
    2e0a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <firstBoot.3188>
    i2c_write(reg);
    i2c_stop();
}

void LCD_disable() {
    LCD_write_reg(UC1601S_DISABLE);
    2e0e:	07 c0       	rjmp	.+14     	; 0x2e1e <try_to_sleep+0x3e>
    TWBR = (F_CPU / F_SCL - 16) / 2;
    TWCR = (1 << TWEN);
}

void i2c_disable() {
    TWCR &= ~((1 << TWSTO) | (1 << TWEN));
    2e10:	8e ea       	ldi	r24, 0xAE	; 174
    2e12:	80 dd       	rcall	.-1280   	; 0x2914 <LCD_write_reg.lto_priv.41>
    2e14:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e18:	8b 7e       	andi	r24, 0xEB	; 235
            LCD_disable();
            i2c_disable();
        }

        /* Disable peripherals */
        ACSR |= 1 << ACD; // disable comparator
    2e1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e1e:	80 b7       	in	r24, 0x30	; 48
    while (ADCSRA & (1 << ADSC));
    return ADC;
}

void ADC_disable() {
    result = NULL;
    2e20:	80 68       	ori	r24, 0x80	; 128
    2e22:	80 bf       	out	0x30, r24	; 48
    2e24:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <result.lto_priv.49+0x1>
    ADMUX &= 0xF8;
    2e28:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <result.lto_priv.49>
    2e2c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2e30:	88 7f       	andi	r24, 0xF8	; 248
    ADCSRA = 0x00;
    2e32:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

void UART_disable() {
    UBRR0 = 0;
    2e36:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2e3a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UCSR0B = 0;
    2e3e:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
        ADC_disable();
        UART_disable();
        rs232_disable();
    2e42:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
        rs485_disable();
    2e46:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <rs232_disable.lto_priv.40>
    2e4a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <rs485_disable.lto_priv.39>
        boost_disable();

        /* Set up wake-up interrupt */
        EICRA |= (1 << ISC11); // interrupt on falling edge
    2e4e:	29 98       	cbi	0x05, 1	; 5
    2e50:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2e54:	88 60       	ori	r24, 0x08	; 8
        EIMSK |= (1 << INT1); // enable interrupt INT1
    2e56:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
        EIFR |= (1 << INTF1); // clear pending interrupt

        /* Prepare to sleep */
        PRR |= ((1 << PRTIM1)
    2e5a:	e9 9a       	sbi	0x1d, 1	; 29
    2e5c:	e1 9a       	sbi	0x1c, 1	; 28
    2e5e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    2e62:	8f 62       	ori	r24, 0x2F	; 47
                | (1 << PRTIM0)
                | (1 << PRUSART0)
                | (1 << PRADC)
                | (1 << PRSPI));

        MCUSR = 0; // tell the dog to keep quiet..
    2e64:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2e68:	14 be       	out	0x34, r1	; 52
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	a8 95       	wdr
    2e70:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2e74:	88 61       	ori	r24, 0x18	; 24
    2e76:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2e7a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
        wdt_disable();

        /* Enter sleep mode */
        set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	83 b7       	in	r24, 0x33	; 51
    2e82:	81 7f       	andi	r24, 0xF1	; 241
        sleep_enable();
    2e84:	84 60       	ori	r24, 0x04	; 4
    2e86:	83 bf       	out	0x33, r24	; 51
    2e88:	83 b7       	in	r24, 0x33	; 51
        sei();
    2e8a:	81 60       	ori	r24, 0x01	; 1
        sleep_cpu();
    2e8c:	83 bf       	out	0x33, r24	; 51

        /* CPU wakes up at this point */
        EIMSK &= ~(1 << INT1);
    2e8e:	78 94       	sei
        PRR &= ~((1 << PRTIM1)
    2e90:	88 95       	sleep
    2e92:	e9 98       	cbi	0x1d, 1	; 29
    2e94:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    2e98:	84 7d       	andi	r24, 0xD4	; 212
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    2e9a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    2e9e:	98 e2       	ldi	r25, 0x28	; 40
    2ea0:	88 e1       	ldi	r24, 0x18	; 24
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	a8 95       	wdr
    2ea8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2eac:	0f be       	out	0x3f, r0	; 63
}

static inline void GPIO_init() {
    /* Reset ports to default state
     * in case bootloader messed things up */
    DDRB = DDRC = DDRD = 0x00;
    2eae:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2eb2:	1a b8       	out	0x0a, r1	; 10
    PORTB = PORTC = PORTD = 0x00;
    2eb4:	17 b8       	out	0x07, r1	; 7
    2eb6:	14 b8       	out	0x04, r1	; 4
    2eb8:	1b b8       	out	0x0b, r1	; 11
    /* Buzzer */
    DDRD |= (1 << PD6);
    2eba:	18 b8       	out	0x08, r1	; 8
    /* DC-DC converter EN */
    BOOST_DR |= (1 << BOOST_PIN);
    2ebc:	15 b8       	out	0x05, r1	; 5
    /* Pull-up */
    PULLUP_DR |= (1 << PULLUP_PIN);
    2ebe:	56 9a       	sbi	0x0a, 6	; 10
    /* Interfaces */
    RS232_EN_DR |= (1 << RS232_EN_PIN);
    2ec0:	21 9a       	sbi	0x04, 1	; 4
    RS232_FF_DR |= (1 << RS232_FF_PIN);
    2ec2:	38 9a       	sbi	0x07, 0	; 7
    RS485_RE_DR |= (1 << RS485_RE_PIN);
    2ec4:	52 9a       	sbi	0x0a, 2	; 10
    RS485_DE_DR |= (1 << RS485_DE_PIN);
    2ec6:	54 9a       	sbi	0x0a, 4	; 10
uint8_t get_key_rpt_l(uint8_t key_mask) {
    return get_key_rpt(~key_press & key_mask);
}

void key_handler_init() {
    KEY_DR &= ~ALL_KEYS;
    2ec8:	3a 9a       	sbi	0x07, 2	; 7
    KEY_PORT |= ALL_KEYS;
    2eca:	3b 9a       	sbi	0x07, 3	; 7
    TCCR0A = 0x00;
    2ecc:	53 98       	cbi	0x0a, 3	; 10
    TCCR0B = (1 << CS02) | (1 << CS00);
    2ece:	5b 9a       	sbi	0x0b, 3	; 11
    2ed0:	14 bc       	out	0x24, r1	; 36
    TIMSK0 |= 1 << TOIE0; // enable timer interrupt
    2ed2:	85 e0       	ldi	r24, 0x05	; 5
    2ed4:	85 bd       	out	0x25, r24	; 37
    2ed6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    2eda:	81 60       	ori	r24, 0x01	; 1
    ct0 = 0;
    2edc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    ct1 = 0;
    2ee0:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <ct0.lto_priv.35>
    rpt = 0;
    2ee4:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <ct1.lto_priv.36>
    /*
     * scl_freq = f_cpu/(16 + 2*TWBR*prescaler)
     * f_cpu/scl_freq - 16 = 2*twbr*presc
     * twbr = (F_CPU/SCL - 16)/(2*prescaler)
     */
    TWSR = 0x00; // prescaler = 0
    2ee8:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <rpt.lto_priv.37>
    TWBR = (F_CPU / F_SCL - 16) / 2;
    2eec:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2ef0:	8a e0       	ldi	r24, 0x0A	; 10
    TWCR = (1 << TWEN);
    2ef2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2ef6:	84 e0       	ldi	r24, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ef8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2efc:	8f ef       	ldi	r24, 0xFF	; 255
    2efe:	9f e8       	ldi	r25, 0x8F	; 143
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    return pos;
}

void LCD_init(void) {
    _delay_ms(10);
    LCD_write_reg(UC1601S_RESET);
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <try_to_sleep+0x120>
    2f04:	00 c0       	rjmp	.+0      	; 0x2f06 <try_to_sleep+0x126>
    2f06:	00 00       	nop
    2f08:	82 ee       	ldi	r24, 0xE2	; 226
    2f0a:	04 dd       	rcall	.-1528   	; 0x2914 <LCD_write_reg.lto_priv.41>
    2f0c:	8f ef       	ldi	r24, 0xFF	; 255
    2f0e:	9f e8       	ldi	r25, 0x8F	; 143
    2f10:	01 97       	sbiw	r24, 0x01	; 1
void i2c_disable() {
    TWCR &= ~((1 << TWSTO) | (1 << TWEN));
}

void i2c_start() {
    TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <try_to_sleep+0x130>
    i2c_busy_wait();
    2f14:	00 c0       	rjmp	.+0      	; 0x2f16 <try_to_sleep+0x136>
    _delay_ms(10);

    i2c_start();
    i2c_write(LCD_ADDR_CMD);
    2f16:	00 00       	nop
    i2c_write(UC1601S_BIAS_RATIO | 3);
    2f18:	84 ea       	ldi	r24, 0xA4	; 164
    i2c_write(UC1601S_VBIAS);
    i2c_write(110);
    2f1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    i2c_write(0b11000110); // top-bottom, left-right
    2f1e:	39 df       	rcall	.-398    	; 0x2d92 <i2c_busy_wait.lto_priv.23>
    2f20:	80 e7       	ldi	r24, 0x70	; 112
    2f22:	57 df       	rcall	.-338    	; 0x2dd2 <i2c_write>
    i2c_write(UC1601S_ENABLE);
    2f24:	8b ee       	ldi	r24, 0xEB	; 235
    2f26:	55 df       	rcall	.-342    	; 0x2dd2 <i2c_write>
    2f28:	81 e8       	ldi	r24, 0x81	; 129
    i2c_stop();
    2f2a:	53 df       	rcall	.-346    	; 0x2dd2 <i2c_write>
    2f2c:	8e e6       	ldi	r24, 0x6E	; 110

    LCD_clear();
    2f2e:	51 df       	rcall	.-350    	; 0x2dd2 <i2c_write>
    2f30:	86 ec       	ldi	r24, 0xC6	; 198

    stdout = &LCD_stdout;
    2f32:	4f df       	rcall	.-354    	; 0x2dd2 <i2c_write>
    2f34:	8f ea       	ldi	r24, 0xAF	; 175
    2f36:	4d df       	rcall	.-358    	; 0x2dd2 <i2c_write>
    2f38:	24 df       	rcall	.-440    	; 0x2d82 <i2c_stop>
    2f3a:	a4 dc       	rcall	.-1720   	; 0x2884 <LCD_clear>
    2f3c:	83 e0       	ldi	r24, 0x03	; 3
    }
    return ready;
}

void ADC_enable(struct ADC_result *res) {
    result = res;
    2f3e:	91 e0       	ldi	r25, 0x01	; 1
    2f40:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <__iob+0x3>
    2f44:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <__iob+0x2>
    2f48:	8a ea       	ldi	r24, 0xAA	; 170
    adc_channel = 0;
    2f4a:	92 e0       	ldi	r25, 0x02	; 2
    2f4c:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <result.lto_priv.49+0x1>
    ADMUX = 0x00; // AREF, internal Vref turned off
    2f50:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <result.lto_priv.49>
    ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | // Division Factor = 16
    2f54:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <adc_channel.lto_priv.50>
    2f58:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2f5c:	87 e8       	ldi	r24, 0x87	; 135
    2f5e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f62:	9f ef       	ldi	r25, 0xFF	; 255
    sei();
    return key_mask;
}

uint8_t get_key_short(uint8_t key_mask) {
    cli(); // read key state and key press atomic !
    2f64:	2f e7       	ldi	r18, 0x7F	; 127
    return get_key_press(~key_state & key_mask);
    2f66:	8d e0       	ldi	r24, 0x0D	; 13
    2f68:	91 50       	subi	r25, 0x01	; 1
    2f6a:	20 40       	sbci	r18, 0x00	; 0
    2f6c:	80 40       	sbci	r24, 0x00	; 0
    2f6e:	e1 f7       	brne	.-8      	; 0x2f68 <try_to_sleep+0x188>
    2f70:	00 c0       	rjmp	.+0      	; 0x2f72 <try_to_sleep+0x192>
}

uint8_t get_key_long(uint8_t key_mask) {
    return get_key_press(get_key_rpt(key_mask));
    2f72:	00 00       	nop
    2f74:	f8 94       	cli
    2f76:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <key_state.lto_priv.27>
    2f7a:	80 95       	com	r24
}

static void ADC_start_conversion(uint8_t channel) {
    if (channel > 7) return;
    /* Clear last 3 bits and set ADC channel */
    ADMUX = (ADMUX & 0xF8) | channel;
    2f7c:	88 70       	andi	r24, 0x08	; 8
    2f7e:	f4 dd       	rcall	.-1048   	; 0x2b68 <get_key_press>
    2f80:	88 e0       	ldi	r24, 0x08	; 8
    2f82:	e7 dd       	rcall	.-1074   	; 0x2b52 <get_key_rpt>
    2f84:	f1 dd       	rcall	.-1054   	; 0x2b68 <get_key_press>
    2f86:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    /* Start conversion */
    ADCSRA |= (1 << ADSC);
    2f8a:	88 7f       	andi	r24, 0xF8	; 248
    2f8c:	81 60       	ori	r24, 0x01	; 1
    2f8e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    return ((double) (val * V_REF * 10 / ADC_RESOLUTION) / (SHUNT_RESISTOR) + 0.5);
}

uint16_t ADC_read(uint8_t channel) {
    ADC_start_conversion(channel);
    while (ADCSRA & (1 << ADSC));
    2f92:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f96:	80 64       	ori	r24, 0x40	; 64
    2f98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    return ADC;
    2f9c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2fa0:	86 fd       	sbrc	r24, 6
        get_key_short(1 << KEY3);
        get_key_long(1 << KEY3);

        /* Check for external voltage */
        uint16_t val = ADC_read(ADC_12V_CHANNEL);
        ApplicationFlags.ExternalVoltage = (val > EXT_VOLTAGE_THRESHOLD) ? 1 : 0;
    2fa2:	fc cf       	rjmp	.-8      	; 0x2f9c <try_to_sleep+0x1bc>
    2fa4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2fa8:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2fac:	91 e0       	ldi	r25, 0x01	; 1
    2fae:	29 3f       	cpi	r18, 0xF9	; 249
    2fb0:	31 05       	cpc	r19, r1
    2fb2:	08 f4       	brcc	.+2      	; 0x2fb6 <try_to_sleep+0x1d6>
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <ApplicationFlags>

        /* Disable sleep mode */
        sleep_disable();
    2fba:	90 fb       	bst	r25, 0
    2fbc:	80 f9       	bld	r24, 0
        }
    }
}

void sleep_timer_reset() {
    sleep_counter = 0;
    2fbe:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <ApplicationFlags>
    2fc2:	83 b7       	in	r24, 0x33	; 51
    2fc4:	8e 7f       	andi	r24, 0xFE	; 254
    TimerEvents.SleepScheduled = 0;
    2fc6:	83 bf       	out	0x33, r24	; 51
    2fc8:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sleep_counter.lto_priv.24+0x1>
    TimerEvents.DelayedSleepScheduled = 0;
    2fcc:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sleep_counter.lto_priv.24>
    2fd0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
        sleep_timer_reset();

        /* Reschedule previous task */
        enum sensorType sensor = (enum sensorType) current_task->type;
    2fd4:	8e 7f       	andi	r24, 0xFE	; 254
    2fd6:	8d 7f       	andi	r24, 0xFD	; 253
    2fd8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
        switch (sensor) {
    2fdc:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <current_task.lto_priv.44>
    2fe0:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <current_task.lto_priv.44+0x1>
    2fe4:	82 81       	ldd	r24, Z+2	; 0x02
    2fe6:	83 30       	cpi	r24, 0x03	; 3
    2fe8:	59 f0       	breq	.+22     	; 0x3000 <try_to_sleep+0x220>
    2fea:	18 f4       	brcc	.+6      	; 0x2ff2 <try_to_sleep+0x212>
    2fec:	81 30       	cpi	r24, 0x01	; 1
    2fee:	68 f0       	brcs	.+26     	; 0x300a <try_to_sleep+0x22a>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    2ff0:	12 c0       	rjmp	.+36     	; 0x3016 <try_to_sleep+0x236>
    2ff2:	84 30       	cpi	r24, 0x04	; 4
    2ff4:	51 f4       	brne	.+20     	; 0x300a <try_to_sleep+0x22a>
    2ff6:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <rs485_main_task.lto_priv.74+0x2>
    2ffa:	8e ec       	ldi	r24, 0xCE	; 206
    2ffc:	92 e0       	ldi	r25, 0x02	; 2
    2ffe:	07 c0       	rjmp	.+14     	; 0x300e <try_to_sleep+0x22e>
    3000:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <rs232_main_task.lto_priv.73+0x2>
    3004:	84 ed       	ldi	r24, 0xD4	; 212
    3006:	92 e0       	ldi	r25, 0x02	; 2
    3008:	02 c0       	rjmp	.+4      	; 0x300e <try_to_sleep+0x22e>
    300a:	87 ee       	ldi	r24, 0xE7	; 231
    ApplicationEvents.TaskChanged = 1;
    300c:	92 e0       	ldi	r25, 0x02	; 2
    300e:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <current_task.lto_priv.44+0x1>
    3012:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <current_task.lto_priv.44>
    3016:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
static struct ADC_result *result;

static void ADC_start_conversion(uint8_t channel);

static inline uint8_t ADC_is_busy() {
    return (ADCSRA & (1 << ADSC));
    301a:	84 60       	ori	r24, 0x04	; 4
}

uint8_t ADC_ready() {
    uint8_t ready = 0;
    if (!ADC_is_busy() && result != NULL) {
    301c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    3020:	08 95       	ret

00003022 <ADC_ready>:
    3022:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3026:	86 fd       	sbrc	r24, 6
    3028:	3d c0       	rjmp	.+122    	; 0x30a4 <ADC_ready+0x82>
    302a:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <result.lto_priv.49>
        switch (adc_channel) {
    302e:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <result.lto_priv.49+0x1>
    3032:	30 97       	sbiw	r30, 0x00	; 0
    3034:	b9 f1       	breq	.+110    	; 0x30a4 <ADC_ready+0x82>
    3036:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <adc_channel.lto_priv.50>
    303a:	86 30       	cpi	r24, 0x06	; 6
            case (ADC_VIN_CHANNEL):
                result->channel_vin = ADC;
                adc_channel = ADC_12V_CHANNEL;
                break;
            case (ADC_12V_CHANNEL):
                result->channel_12v = ADC;
    303c:	a1 f0       	breq	.+40     	; 0x3066 <ADC_ready+0x44>
    303e:	87 30       	cpi	r24, 0x07	; 7
    3040:	51 f0       	breq	.+20     	; 0x3056 <ADC_ready+0x34>
    3042:	81 30       	cpi	r24, 0x01	; 1
    3044:	d9 f4       	brne	.+54     	; 0x307c <ADC_ready+0x5a>
    3046:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
                adc_channel = ADC_SHUNT_CHANNEL;
    304a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
uint8_t ADC_ready() {
    uint8_t ready = 0;
    if (!ADC_is_busy() && result != NULL) {
        switch (adc_channel) {
            case (ADC_VIN_CHANNEL):
                result->channel_vin = ADC;
    304e:	93 83       	std	Z+3, r25	; 0x03
    3050:	82 83       	std	Z+2, r24	; 0x02
    3052:	86 e0       	ldi	r24, 0x06	; 6
    3054:	14 c0       	rjmp	.+40     	; 0x307e <ADC_ready+0x5c>
    3056:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
                adc_channel = ADC_12V_CHANNEL;
    305a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
            case (ADC_12V_CHANNEL):
                result->channel_12v = ADC;
                adc_channel = ADC_SHUNT_CHANNEL;
                break;
            case (ADC_SHUNT_CHANNEL):
                result->channel_shunt = ADC;
    305e:	91 83       	std	Z+1, r25	; 0x01
    3060:	80 83       	st	Z, r24
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	0c c0       	rjmp	.+24     	; 0x307e <ADC_ready+0x5c>
    3066:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
                adc_channel = ADC_VIN_CHANNEL;
    306a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
                ready = 1;
    306e:	95 83       	std	Z+5, r25	; 0x05
    3070:	84 83       	std	Z+4, r24	; 0x04
                break;
            default:
                adc_channel = ADC_VIN_CHANNEL;
    3072:	87 e0       	ldi	r24, 0x07	; 7
    3074:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <adc_channel.lto_priv.50>
static inline uint8_t ADC_is_busy() {
    return (ADCSRA & (1 << ADSC));
}

uint8_t ADC_ready() {
    uint8_t ready = 0;
    3078:	81 e0       	ldi	r24, 0x01	; 1
                break;
            default:
                adc_channel = ADC_VIN_CHANNEL;
                break;
        }
        ADC_start_conversion(adc_channel);
    307a:	04 c0       	rjmp	.+8      	; 0x3084 <ADC_ready+0x62>
    307c:	87 e0       	ldi	r24, 0x07	; 7
    ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | // Division Factor = 16
            (1 << ADEN); // Enable ADC
}

static void ADC_start_conversion(uint8_t channel) {
    if (channel > 7) return;
    307e:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <adc_channel.lto_priv.50>
    /* Clear last 3 bits and set ADC channel */
    ADMUX = (ADMUX & 0xF8) | channel;
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <adc_channel.lto_priv.50>
    3088:	98 30       	cpi	r25, 0x08	; 8
    /* Start conversion */
    ADCSRA |= (1 << ADSC);
    308a:	68 f4       	brcc	.+26     	; 0x30a6 <ADC_ready+0x84>
    308c:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    3090:	28 7f       	andi	r18, 0xF8	; 248
    3092:	92 2b       	or	r25, r18
    3094:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
                break;
        }
        ADC_start_conversion(adc_channel);
    }
    return ready;
}
    3098:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 *    displaying voltage/frequency
 * 4. Remove Modbus initialization in rs232_task
 * 5. Fix press&hold key handler
 */
void main(void) {
    try_to_sleep();
    309c:	90 64       	ori	r25, 0x40	; 64

void boot_logo_display() {
    //eeprom_write_block((const void *) logo, (void *) 0x00, sizeof (logo));
    LCD_goto(0, 0);
    309e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    30a2:	08 95       	ret
    uint8_t row = 0;
    for (int i = 0; i < (sizeof (logo) / sizeof (logo[0])); i++) {
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	08 95       	ret

000030a8 <main>:
        if (i % 64 == 0) {
    30a8:	9b de       	rcall	.-714    	; 0x2de0 <try_to_sleep>
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	3f dc       	rcall	.-1922   	; 0x292e <LCD_goto>
            LCD_goto(row++, 0);
    30b0:	c0 e0       	ldi	r28, 0x00	; 0
    30b2:	d0 e0       	ldi	r29, 0x00	; 0
    30b4:	10 e0       	ldi	r17, 0x00	; 0
    30b6:	c1 15       	cp	r28, r1
    30b8:	22 e0       	ldi	r18, 0x02	; 2
    30ba:	d2 07       	cpc	r29, r18
        }
        LCD_open();
    30bc:	91 f0       	breq	.+36     	; 0x30e2 <main+0x3a>
    30be:	ce 01       	movw	r24, r28
        i2c_write(eeprom_read_byte((void *) i));
    30c0:	8f 73       	andi	r24, 0x3F	; 63
    30c2:	99 27       	eor	r25, r25
    30c4:	89 2b       	or	r24, r25
    30c6:	31 f4       	brne	.+12     	; 0x30d4 <main+0x2c>
    i2c_start();
    i2c_write(LCD_ADDR_DATA);
}

void LCD_close() {
    i2c_stop();
    30c8:	01 e0       	ldi	r16, 0x01	; 1
    30ca:	01 0f       	add	r16, r17

void boot_logo_display() {
    //eeprom_write_block((const void *) logo, (void *) 0x00, sizeof (logo));
    LCD_goto(0, 0);
    uint8_t row = 0;
    for (int i = 0; i < (sizeof (logo) / sizeof (logo[0])); i++) {
    30cc:	60 e0       	ldi	r22, 0x00	; 0
    30ce:	81 2f       	mov	r24, r17
        }
        LCD_open();
        i2c_write(eeprom_read_byte((void *) i));
        LCD_close();
    }
    LCD_goto(2, 60);
    30d0:	2e dc       	rcall	.-1956   	; 0x292e <LCD_goto>
    30d2:	10 2f       	mov	r17, r16
    30d4:	d0 db       	rcall	.-2144   	; 0x2876 <LCD_open>
    30d6:	ce 01       	movw	r24, r28

    LCD_puts(STR_DEVICE_NAME);
    30d8:	f5 d1       	rcall	.+1002   	; 0x34c4 <eeprom_read_byte>
    30da:	7b de       	rcall	.-778    	; 0x2dd2 <i2c_write>
    30dc:	52 de       	rcall	.-860    	; 0x2d82 <i2c_stop>
    30de:	21 96       	adiw	r28, 0x01	; 1
    LCD_goto(3, 60);
    30e0:	ea cf       	rjmp	.-44     	; 0x30b6 <main+0xe>
    30e2:	6c e3       	ldi	r22, 0x3C	; 60
    30e4:	82 e0       	ldi	r24, 0x02	; 2
    30e6:	23 dc       	rcall	.-1978   	; 0x292e <LCD_goto>
    LCD_puts(STR_FW_TITLE);
    30e8:	8b ef       	ldi	r24, 0xFB	; 251
    30ea:	97 e0       	ldi	r25, 0x07	; 7
    30ec:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_puts>
    LCD_goto(4, 60);
    30f0:	6c e3       	ldi	r22, 0x3C	; 60
    30f2:	83 e0       	ldi	r24, 0x03	; 3
    30f4:	1c dc       	rcall	.-1992   	; 0x292e <LCD_goto>
    30f6:	80 ef       	ldi	r24, 0xF0	; 240
    LCD_puts(STR_FW_VERSION);
    30f8:	97 e0       	ldi	r25, 0x07	; 7
    30fa:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_puts>
    30fe:	6c e3       	ldi	r22, 0x3C	; 60
    3100:	84 e0       	ldi	r24, 0x04	; 4
    3102:	15 dc       	rcall	.-2006   	; 0x292e <LCD_goto>
    3104:	8a ee       	ldi	r24, 0xEA	; 234
    3106:	97 e0       	ldi	r25, 0x07	; 7
    3108:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_puts>
    310c:	8f ef       	ldi	r24, 0xFF	; 255
    310e:	9f ef       	ldi	r25, 0xFF	; 255
    3110:	a9 e5       	ldi	r26, 0x59	; 89
};

/*******************************************************/

void create_frames() {
    frame[FRAME_MODE_SELECT].frame_ptr = &frame_mode_select[0];
    3112:	81 50       	subi	r24, 0x01	; 1
    3114:	90 40       	sbci	r25, 0x00	; 0
    3116:	a0 40       	sbci	r26, 0x00	; 0
    3118:	e1 f7       	brne	.-8      	; 0x3112 <main+0x6a>
    311a:	00 c0       	rjmp	.+0      	; 0x311c <main+0x74>
    311c:	00 00       	nop
    frame[FRAME_RS232_MAIN].frame_ptr = &frame_rs232_main[0];
    311e:	80 ea       	ldi	r24, 0xA0	; 160
    3120:	98 e0       	ldi	r25, 0x08	; 8
    3122:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <frame+0x1>
    3126:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <frame>
    frame[FRAME_RS485_MAIN].frame_ptr = &frame_rs485_main[0];
    312a:	80 e9       	ldi	r24, 0x90	; 144
    312c:	98 e0       	ldi	r25, 0x08	; 8
    312e:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <frame+0x3>
    3132:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <frame+0x2>
    frame[FRAME_MAIN].frame_ptr = &frame_analog[0];
    3136:	80 e8       	ldi	r24, 0x80	; 128
    3138:	98 e0       	ldi	r25, 0x08	; 8
    313a:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <frame+0x5>
    313e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <frame+0x4>
    frame[FRAME_FREQ].frame_ptr = &frame_freq[0];
    3142:	80 e7       	ldi	r24, 0x70	; 112
    3144:	98 e0       	ldi	r25, 0x08	; 8
    3146:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <frame+0x9>
    314a:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <frame+0x8>
    frame[FRAME_RS232].frame_ptr = &frame_rs232[0];
    314e:	80 e6       	ldi	r24, 0x60	; 96
    3150:	98 e0       	ldi	r25, 0x08	; 8
    3152:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <frame+0xb>
    3156:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <frame+0xa>
    frame[FRAME_RS232_SETTINGS].frame_ptr = &frame_rs232_settings[0];
    315a:	88 e4       	ldi	r24, 0x48	; 72
    315c:	98 e0       	ldi	r25, 0x08	; 8
    315e:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <frame+0x7>
    3162:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <frame+0x6>
    frame[FRAME_ID_SELECT].frame_ptr = &frame_id_select[0];
    3166:	88 e3       	ldi	r24, 0x38	; 56
    3168:	98 e0       	ldi	r25, 0x08	; 8
    316a:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <frame+0xd>
    316e:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <frame+0xc>
    frame[FRAME_BAUD_SELECT].frame_ptr = &frame_baud_select[0];
    3172:	88 e2       	ldi	r24, 0x28	; 40
    3174:	98 e0       	ldi	r25, 0x08	; 8
    3176:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <frame+0xf>
    317a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <frame+0xe>
    frame[FRAME_FREQ_ADJUST].frame_ptr = &frame_param_adjust[0];
    317e:	88 e1       	ldi	r24, 0x18	; 24
    3180:	98 e0       	ldi	r25, 0x08	; 8
    3182:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <frame+0x11>
    3186:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <frame+0x10>
void task_callback_register(struct task_cb *task, task_cb_t cb) {
    task->event_handler = cb;
}

void task_register(struct task_cb *task, unsigned char type, void *container, task_cb_t cb) {
    task->type = type;
    318a:	88 e0       	ldi	r24, 0x08	; 8
    318c:	98 e0       	ldi	r25, 0x08	; 8
    task->container = container;
    318e:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <frame+0x13>
    3192:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <frame+0x12>
    3196:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <mode_select_task.lto_priv.45+0x2>
    task->event_handler = cb;
    319a:	82 ef       	ldi	r24, 0xF2	; 242
    319c:	92 e0       	ldi	r25, 0x02	; 2
    319e:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <mode_select_task.lto_priv.45+0x5>
    31a2:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <mode_select_task.lto_priv.45+0x4>
    task->id = 0;
    31a6:	85 e4       	ldi	r24, 0x45	; 69
    31a8:	9e e0       	ldi	r25, 0x0E	; 14
void task_callback_register(struct task_cb *task, task_cb_t cb) {
    task->event_handler = cb;
}

void task_register(struct task_cb *task, unsigned char type, void *container, task_cb_t cb) {
    task->type = type;
    31aa:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <mode_select_task.lto_priv.45+0x1>
    31ae:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <mode_select_task.lto_priv.45>
    task->container = container;
    31b2:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <mode_select_task.lto_priv.45+0x3>
    31b6:	82 e0       	ldi	r24, 0x02	; 2
    31b8:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <analog_task.lto_priv.72+0x2>
    task->event_handler = cb;
    31bc:	8a ef       	ldi	r24, 0xFA	; 250
    31be:	92 e0       	ldi	r25, 0x02	; 2
    31c0:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <analog_task.lto_priv.72+0x5>
    31c4:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <analog_task.lto_priv.72+0x4>
    task->id = 0;
    31c8:	86 e7       	ldi	r24, 0x76	; 118
    31ca:	94 e0       	ldi	r25, 0x04	; 4
void task_callback_register(struct task_cb *task, task_cb_t cb) {
    task->event_handler = cb;
}

void task_register(struct task_cb *task, unsigned char type, void *container, task_cb_t cb) {
    task->type = type;
    31cc:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <analog_task.lto_priv.72+0x1>
    31d0:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <analog_task.lto_priv.72>
    task->container = container;
    31d4:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <analog_task.lto_priv.72+0x3>
    31d8:	21 e0       	ldi	r18, 0x01	; 1
    31da:	20 93 dc 02 	sts	0x02DC, r18	; 0x8002dc <freq_task.lto_priv.71+0x2>
    task->event_handler = cb;
    31de:	2c ef       	ldi	r18, 0xFC	; 252
    31e0:	32 e0       	ldi	r19, 0x02	; 2
    31e2:	30 93 df 02 	sts	0x02DF, r19	; 0x8002df <freq_task.lto_priv.71+0x5>
    task->id = 0;
    31e6:	20 93 de 02 	sts	0x02DE, r18	; 0x8002de <freq_task.lto_priv.71+0x4>
void task_callback_register(struct task_cb *task, task_cb_t cb) {
    task->event_handler = cb;
}

void task_register(struct task_cb *task, unsigned char type, void *container, task_cb_t cb) {
    task->type = type;
    31ea:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <freq_task.lto_priv.71+0x1>
    31ee:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <freq_task.lto_priv.71>
    task->container = container;
    31f2:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <freq_task.lto_priv.71+0x3>
    31f6:	23 e0       	ldi	r18, 0x03	; 3
    31f8:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <rs232_main_task.lto_priv.73+0x2>
    task->event_handler = cb;
    31fc:	44 ef       	ldi	r20, 0xF4	; 244
    31fe:	52 e0       	ldi	r21, 0x02	; 2
    3200:	50 93 d9 02 	sts	0x02D9, r21	; 0x8002d9 <rs232_main_task.lto_priv.73+0x5>
    task->id = 0;
    3204:	40 93 d8 02 	sts	0x02D8, r20	; 0x8002d8 <rs232_main_task.lto_priv.73+0x4>
void task_callback_register(struct task_cb *task, task_cb_t cb) {
    task->event_handler = cb;
}

void task_register(struct task_cb *task, unsigned char type, void *container, task_cb_t cb) {
    task->type = type;
    3208:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <rs232_main_task.lto_priv.73+0x1>
    320c:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <rs232_main_task.lto_priv.73>
    task->container = container;
    3210:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <rs232_main_task.lto_priv.73+0x3>
    3214:	34 e0       	ldi	r19, 0x04	; 4
    3216:	30 93 d0 02 	sts	0x02D0, r19	; 0x8002d0 <rs485_main_task.lto_priv.74+0x2>
    task->event_handler = cb;
    321a:	46 ef       	ldi	r20, 0xF6	; 246
    321c:	52 e0       	ldi	r21, 0x02	; 2
    321e:	50 93 d3 02 	sts	0x02D3, r21	; 0x8002d3 <rs485_main_task.lto_priv.74+0x5>
    task->id = 0;
    3222:	40 93 d2 02 	sts	0x02D2, r20	; 0x8002d2 <rs485_main_task.lto_priv.74+0x4>
void task_callback_register(struct task_cb *task, task_cb_t cb) {
    task->event_handler = cb;
}

void task_register(struct task_cb *task, unsigned char type, void *container, task_cb_t cb) {
    task->type = type;
    3226:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <rs485_main_task.lto_priv.74+0x1>
    task->container = container;
    322a:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <rs485_main_task.lto_priv.74>
    322e:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <rs485_main_task.lto_priv.74+0x3>
    3232:	20 93 ca 02 	sts	0x02CA, r18	; 0x8002ca <rs232_task.lto_priv.46+0x2>
    task->event_handler = cb;
    3236:	88 ef       	ldi	r24, 0xF8	; 248
    3238:	92 e0       	ldi	r25, 0x02	; 2
    323a:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <rs232_task.lto_priv.46+0x5>
    323e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <rs232_task.lto_priv.46+0x4>
    task->id = 0;
    3242:	85 ef       	ldi	r24, 0xF5	; 245
    3244:	9e e0       	ldi	r25, 0x0E	; 14
void task_callback_register(struct task_cb *task, task_cb_t cb) {
    task->event_handler = cb;
}

void task_register(struct task_cb *task, unsigned char type, void *container, task_cb_t cb) {
    task->type = type;
    3246:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <rs232_task.lto_priv.46+0x1>
    task->container = container;
    324a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <rs232_task.lto_priv.46>
    324e:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <rs232_task.lto_priv.46+0x3>
    3252:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <rs232_settings_task.lto_priv.54+0x2>
    task->event_handler = cb;
    3256:	8e ef       	ldi	r24, 0xFE	; 254
    3258:	92 e0       	ldi	r25, 0x02	; 2
    325a:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <rs232_settings_task.lto_priv.54+0x5>
    325e:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <rs232_settings_task.lto_priv.54+0x4>
    task->id = 0;
    3262:	81 e1       	ldi	r24, 0x11	; 17
    3264:	99 e0       	ldi	r25, 0x09	; 9
void task_callback_register(struct task_cb *task, task_cb_t cb) {
    task->event_handler = cb;
}

void task_register(struct task_cb *task, unsigned char type, void *container, task_cb_t cb) {
    task->type = type;
    3266:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <rs232_settings_task.lto_priv.54+0x1>
    task->container = container;
    326a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <rs232_settings_task.lto_priv.54>
    326e:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <rs232_settings_task.lto_priv.54+0x3>
    3272:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <rs232_id_select_task.lto_priv.51+0x2>
    task->event_handler = cb;
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	93 e0       	ldi	r25, 0x03	; 3
    327a:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <rs232_id_select_task.lto_priv.51+0x5>
    327e:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <rs232_id_select_task.lto_priv.51+0x4>
    task->id = 0;
    3282:	8a ea       	ldi	r24, 0xAA	; 170
    3284:	9d e0       	ldi	r25, 0x0D	; 13
void task_callback_register(struct task_cb *task, task_cb_t cb) {
    task->event_handler = cb;
}

void task_register(struct task_cb *task, unsigned char type, void *container, task_cb_t cb) {
    task->type = type;
    3286:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <rs232_id_select_task.lto_priv.51+0x1>
    task->container = container;
    328a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <rs232_id_select_task.lto_priv.51>
    328e:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <rs232_id_select_task.lto_priv.51+0x3>
    3292:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <rs232_baud_select_task.lto_priv.52+0x2>
    task->event_handler = cb;
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	93 e0       	ldi	r25, 0x03	; 3
    329a:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <rs232_baud_select_task.lto_priv.52+0x5>
    329e:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <rs232_baud_select_task.lto_priv.52+0x4>
    task->id = 0;
    32a2:	85 e7       	ldi	r24, 0x75	; 117
    32a4:	98 e0       	ldi	r25, 0x08	; 8
void task_callback_register(struct task_cb *task, task_cb_t cb) {
    task->event_handler = cb;
}

void task_register(struct task_cb *task, unsigned char type, void *container, task_cb_t cb) {
    task->type = type;
    32a6:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <rs232_baud_select_task.lto_priv.52+0x1>
    task->container = container;
    32aa:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <rs232_baud_select_task.lto_priv.52>
    32ae:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <rs232_baud_select_task.lto_priv.52+0x3>
    32b2:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <rs232_param_adjust_task.lto_priv.70+0x2>
    task->event_handler = cb;
    32b6:	84 e0       	ldi	r24, 0x04	; 4
    32b8:	93 e0       	ldi	r25, 0x03	; 3
    32ba:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <rs232_param_adjust_task.lto_priv.70+0x5>
    32be:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <rs232_param_adjust_task.lto_priv.70+0x4>
rs232_param_adjust_task;

static task_t *current_task;

static void schedule_task(task_t *t) {
    current_task = t;
    32c2:	84 e5       	ldi	r24, 0x54	; 84
    32c4:	9a e0       	ldi	r25, 0x0A	; 10
    32c6:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <rs232_param_adjust_task.lto_priv.70+0x1>
    ApplicationEvents.TaskChanged = 1;
    32ca:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <rs232_param_adjust_task.lto_priv.70>
    32ce:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <rs232_param_adjust_task.lto_priv.70+0x3>
    32d2:	87 ee       	ldi	r24, 0xE7	; 231
    sei();
    return key_mask;
}

uint8_t get_key_short(uint8_t key_mask) {
    cli(); // read key state and key press atomic !
    32d4:	92 e0       	ldi	r25, 0x02	; 2
    return get_key_press(~key_state & key_mask);
    32d6:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <current_task.lto_priv.44+0x1>
    32da:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <current_task.lto_priv.44>
    32de:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
}

static inline void handle_keys() {
    if (get_key_short(1 << KEY3))
    32e2:	84 60       	ori	r24, 0x04	; 4
    32e4:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
        ApplicationEvents.ShortKeyPressed = 1;
    32e8:	f8 94       	cli
    32ea:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <key_state.lto_priv.27>
    32ee:	80 95       	com	r24
}

uint8_t get_key_long(uint8_t key_mask) {
    return get_key_press(get_key_rpt(key_mask));
    32f0:	88 70       	andi	r24, 0x08	; 8
    32f2:	3a dc       	rcall	.-1932   	; 0x2b68 <get_key_press>
    32f4:	88 23       	and	r24, r24
    32f6:	29 f0       	breq	.+10     	; 0x3302 <main+0x25a>
    32f8:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>

    if (get_key_long(1 << KEY3)) {
    32fc:	81 60       	ori	r24, 0x01	; 1
    }
    return 0;
}

void make_annoying_beep(uint8_t type) {
    TCCR0A = (1 << COM0A0) | (1 << WGM01) | (1 << WGM00);
    32fe:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
    TCCR0B = (1 << CS01) | (1 << CS00) | (1 << WGM02);
    3302:	88 e0       	ldi	r24, 0x08	; 8
    3304:	26 dc       	rcall	.-1972   	; 0x2b52 <get_key_rpt>

    if (type == BEEP_SHORT) {
        beeper_mode = BEEP_SHORT;
    3306:	30 dc       	rcall	.-1952   	; 0x2b68 <get_key_press>
    3308:	88 23       	and	r24, r24
    330a:	71 f0       	breq	.+28     	; 0x3328 <main+0x280>
        OCR0A = 128;
    330c:	83 e4       	ldi	r24, 0x43	; 67
    330e:	84 bd       	out	0x24, r24	; 36
        make_annoying_beep(BEEP_SHORT);
        ApplicationEvents.LongKeyPressed = 1;
    3310:	8b e0       	ldi	r24, 0x0B	; 11
    3312:	85 bd       	out	0x25, r24	; 37
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <beeper_mode.lto_priv.26>
    }

    if (ApplicationEvents.ShortKeyPressed || ApplicationEvents.LongKeyPressed)
    331a:	80 e8       	ldi	r24, 0x80	; 128
    331c:	87 bd       	out	0x27, r24	; 39
    331e:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    3322:	82 60       	ori	r24, 0x02	; 2
    3324:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ApplicationEvents>
        }
    }
}

void sleep_timer_reset() {
    sleep_counter = 0;
    3328:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    332c:	80 fd       	sbrc	r24, 0
    332e:	04 c0       	rjmp	.+8      	; 0x3338 <main+0x290>
    TimerEvents.SleepScheduled = 0;
    3330:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <ApplicationEvents>
    TimerEvents.DelayedSleepScheduled = 0;
    3334:	81 ff       	sbrs	r24, 1
    3336:	0a c0       	rjmp	.+20     	; 0x334c <main+0x2a4>
    3338:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sleep_counter.lto_priv.24+0x1>
    register_callbacks();
    schedule_task(&mode_select_task);

    while (1) {
        handle_keys();
        current_task->event_handler(current_task);
    333c:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sleep_counter.lto_priv.24>
    3340:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerEvents.lto_priv.25>
    3344:	8e 7f       	andi	r24, 0xFE	; 254
    3346:	8d 7f       	andi	r24, 0xFD	; 253
    3348:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerEvents.lto_priv.25>
        try_to_sleep();
    334c:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <current_task.lto_priv.44>
    3350:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <current_task.lto_priv.44+0x1>
                break;
        }
    }
}

ISR(INT1_vect) {
    3354:	dc 01       	movw	r26, r24
    3356:	ed 91       	ld	r30, X+
    3358:	fc 91       	ld	r31, X
    335a:	09 95       	icall
    /* Do nothing */
}
    335c:	41 dd       	rcall	.-1406   	; 0x2de0 <try_to_sleep>
    335e:	c4 cf       	rjmp	.-120    	; 0x32e8 <main+0x240>

00003360 <__vector_2>:
    3360:	1f 92       	push	r1
    3362:	0f 92       	push	r0
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	0f 92       	push	r0
    3368:	11 24       	eor	r1, r1
    336a:	0f 90       	pop	r0
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	0f 90       	pop	r0
    3370:	1f 90       	pop	r1
    3372:	18 95       	reti

00003374 <atol>:
    3374:	1f 93       	push	r17
    3376:	fc 01       	movw	r30, r24
    3378:	99 27       	eor	r25, r25
    337a:	88 27       	eor	r24, r24
    337c:	bc 01       	movw	r22, r24
    337e:	e8 94       	clt
    3380:	11 91       	ld	r17, Z+
    3382:	10 32       	cpi	r17, 0x20	; 32
    3384:	e9 f3       	breq	.-6      	; 0x3380 <atol+0xc>
    3386:	19 30       	cpi	r17, 0x09	; 9
    3388:	10 f0       	brcs	.+4      	; 0x338e <atol+0x1a>
    338a:	1e 30       	cpi	r17, 0x0E	; 14
    338c:	c8 f3       	brcs	.-14     	; 0x3380 <atol+0xc>
    338e:	1b 32       	cpi	r17, 0x2B	; 43
    3390:	49 f0       	breq	.+18     	; 0x33a4 <atol+0x30>
    3392:	1d 32       	cpi	r17, 0x2D	; 45
    3394:	41 f4       	brne	.+16     	; 0x33a6 <atol+0x32>
    3396:	68 94       	set
    3398:	05 c0       	rjmp	.+10     	; 0x33a4 <atol+0x30>
    339a:	35 d0       	rcall	.+106    	; 0x3406 <__mulsi_const_10>
    339c:	61 0f       	add	r22, r17
    339e:	71 1d       	adc	r23, r1
    33a0:	81 1d       	adc	r24, r1
    33a2:	91 1d       	adc	r25, r1
    33a4:	11 91       	ld	r17, Z+
    33a6:	10 53       	subi	r17, 0x30	; 48
    33a8:	1a 30       	cpi	r17, 0x0A	; 10
    33aa:	b8 f3       	brcs	.-18     	; 0x339a <atol+0x26>
    33ac:	3e f4       	brtc	.+14     	; 0x33bc <atol+0x48>
    33ae:	90 95       	com	r25
    33b0:	80 95       	com	r24
    33b2:	70 95       	com	r23
    33b4:	61 95       	neg	r22
    33b6:	7f 4f       	sbci	r23, 0xFF	; 255
    33b8:	8f 4f       	sbci	r24, 0xFF	; 255
    33ba:	9f 4f       	sbci	r25, 0xFF	; 255
    33bc:	1f 91       	pop	r17
    33be:	08 95       	ret

000033c0 <memcpy_P>:
    33c0:	fb 01       	movw	r30, r22
    33c2:	dc 01       	movw	r26, r24
    33c4:	02 c0       	rjmp	.+4      	; 0x33ca <memcpy_P+0xa>
    33c6:	05 90       	lpm	r0, Z+
    33c8:	0d 92       	st	X+, r0
    33ca:	41 50       	subi	r20, 0x01	; 1
    33cc:	50 40       	sbci	r21, 0x00	; 0
    33ce:	d8 f7       	brcc	.-10     	; 0x33c6 <memcpy_P+0x6>
    33d0:	08 95       	ret

000033d2 <strcpy_P>:
    33d2:	fb 01       	movw	r30, r22
    33d4:	dc 01       	movw	r26, r24
    33d6:	05 90       	lpm	r0, Z+
    33d8:	0d 92       	st	X+, r0
    33da:	00 20       	and	r0, r0
    33dc:	e1 f7       	brne	.-8      	; 0x33d6 <strcpy_P+0x4>
    33de:	08 95       	ret

000033e0 <__strlen_P>:
    33e0:	fc 01       	movw	r30, r24
    33e2:	05 90       	lpm	r0, Z+
    33e4:	00 20       	and	r0, r0
    33e6:	e9 f7       	brne	.-6      	; 0x33e2 <__strlen_P+0x2>
    33e8:	80 95       	com	r24
    33ea:	90 95       	com	r25
    33ec:	8e 0f       	add	r24, r30
    33ee:	9f 1f       	adc	r25, r31
    33f0:	08 95       	ret

000033f2 <__itoa_ncheck>:
    33f2:	bb 27       	eor	r27, r27
    33f4:	4a 30       	cpi	r20, 0x0A	; 10
    33f6:	31 f4       	brne	.+12     	; 0x3404 <__itoa_ncheck+0x12>
    33f8:	99 23       	and	r25, r25
    33fa:	22 f4       	brpl	.+8      	; 0x3404 <__itoa_ncheck+0x12>
    33fc:	bd e2       	ldi	r27, 0x2D	; 45
    33fe:	90 95       	com	r25
    3400:	81 95       	neg	r24
    3402:	9f 4f       	sbci	r25, 0xFF	; 255
    3404:	37 c0       	rjmp	.+110    	; 0x3474 <__utoa_common>

00003406 <__mulsi_const_10>:
    3406:	59 2f       	mov	r21, r25
    3408:	48 2f       	mov	r20, r24
    340a:	37 2f       	mov	r19, r23
    340c:	26 2f       	mov	r18, r22
    340e:	66 0f       	add	r22, r22
    3410:	77 1f       	adc	r23, r23
    3412:	88 1f       	adc	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	66 0f       	add	r22, r22
    3418:	77 1f       	adc	r23, r23
    341a:	88 1f       	adc	r24, r24
    341c:	99 1f       	adc	r25, r25
    341e:	62 0f       	add	r22, r18
    3420:	73 1f       	adc	r23, r19
    3422:	84 1f       	adc	r24, r20
    3424:	95 1f       	adc	r25, r21
    3426:	66 0f       	add	r22, r22
    3428:	77 1f       	adc	r23, r23
    342a:	88 1f       	adc	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	08 95       	ret

00003430 <__ultoa_ncheck>:
    3430:	bb 27       	eor	r27, r27

00003432 <__ultoa_common>:
    3432:	fa 01       	movw	r30, r20
    3434:	a6 2f       	mov	r26, r22
    3436:	62 17       	cp	r22, r18
    3438:	71 05       	cpc	r23, r1
    343a:	81 05       	cpc	r24, r1
    343c:	91 05       	cpc	r25, r1
    343e:	33 0b       	sbc	r19, r19
    3440:	30 fb       	bst	r19, 0
    3442:	66 f0       	brts	.+24     	; 0x345c <__ultoa_common+0x2a>
    3444:	aa 27       	eor	r26, r26
    3446:	66 0f       	add	r22, r22
    3448:	77 1f       	adc	r23, r23
    344a:	88 1f       	adc	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	aa 1f       	adc	r26, r26
    3450:	a2 17       	cp	r26, r18
    3452:	10 f0       	brcs	.+4      	; 0x3458 <__ultoa_common+0x26>
    3454:	a2 1b       	sub	r26, r18
    3456:	63 95       	inc	r22
    3458:	38 50       	subi	r19, 0x08	; 8
    345a:	a9 f7       	brne	.-22     	; 0x3446 <__ultoa_common+0x14>
    345c:	a0 5d       	subi	r26, 0xD0	; 208
    345e:	aa 33       	cpi	r26, 0x3A	; 58
    3460:	08 f0       	brcs	.+2      	; 0x3464 <__ultoa_common+0x32>
    3462:	a9 5d       	subi	r26, 0xD9	; 217
    3464:	a1 93       	st	Z+, r26
    3466:	36 f7       	brtc	.-52     	; 0x3434 <__ultoa_common+0x2>
    3468:	b1 11       	cpse	r27, r1
    346a:	b1 93       	st	Z+, r27
    346c:	10 82       	st	Z, r1
    346e:	ca 01       	movw	r24, r20
    3470:	19 c0       	rjmp	.+50     	; 0x34a4 <strrev>

00003472 <__utoa_ncheck>:
    3472:	bb 27       	eor	r27, r27

00003474 <__utoa_common>:
    3474:	fb 01       	movw	r30, r22
    3476:	55 27       	eor	r21, r21
    3478:	aa 27       	eor	r26, r26
    347a:	88 0f       	add	r24, r24
    347c:	99 1f       	adc	r25, r25
    347e:	aa 1f       	adc	r26, r26
    3480:	a4 17       	cp	r26, r20
    3482:	10 f0       	brcs	.+4      	; 0x3488 <__utoa_common+0x14>
    3484:	a4 1b       	sub	r26, r20
    3486:	83 95       	inc	r24
    3488:	50 51       	subi	r21, 0x10	; 16
    348a:	b9 f7       	brne	.-18     	; 0x347a <__utoa_common+0x6>
    348c:	a0 5d       	subi	r26, 0xD0	; 208
    348e:	aa 33       	cpi	r26, 0x3A	; 58
    3490:	08 f0       	brcs	.+2      	; 0x3494 <__utoa_common+0x20>
    3492:	a9 5d       	subi	r26, 0xD9	; 217
    3494:	a1 93       	st	Z+, r26
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	79 f7       	brne	.-34     	; 0x3478 <__utoa_common+0x4>
    349a:	b1 11       	cpse	r27, r1
    349c:	b1 93       	st	Z+, r27
    349e:	11 92       	st	Z+, r1
    34a0:	cb 01       	movw	r24, r22
    34a2:	00 c0       	rjmp	.+0      	; 0x34a4 <strrev>

000034a4 <strrev>:
    34a4:	dc 01       	movw	r26, r24
    34a6:	fc 01       	movw	r30, r24
    34a8:	67 2f       	mov	r22, r23
    34aa:	71 91       	ld	r23, Z+
    34ac:	77 23       	and	r23, r23
    34ae:	e1 f7       	brne	.-8      	; 0x34a8 <strrev+0x4>
    34b0:	32 97       	sbiw	r30, 0x02	; 2
    34b2:	04 c0       	rjmp	.+8      	; 0x34bc <strrev+0x18>
    34b4:	7c 91       	ld	r23, X
    34b6:	6d 93       	st	X+, r22
    34b8:	70 83       	st	Z, r23
    34ba:	62 91       	ld	r22, -Z
    34bc:	ae 17       	cp	r26, r30
    34be:	bf 07       	cpc	r27, r31
    34c0:	c8 f3       	brcs	.-14     	; 0x34b4 <strrev+0x10>
    34c2:	08 95       	ret

000034c4 <eeprom_read_byte>:
    34c4:	f9 99       	sbic	0x1f, 1	; 31
    34c6:	fe cf       	rjmp	.-4      	; 0x34c4 <eeprom_read_byte>
    34c8:	92 bd       	out	0x22, r25	; 34
    34ca:	81 bd       	out	0x21, r24	; 33
    34cc:	f8 9a       	sbi	0x1f, 0	; 31
    34ce:	99 27       	eor	r25, r25
    34d0:	80 b5       	in	r24, 0x20	; 32
    34d2:	08 95       	ret

000034d4 <__subsf3>:
    34d4:	50 58       	subi	r21, 0x80	; 128

000034d6 <__addsf3>:
    34d6:	bb 27       	eor	r27, r27
    34d8:	aa 27       	eor	r26, r26
    34da:	0e d0       	rcall	.+28     	; 0x34f8 <__addsf3x>
    34dc:	e0 c0       	rjmp	.+448    	; 0x369e <__fp_round>
    34de:	d1 d0       	rcall	.+418    	; 0x3682 <__fp_pscA>
    34e0:	30 f0       	brcs	.+12     	; 0x34ee <__addsf3+0x18>
    34e2:	d6 d0       	rcall	.+428    	; 0x3690 <__fp_pscB>
    34e4:	20 f0       	brcs	.+8      	; 0x34ee <__addsf3+0x18>
    34e6:	31 f4       	brne	.+12     	; 0x34f4 <__addsf3+0x1e>
    34e8:	9f 3f       	cpi	r25, 0xFF	; 255
    34ea:	11 f4       	brne	.+4      	; 0x34f0 <__addsf3+0x1a>
    34ec:	1e f4       	brtc	.+6      	; 0x34f4 <__addsf3+0x1e>
    34ee:	c6 c0       	rjmp	.+396    	; 0x367c <__fp_nan>
    34f0:	0e f4       	brtc	.+2      	; 0x34f4 <__addsf3+0x1e>
    34f2:	e0 95       	com	r30
    34f4:	e7 fb       	bst	r30, 7
    34f6:	bc c0       	rjmp	.+376    	; 0x3670 <__fp_inf>

000034f8 <__addsf3x>:
    34f8:	e9 2f       	mov	r30, r25
    34fa:	e2 d0       	rcall	.+452    	; 0x36c0 <__fp_split3>
    34fc:	80 f3       	brcs	.-32     	; 0x34de <__addsf3+0x8>
    34fe:	ba 17       	cp	r27, r26
    3500:	62 07       	cpc	r22, r18
    3502:	73 07       	cpc	r23, r19
    3504:	84 07       	cpc	r24, r20
    3506:	95 07       	cpc	r25, r21
    3508:	18 f0       	brcs	.+6      	; 0x3510 <__addsf3x+0x18>
    350a:	71 f4       	brne	.+28     	; 0x3528 <__addsf3x+0x30>
    350c:	9e f5       	brtc	.+102    	; 0x3574 <__addsf3x+0x7c>
    350e:	fa c0       	rjmp	.+500    	; 0x3704 <__fp_zero>
    3510:	0e f4       	brtc	.+2      	; 0x3514 <__addsf3x+0x1c>
    3512:	e0 95       	com	r30
    3514:	0b 2e       	mov	r0, r27
    3516:	ba 2f       	mov	r27, r26
    3518:	a0 2d       	mov	r26, r0
    351a:	0b 01       	movw	r0, r22
    351c:	b9 01       	movw	r22, r18
    351e:	90 01       	movw	r18, r0
    3520:	0c 01       	movw	r0, r24
    3522:	ca 01       	movw	r24, r20
    3524:	a0 01       	movw	r20, r0
    3526:	11 24       	eor	r1, r1
    3528:	ff 27       	eor	r31, r31
    352a:	59 1b       	sub	r21, r25
    352c:	99 f0       	breq	.+38     	; 0x3554 <__addsf3x+0x5c>
    352e:	59 3f       	cpi	r21, 0xF9	; 249
    3530:	50 f4       	brcc	.+20     	; 0x3546 <__addsf3x+0x4e>
    3532:	50 3e       	cpi	r21, 0xE0	; 224
    3534:	68 f1       	brcs	.+90     	; 0x3590 <__addsf3x+0x98>
    3536:	1a 16       	cp	r1, r26
    3538:	f0 40       	sbci	r31, 0x00	; 0
    353a:	a2 2f       	mov	r26, r18
    353c:	23 2f       	mov	r18, r19
    353e:	34 2f       	mov	r19, r20
    3540:	44 27       	eor	r20, r20
    3542:	58 5f       	subi	r21, 0xF8	; 248
    3544:	f3 cf       	rjmp	.-26     	; 0x352c <__addsf3x+0x34>
    3546:	46 95       	lsr	r20
    3548:	37 95       	ror	r19
    354a:	27 95       	ror	r18
    354c:	a7 95       	ror	r26
    354e:	f0 40       	sbci	r31, 0x00	; 0
    3550:	53 95       	inc	r21
    3552:	c9 f7       	brne	.-14     	; 0x3546 <__addsf3x+0x4e>
    3554:	7e f4       	brtc	.+30     	; 0x3574 <__addsf3x+0x7c>
    3556:	1f 16       	cp	r1, r31
    3558:	ba 0b       	sbc	r27, r26
    355a:	62 0b       	sbc	r22, r18
    355c:	73 0b       	sbc	r23, r19
    355e:	84 0b       	sbc	r24, r20
    3560:	ba f0       	brmi	.+46     	; 0x3590 <__addsf3x+0x98>
    3562:	91 50       	subi	r25, 0x01	; 1
    3564:	a1 f0       	breq	.+40     	; 0x358e <__addsf3x+0x96>
    3566:	ff 0f       	add	r31, r31
    3568:	bb 1f       	adc	r27, r27
    356a:	66 1f       	adc	r22, r22
    356c:	77 1f       	adc	r23, r23
    356e:	88 1f       	adc	r24, r24
    3570:	c2 f7       	brpl	.-16     	; 0x3562 <__addsf3x+0x6a>
    3572:	0e c0       	rjmp	.+28     	; 0x3590 <__addsf3x+0x98>
    3574:	ba 0f       	add	r27, r26
    3576:	62 1f       	adc	r22, r18
    3578:	73 1f       	adc	r23, r19
    357a:	84 1f       	adc	r24, r20
    357c:	48 f4       	brcc	.+18     	; 0x3590 <__addsf3x+0x98>
    357e:	87 95       	ror	r24
    3580:	77 95       	ror	r23
    3582:	67 95       	ror	r22
    3584:	b7 95       	ror	r27
    3586:	f7 95       	ror	r31
    3588:	9e 3f       	cpi	r25, 0xFE	; 254
    358a:	08 f0       	brcs	.+2      	; 0x358e <__addsf3x+0x96>
    358c:	b3 cf       	rjmp	.-154    	; 0x34f4 <__addsf3+0x1e>
    358e:	93 95       	inc	r25
    3590:	88 0f       	add	r24, r24
    3592:	08 f0       	brcs	.+2      	; 0x3596 <__addsf3x+0x9e>
    3594:	99 27       	eor	r25, r25
    3596:	ee 0f       	add	r30, r30
    3598:	97 95       	ror	r25
    359a:	87 95       	ror	r24
    359c:	08 95       	ret

0000359e <__fixunssfsi>:
    359e:	98 d0       	rcall	.+304    	; 0x36d0 <__fp_splitA>
    35a0:	88 f0       	brcs	.+34     	; 0x35c4 <__fixunssfsi+0x26>
    35a2:	9f 57       	subi	r25, 0x7F	; 127
    35a4:	90 f0       	brcs	.+36     	; 0x35ca <__fixunssfsi+0x2c>
    35a6:	b9 2f       	mov	r27, r25
    35a8:	99 27       	eor	r25, r25
    35aa:	b7 51       	subi	r27, 0x17	; 23
    35ac:	a0 f0       	brcs	.+40     	; 0x35d6 <__fixunssfsi+0x38>
    35ae:	d1 f0       	breq	.+52     	; 0x35e4 <__fixunssfsi+0x46>
    35b0:	66 0f       	add	r22, r22
    35b2:	77 1f       	adc	r23, r23
    35b4:	88 1f       	adc	r24, r24
    35b6:	99 1f       	adc	r25, r25
    35b8:	1a f0       	brmi	.+6      	; 0x35c0 <__fixunssfsi+0x22>
    35ba:	ba 95       	dec	r27
    35bc:	c9 f7       	brne	.-14     	; 0x35b0 <__fixunssfsi+0x12>
    35be:	12 c0       	rjmp	.+36     	; 0x35e4 <__fixunssfsi+0x46>
    35c0:	b1 30       	cpi	r27, 0x01	; 1
    35c2:	81 f0       	breq	.+32     	; 0x35e4 <__fixunssfsi+0x46>
    35c4:	9f d0       	rcall	.+318    	; 0x3704 <__fp_zero>
    35c6:	b1 e0       	ldi	r27, 0x01	; 1
    35c8:	08 95       	ret
    35ca:	9c c0       	rjmp	.+312    	; 0x3704 <__fp_zero>
    35cc:	67 2f       	mov	r22, r23
    35ce:	78 2f       	mov	r23, r24
    35d0:	88 27       	eor	r24, r24
    35d2:	b8 5f       	subi	r27, 0xF8	; 248
    35d4:	39 f0       	breq	.+14     	; 0x35e4 <__fixunssfsi+0x46>
    35d6:	b9 3f       	cpi	r27, 0xF9	; 249
    35d8:	cc f3       	brlt	.-14     	; 0x35cc <__fixunssfsi+0x2e>
    35da:	86 95       	lsr	r24
    35dc:	77 95       	ror	r23
    35de:	67 95       	ror	r22
    35e0:	b3 95       	inc	r27
    35e2:	d9 f7       	brne	.-10     	; 0x35da <__fixunssfsi+0x3c>
    35e4:	3e f4       	brtc	.+14     	; 0x35f4 <__fixunssfsi+0x56>
    35e6:	90 95       	com	r25
    35e8:	80 95       	com	r24
    35ea:	70 95       	com	r23
    35ec:	61 95       	neg	r22
    35ee:	7f 4f       	sbci	r23, 0xFF	; 255
    35f0:	8f 4f       	sbci	r24, 0xFF	; 255
    35f2:	9f 4f       	sbci	r25, 0xFF	; 255
    35f4:	08 95       	ret

000035f6 <__floatunsisf>:
    35f6:	e8 94       	clt
    35f8:	09 c0       	rjmp	.+18     	; 0x360c <__floatsisf+0x12>

000035fa <__floatsisf>:
    35fa:	97 fb       	bst	r25, 7
    35fc:	3e f4       	brtc	.+14     	; 0x360c <__floatsisf+0x12>
    35fe:	90 95       	com	r25
    3600:	80 95       	com	r24
    3602:	70 95       	com	r23
    3604:	61 95       	neg	r22
    3606:	7f 4f       	sbci	r23, 0xFF	; 255
    3608:	8f 4f       	sbci	r24, 0xFF	; 255
    360a:	9f 4f       	sbci	r25, 0xFF	; 255
    360c:	99 23       	and	r25, r25
    360e:	a9 f0       	breq	.+42     	; 0x363a <__floatsisf+0x40>
    3610:	f9 2f       	mov	r31, r25
    3612:	96 e9       	ldi	r25, 0x96	; 150
    3614:	bb 27       	eor	r27, r27
    3616:	93 95       	inc	r25
    3618:	f6 95       	lsr	r31
    361a:	87 95       	ror	r24
    361c:	77 95       	ror	r23
    361e:	67 95       	ror	r22
    3620:	b7 95       	ror	r27
    3622:	f1 11       	cpse	r31, r1
    3624:	f8 cf       	rjmp	.-16     	; 0x3616 <__floatsisf+0x1c>
    3626:	fa f4       	brpl	.+62     	; 0x3666 <__floatsisf+0x6c>
    3628:	bb 0f       	add	r27, r27
    362a:	11 f4       	brne	.+4      	; 0x3630 <__floatsisf+0x36>
    362c:	60 ff       	sbrs	r22, 0
    362e:	1b c0       	rjmp	.+54     	; 0x3666 <__floatsisf+0x6c>
    3630:	6f 5f       	subi	r22, 0xFF	; 255
    3632:	7f 4f       	sbci	r23, 0xFF	; 255
    3634:	8f 4f       	sbci	r24, 0xFF	; 255
    3636:	9f 4f       	sbci	r25, 0xFF	; 255
    3638:	16 c0       	rjmp	.+44     	; 0x3666 <__floatsisf+0x6c>
    363a:	88 23       	and	r24, r24
    363c:	11 f0       	breq	.+4      	; 0x3642 <__floatsisf+0x48>
    363e:	96 e9       	ldi	r25, 0x96	; 150
    3640:	11 c0       	rjmp	.+34     	; 0x3664 <__floatsisf+0x6a>
    3642:	77 23       	and	r23, r23
    3644:	21 f0       	breq	.+8      	; 0x364e <__floatsisf+0x54>
    3646:	9e e8       	ldi	r25, 0x8E	; 142
    3648:	87 2f       	mov	r24, r23
    364a:	76 2f       	mov	r23, r22
    364c:	05 c0       	rjmp	.+10     	; 0x3658 <__floatsisf+0x5e>
    364e:	66 23       	and	r22, r22
    3650:	71 f0       	breq	.+28     	; 0x366e <__floatsisf+0x74>
    3652:	96 e8       	ldi	r25, 0x86	; 134
    3654:	86 2f       	mov	r24, r22
    3656:	70 e0       	ldi	r23, 0x00	; 0
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	2a f0       	brmi	.+10     	; 0x3666 <__floatsisf+0x6c>
    365c:	9a 95       	dec	r25
    365e:	66 0f       	add	r22, r22
    3660:	77 1f       	adc	r23, r23
    3662:	88 1f       	adc	r24, r24
    3664:	da f7       	brpl	.-10     	; 0x365c <__floatsisf+0x62>
    3666:	88 0f       	add	r24, r24
    3668:	96 95       	lsr	r25
    366a:	87 95       	ror	r24
    366c:	97 f9       	bld	r25, 7
    366e:	08 95       	ret

00003670 <__fp_inf>:
    3670:	97 f9       	bld	r25, 7
    3672:	9f 67       	ori	r25, 0x7F	; 127
    3674:	80 e8       	ldi	r24, 0x80	; 128
    3676:	70 e0       	ldi	r23, 0x00	; 0
    3678:	60 e0       	ldi	r22, 0x00	; 0
    367a:	08 95       	ret

0000367c <__fp_nan>:
    367c:	9f ef       	ldi	r25, 0xFF	; 255
    367e:	80 ec       	ldi	r24, 0xC0	; 192
    3680:	08 95       	ret

00003682 <__fp_pscA>:
    3682:	00 24       	eor	r0, r0
    3684:	0a 94       	dec	r0
    3686:	16 16       	cp	r1, r22
    3688:	17 06       	cpc	r1, r23
    368a:	18 06       	cpc	r1, r24
    368c:	09 06       	cpc	r0, r25
    368e:	08 95       	ret

00003690 <__fp_pscB>:
    3690:	00 24       	eor	r0, r0
    3692:	0a 94       	dec	r0
    3694:	12 16       	cp	r1, r18
    3696:	13 06       	cpc	r1, r19
    3698:	14 06       	cpc	r1, r20
    369a:	05 06       	cpc	r0, r21
    369c:	08 95       	ret

0000369e <__fp_round>:
    369e:	09 2e       	mov	r0, r25
    36a0:	03 94       	inc	r0
    36a2:	00 0c       	add	r0, r0
    36a4:	11 f4       	brne	.+4      	; 0x36aa <__fp_round+0xc>
    36a6:	88 23       	and	r24, r24
    36a8:	52 f0       	brmi	.+20     	; 0x36be <__fp_round+0x20>
    36aa:	bb 0f       	add	r27, r27
    36ac:	40 f4       	brcc	.+16     	; 0x36be <__fp_round+0x20>
    36ae:	bf 2b       	or	r27, r31
    36b0:	11 f4       	brne	.+4      	; 0x36b6 <__fp_round+0x18>
    36b2:	60 ff       	sbrs	r22, 0
    36b4:	04 c0       	rjmp	.+8      	; 0x36be <__fp_round+0x20>
    36b6:	6f 5f       	subi	r22, 0xFF	; 255
    36b8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ba:	8f 4f       	sbci	r24, 0xFF	; 255
    36bc:	9f 4f       	sbci	r25, 0xFF	; 255
    36be:	08 95       	ret

000036c0 <__fp_split3>:
    36c0:	57 fd       	sbrc	r21, 7
    36c2:	90 58       	subi	r25, 0x80	; 128
    36c4:	44 0f       	add	r20, r20
    36c6:	55 1f       	adc	r21, r21
    36c8:	59 f0       	breq	.+22     	; 0x36e0 <__fp_splitA+0x10>
    36ca:	5f 3f       	cpi	r21, 0xFF	; 255
    36cc:	71 f0       	breq	.+28     	; 0x36ea <__fp_splitA+0x1a>
    36ce:	47 95       	ror	r20

000036d0 <__fp_splitA>:
    36d0:	88 0f       	add	r24, r24
    36d2:	97 fb       	bst	r25, 7
    36d4:	99 1f       	adc	r25, r25
    36d6:	61 f0       	breq	.+24     	; 0x36f0 <__fp_splitA+0x20>
    36d8:	9f 3f       	cpi	r25, 0xFF	; 255
    36da:	79 f0       	breq	.+30     	; 0x36fa <__fp_splitA+0x2a>
    36dc:	87 95       	ror	r24
    36de:	08 95       	ret
    36e0:	12 16       	cp	r1, r18
    36e2:	13 06       	cpc	r1, r19
    36e4:	14 06       	cpc	r1, r20
    36e6:	55 1f       	adc	r21, r21
    36e8:	f2 cf       	rjmp	.-28     	; 0x36ce <__fp_split3+0xe>
    36ea:	46 95       	lsr	r20
    36ec:	f1 df       	rcall	.-30     	; 0x36d0 <__fp_splitA>
    36ee:	08 c0       	rjmp	.+16     	; 0x3700 <__fp_splitA+0x30>
    36f0:	16 16       	cp	r1, r22
    36f2:	17 06       	cpc	r1, r23
    36f4:	18 06       	cpc	r1, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	f1 cf       	rjmp	.-30     	; 0x36dc <__fp_splitA+0xc>
    36fa:	86 95       	lsr	r24
    36fc:	71 05       	cpc	r23, r1
    36fe:	61 05       	cpc	r22, r1
    3700:	08 94       	sec
    3702:	08 95       	ret

00003704 <__fp_zero>:
    3704:	e8 94       	clt

00003706 <__fp_szero>:
    3706:	bb 27       	eor	r27, r27
    3708:	66 27       	eor	r22, r22
    370a:	77 27       	eor	r23, r23
    370c:	cb 01       	movw	r24, r22
    370e:	97 f9       	bld	r25, 7
    3710:	08 95       	ret

00003712 <__mulsf3>:
    3712:	0b d0       	rcall	.+22     	; 0x372a <__mulsf3x>
    3714:	c4 cf       	rjmp	.-120    	; 0x369e <__fp_round>
    3716:	b5 df       	rcall	.-150    	; 0x3682 <__fp_pscA>
    3718:	28 f0       	brcs	.+10     	; 0x3724 <__mulsf3+0x12>
    371a:	ba df       	rcall	.-140    	; 0x3690 <__fp_pscB>
    371c:	18 f0       	brcs	.+6      	; 0x3724 <__mulsf3+0x12>
    371e:	95 23       	and	r25, r21
    3720:	09 f0       	breq	.+2      	; 0x3724 <__mulsf3+0x12>
    3722:	a6 cf       	rjmp	.-180    	; 0x3670 <__fp_inf>
    3724:	ab cf       	rjmp	.-170    	; 0x367c <__fp_nan>
    3726:	11 24       	eor	r1, r1
    3728:	ee cf       	rjmp	.-36     	; 0x3706 <__fp_szero>

0000372a <__mulsf3x>:
    372a:	ca df       	rcall	.-108    	; 0x36c0 <__fp_split3>
    372c:	a0 f3       	brcs	.-24     	; 0x3716 <__mulsf3+0x4>

0000372e <__mulsf3_pse>:
    372e:	95 9f       	mul	r25, r21
    3730:	d1 f3       	breq	.-12     	; 0x3726 <__mulsf3+0x14>
    3732:	95 0f       	add	r25, r21
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	55 1f       	adc	r21, r21
    3738:	62 9f       	mul	r22, r18
    373a:	f0 01       	movw	r30, r0
    373c:	72 9f       	mul	r23, r18
    373e:	bb 27       	eor	r27, r27
    3740:	f0 0d       	add	r31, r0
    3742:	b1 1d       	adc	r27, r1
    3744:	63 9f       	mul	r22, r19
    3746:	aa 27       	eor	r26, r26
    3748:	f0 0d       	add	r31, r0
    374a:	b1 1d       	adc	r27, r1
    374c:	aa 1f       	adc	r26, r26
    374e:	64 9f       	mul	r22, r20
    3750:	66 27       	eor	r22, r22
    3752:	b0 0d       	add	r27, r0
    3754:	a1 1d       	adc	r26, r1
    3756:	66 1f       	adc	r22, r22
    3758:	82 9f       	mul	r24, r18
    375a:	22 27       	eor	r18, r18
    375c:	b0 0d       	add	r27, r0
    375e:	a1 1d       	adc	r26, r1
    3760:	62 1f       	adc	r22, r18
    3762:	73 9f       	mul	r23, r19
    3764:	b0 0d       	add	r27, r0
    3766:	a1 1d       	adc	r26, r1
    3768:	62 1f       	adc	r22, r18
    376a:	83 9f       	mul	r24, r19
    376c:	a0 0d       	add	r26, r0
    376e:	61 1d       	adc	r22, r1
    3770:	22 1f       	adc	r18, r18
    3772:	74 9f       	mul	r23, r20
    3774:	33 27       	eor	r19, r19
    3776:	a0 0d       	add	r26, r0
    3778:	61 1d       	adc	r22, r1
    377a:	23 1f       	adc	r18, r19
    377c:	84 9f       	mul	r24, r20
    377e:	60 0d       	add	r22, r0
    3780:	21 1d       	adc	r18, r1
    3782:	82 2f       	mov	r24, r18
    3784:	76 2f       	mov	r23, r22
    3786:	6a 2f       	mov	r22, r26
    3788:	11 24       	eor	r1, r1
    378a:	9f 57       	subi	r25, 0x7F	; 127
    378c:	50 40       	sbci	r21, 0x00	; 0
    378e:	8a f0       	brmi	.+34     	; 0x37b2 <__mulsf3_pse+0x84>
    3790:	e1 f0       	breq	.+56     	; 0x37ca <__mulsf3_pse+0x9c>
    3792:	88 23       	and	r24, r24
    3794:	4a f0       	brmi	.+18     	; 0x37a8 <__mulsf3_pse+0x7a>
    3796:	ee 0f       	add	r30, r30
    3798:	ff 1f       	adc	r31, r31
    379a:	bb 1f       	adc	r27, r27
    379c:	66 1f       	adc	r22, r22
    379e:	77 1f       	adc	r23, r23
    37a0:	88 1f       	adc	r24, r24
    37a2:	91 50       	subi	r25, 0x01	; 1
    37a4:	50 40       	sbci	r21, 0x00	; 0
    37a6:	a9 f7       	brne	.-22     	; 0x3792 <__mulsf3_pse+0x64>
    37a8:	9e 3f       	cpi	r25, 0xFE	; 254
    37aa:	51 05       	cpc	r21, r1
    37ac:	70 f0       	brcs	.+28     	; 0x37ca <__mulsf3_pse+0x9c>
    37ae:	60 cf       	rjmp	.-320    	; 0x3670 <__fp_inf>
    37b0:	aa cf       	rjmp	.-172    	; 0x3706 <__fp_szero>
    37b2:	5f 3f       	cpi	r21, 0xFF	; 255
    37b4:	ec f3       	brlt	.-6      	; 0x37b0 <__mulsf3_pse+0x82>
    37b6:	98 3e       	cpi	r25, 0xE8	; 232
    37b8:	dc f3       	brlt	.-10     	; 0x37b0 <__mulsf3_pse+0x82>
    37ba:	86 95       	lsr	r24
    37bc:	77 95       	ror	r23
    37be:	67 95       	ror	r22
    37c0:	b7 95       	ror	r27
    37c2:	f7 95       	ror	r31
    37c4:	e7 95       	ror	r30
    37c6:	9f 5f       	subi	r25, 0xFF	; 255
    37c8:	c1 f7       	brne	.-16     	; 0x37ba <__mulsf3_pse+0x8c>
    37ca:	fe 2b       	or	r31, r30
    37cc:	88 0f       	add	r24, r24
    37ce:	91 1d       	adc	r25, r1
    37d0:	96 95       	lsr	r25
    37d2:	87 95       	ror	r24
    37d4:	97 f9       	bld	r25, 7
    37d6:	08 95       	ret

000037d8 <__udivmodhi4>:
    37d8:	aa 1b       	sub	r26, r26
    37da:	bb 1b       	sub	r27, r27
    37dc:	51 e1       	ldi	r21, 0x11	; 17
    37de:	07 c0       	rjmp	.+14     	; 0x37ee <__udivmodhi4_ep>

000037e0 <__udivmodhi4_loop>:
    37e0:	aa 1f       	adc	r26, r26
    37e2:	bb 1f       	adc	r27, r27
    37e4:	a6 17       	cp	r26, r22
    37e6:	b7 07       	cpc	r27, r23
    37e8:	10 f0       	brcs	.+4      	; 0x37ee <__udivmodhi4_ep>
    37ea:	a6 1b       	sub	r26, r22
    37ec:	b7 0b       	sbc	r27, r23

000037ee <__udivmodhi4_ep>:
    37ee:	88 1f       	adc	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	5a 95       	dec	r21
    37f4:	a9 f7       	brne	.-22     	; 0x37e0 <__udivmodhi4_loop>
    37f6:	80 95       	com	r24
    37f8:	90 95       	com	r25
    37fa:	bc 01       	movw	r22, r24
    37fc:	cd 01       	movw	r24, r26
    37fe:	08 95       	ret

00003800 <__udivmodsi4>:
    3800:	a1 e2       	ldi	r26, 0x21	; 33
    3802:	1a 2e       	mov	r1, r26
    3804:	aa 1b       	sub	r26, r26
    3806:	bb 1b       	sub	r27, r27
    3808:	fd 01       	movw	r30, r26
    380a:	0d c0       	rjmp	.+26     	; 0x3826 <__udivmodsi4_ep>

0000380c <__udivmodsi4_loop>:
    380c:	aa 1f       	adc	r26, r26
    380e:	bb 1f       	adc	r27, r27
    3810:	ee 1f       	adc	r30, r30
    3812:	ff 1f       	adc	r31, r31
    3814:	a2 17       	cp	r26, r18
    3816:	b3 07       	cpc	r27, r19
    3818:	e4 07       	cpc	r30, r20
    381a:	f5 07       	cpc	r31, r21
    381c:	20 f0       	brcs	.+8      	; 0x3826 <__udivmodsi4_ep>
    381e:	a2 1b       	sub	r26, r18
    3820:	b3 0b       	sbc	r27, r19
    3822:	e4 0b       	sbc	r30, r20
    3824:	f5 0b       	sbc	r31, r21

00003826 <__udivmodsi4_ep>:
    3826:	66 1f       	adc	r22, r22
    3828:	77 1f       	adc	r23, r23
    382a:	88 1f       	adc	r24, r24
    382c:	99 1f       	adc	r25, r25
    382e:	1a 94       	dec	r1
    3830:	69 f7       	brne	.-38     	; 0x380c <__udivmodsi4_loop>
    3832:	60 95       	com	r22
    3834:	70 95       	com	r23
    3836:	80 95       	com	r24
    3838:	90 95       	com	r25
    383a:	9b 01       	movw	r18, r22
    383c:	ac 01       	movw	r20, r24
    383e:	bd 01       	movw	r22, r26
    3840:	cf 01       	movw	r24, r30
    3842:	08 95       	ret

00003844 <__tablejump2__>:
    3844:	ee 0f       	add	r30, r30
    3846:	ff 1f       	adc	r31, r31
    3848:	05 90       	lpm	r0, Z+
    384a:	f4 91       	lpm	r31, Z
    384c:	e0 2d       	mov	r30, r0
    384e:	09 94       	ijmp

00003850 <__prologue_saves__>:
    3850:	2f 92       	push	r2
    3852:	3f 92       	push	r3
    3854:	4f 92       	push	r4
    3856:	5f 92       	push	r5
    3858:	6f 92       	push	r6
    385a:	7f 92       	push	r7
    385c:	8f 92       	push	r8
    385e:	9f 92       	push	r9
    3860:	af 92       	push	r10
    3862:	bf 92       	push	r11
    3864:	cf 92       	push	r12
    3866:	df 92       	push	r13
    3868:	ef 92       	push	r14
    386a:	ff 92       	push	r15
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
    3878:	ca 1b       	sub	r28, r26
    387a:	db 0b       	sbc	r29, r27
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	f8 94       	cli
    3880:	de bf       	out	0x3e, r29	; 62
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	09 94       	ijmp

00003888 <__epilogue_restores__>:
    3888:	2a 88       	ldd	r2, Y+18	; 0x12
    388a:	39 88       	ldd	r3, Y+17	; 0x11
    388c:	48 88       	ldd	r4, Y+16	; 0x10
    388e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3890:	6e 84       	ldd	r6, Y+14	; 0x0e
    3892:	7d 84       	ldd	r7, Y+13	; 0x0d
    3894:	8c 84       	ldd	r8, Y+12	; 0x0c
    3896:	9b 84       	ldd	r9, Y+11	; 0x0b
    3898:	aa 84       	ldd	r10, Y+10	; 0x0a
    389a:	b9 84       	ldd	r11, Y+9	; 0x09
    389c:	c8 84       	ldd	r12, Y+8	; 0x08
    389e:	df 80       	ldd	r13, Y+7	; 0x07
    38a0:	ee 80       	ldd	r14, Y+6	; 0x06
    38a2:	fd 80       	ldd	r15, Y+5	; 0x05
    38a4:	0c 81       	ldd	r16, Y+4	; 0x04
    38a6:	1b 81       	ldd	r17, Y+3	; 0x03
    38a8:	aa 81       	ldd	r26, Y+2	; 0x02
    38aa:	b9 81       	ldd	r27, Y+1	; 0x01
    38ac:	ce 0f       	add	r28, r30
    38ae:	d1 1d       	adc	r29, r1
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	f8 94       	cli
    38b4:	de bf       	out	0x3e, r29	; 62
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	ed 01       	movw	r28, r26
    38bc:	08 95       	ret

000038be <memcpy>:
    38be:	fb 01       	movw	r30, r22
    38c0:	dc 01       	movw	r26, r24
    38c2:	02 c0       	rjmp	.+4      	; 0x38c8 <memcpy+0xa>
    38c4:	01 90       	ld	r0, Z+
    38c6:	0d 92       	st	X+, r0
    38c8:	41 50       	subi	r20, 0x01	; 1
    38ca:	50 40       	sbci	r21, 0x00	; 0
    38cc:	d8 f7       	brcc	.-10     	; 0x38c4 <memcpy+0x6>
    38ce:	08 95       	ret

000038d0 <_exit>:
    38d0:	f8 94       	cli

000038d2 <__stop_program>:
    38d2:	ff cf       	rjmp	.-2      	; 0x38d2 <__stop_program>
