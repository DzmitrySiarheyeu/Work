<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_OBJ\Pipelines.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_OBJ\Pipelines.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Jun 20 10:23:40 2016
<BR><P>
<H3>Maximum Stack Usage =        792 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e]">NMI_Handler</a><BR>
 <LI><a href="#[81]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">DebugMon_Handler</a><BR>
 <LI><a href="#[2da]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[465]">lwip_sendto</a><BR>
 <LI><a href="#[4a5]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a5]">netconn_drain</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9a]">ADC_IRQ</a> from user_task1.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[43]">AverageFunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[9b]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4e]">ButtonFunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[a6]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9d]">CAN_IRQ</a> from user_task1.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17f]">CONFIG_process</a> from http_cgi.o(.text) referenced from http_cgi.o(.constdata)
 <LI><a href="#[13e]">ClockIOCtl</a> from rtc_lpc17xx.o(.text) referenced from rtc_lpc17xx.o(.constdata)
 <LI><a href="#[136]">CloseClock</a> from rtc_lpc17xx.o(.text) referenced from rtc_lpc17xx.o(.constdata)
 <LI><a href="#[116]">CloseDiscrete</a> from discrete_lpc17xx.o(.text) referenced from discrete_lpc17xx.o(.constdata)
 <LI><a href="#[140]">CloseFlash</a> from m25pe80.o(.text) referenced from m25pe80.o(.constdata)
 <LI><a href="#[10a]">CloseI2C</a> from i2c_lpc17xx.o(.text) referenced 2 times from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[14a]">CloseImp</a> from impulse_lpc17xx.o(.text) referenced from impulse_lpc17xx.o(.constdata)
 <LI><a href="#[100]">CloseMBS</a> from mb_server_device.o(.text) referenced from mb_server_device.o(.constdata)
 <LI><a href="#[154]">CloseModem</a> from modemdrv.o(.text) referenced from modemdrv.o(.constdata)
 <LI><a href="#[e5]">CloseSSP</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[fb]">CloseSTATS</a> from all_stats.o(.text) referenced from all_stats.o(.constdata)
 <LI><a href="#[120]">CloseSaver</a> from saver.o(.text) referenced from saver.o(.constdata)
 <LI><a href="#[12a]">CloseTCP</a> from tcp_redirector.o(.text) referenced 2 times from tcp_redirector.o(.constdata)
 <LI><a href="#[191]">CloseUSB</a> from usb_rndis_lpc17xx.o(.text) referenced from usb_rndis_lpc17xx.o(.constdata)
 <LI><a href="#[ef]">CloseUart</a> from uart_lpc17xx.o(.text) referenced 2 times from uart_lpc17xx.o(.constdata)
 <LI><a href="#[135]">CreateClock</a> from rtc_lpc17xx.o(.text) referenced from rtc_lpc17xx.o(.constdata)
 <LI><a href="#[115]">CreateDiscrete</a> from discrete_lpc17xx.o(.text) referenced from discrete_lpc17xx.o(.constdata)
 <LI><a href="#[13f]">CreateFlash</a> from m25pe80.o(.text) referenced from m25pe80.o(.constdata)
 <LI><a href="#[109]">CreateI2C0</a> from i2c_lpc17xx.o(.text) referenced from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[113]">CreateI2C1</a> from i2c_lpc17xx.o(.text) referenced from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[149]">CreateImp</a> from impulse_lpc17xx.o(.text) referenced from impulse_lpc17xx.o(.constdata)
 <LI><a href="#[ff]">CreateMBS</a> from mb_server_device.o(.text) referenced from mb_server_device.o(.constdata)
 <LI><a href="#[153]">CreateModem</a> from sim300dz.o(.text) referenced from modemdrv.o(.constdata)
 <LI><a href="#[e4]">CreateSSP0</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[fa]">CreateSTATS</a> from all_stats.o(.text) referenced from all_stats.o(.constdata)
 <LI><a href="#[11f]">CreateSaver</a> from saver.o(.text) referenced from saver.o(.constdata)
 <LI><a href="#[129]">CreateTCP_1</a> from tcp_redirector.o(.text) referenced from tcp_redirector.o(.constdata)
 <LI><a href="#[133]">CreateTCP_2</a> from tcp_redirector.o(.text) referenced from tcp_redirector.o(.constdata)
 <LI><a href="#[190]">CreateUSB</a> from usb_rndis_lpc17xx.o(.text) referenced from usb_rndis_lpc17xx.o(.constdata)
 <LI><a href="#[ee]">CreateUart1</a> from uart_lpc17xx.o(.text) referenced from uart_lpc17xx.o(.constdata)
 <LI><a href="#[f8]">CreateUart3</a> from uart_lpc17xx.o(.text) referenced from uart_lpc17xx.o(.constdata)
 <LI><a href="#[182]">DATETIME_process</a> from http_cgi.o(.text) referenced from http_cgi.o(.constdata)
 <LI><a href="#[9e]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[81]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7f]">Default_WDTHandler</a> from wdt.o(.text) referenced 4 times from startup_lpc17xx.o(RESET)
 <LI><a href="#[4c]">DiscreteFunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[96]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[97]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[98]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[99]">EINT3_IRQ</a> from impulse_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a0]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[49]">ExpExIntermediate</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[47]">ExpIntermediate</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[181]">FILE_process</a> from http_cgi.o(.text) referenced from http_cgi.o(.constdata)
 <LI><a href="#[148]">FlashIOCtl</a> from m25pe80.o(.text) referenced from m25pe80.o(.constdata)
 <LI><a href="#[8e]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8f]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[90]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[112]">I2CIOCtl</a> from i2c_lpc17xx.o(.text) referenced 2 times from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[35c]">I2C_MasterHandler</a> from lpc17xx_i2c.o(.text) referenced from lpc17xx_i2c.o(.text)
 <LI><a href="#[35f]">I2C_SlaveHandler</a> from lpc17xx_i2c.o(.text) referenced from lpc17xx_i2c.o(.text)
 <LI><a href="#[9f]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[180]">INFO_process</a> from http_cgi.o(.text) referenced from http_cgi.o(.constdata)
 <LI><a href="#[11e]">IOCtlDiscrete</a> from discrete_lpc17xx.o(.text) referenced from discrete_lpc17xx.o(.constdata)
 <LI><a href="#[152]">IOCtlImp</a> from impulse_lpc17xx.o(.text) referenced from impulse_lpc17xx.o(.constdata)
 <LI><a href="#[108]">IOCtlMBS</a> from mb_server_device.o(.text) referenced from mb_server_device.o(.constdata)
 <LI><a href="#[ed]">IOCtlSSP</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[44]">InitAverageFunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[4f]">InitButtonFunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[4d]">InitDiscreteFunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[48]">InitExpProc</a> from datafunc.o(.text) referenced 4 times from datafunc.o(.data)
 <LI><a href="#[4b]">InitMBProc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[51]">InitMBQualFunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[46]">InitNullDataFunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[53]">InitNullFunc</a> from physfunc.o(.text) referenced 2 times from physfunc.o(.data)
 <LI><a href="#[17d]">LOGIN_process</a> from http_cgi.o(.text) referenced from http_cgi.o(.constdata)
 <LI><a href="#[d1]">LcpEchoTimeout</a> from lcp.o(.text) referenced from lcp.o(.text)
 <LI><a href="#[24b]">MBC_Task</a> from user_task1.o(.text) referenced 2 times from user_task1.o(.text)
 <LI><a href="#[50]">MBQualFunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[4a]">MBfunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[a2]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b0]">ModbusTCPTask</a> from modbustcp.o(.text) referenced from user_task1.o(.text)
 <LI><a href="#[15c]">ModemIOCtl</a> from modemdrv.o(.text) referenced from modemdrv.o(.constdata)
 <LI><a href="#[ac]">ModemTask</a> from modemtask.o(.text) referenced from user_task1.o(.text)
 <LI><a href="#[7e]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[45]">NullDataFunc</a> from datafunc.o(.text) referenced 2 times from datafunc.o(.data)
 <LI><a href="#[52]">NullFunc</a> from physfunc.o(.text) referenced 2 times from physfunc.o(.data)
 <LI><a href="#[137]">OpenClock</a> from rtc_lpc17xx.o(.text) referenced from rtc_lpc17xx.o(.constdata)
 <LI><a href="#[117]">OpenDiscrete</a> from discrete_lpc17xx.o(.text) referenced from discrete_lpc17xx.o(.constdata)
 <LI><a href="#[141]">OpenFlash</a> from m25pe80.o(.text) referenced from m25pe80.o(.constdata)
 <LI><a href="#[10b]">OpenI2C0</a> from i2c_lpc17xx.o(.text) referenced from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[114]">OpenI2C1</a> from i2c_lpc17xx.o(.text) referenced from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[14b]">OpenImp</a> from impulse_lpc17xx.o(.text) referenced from impulse_lpc17xx.o(.constdata)
 <LI><a href="#[101]">OpenMBS</a> from mb_server_device.o(.text) referenced from mb_server_device.o(.constdata)
 <LI><a href="#[155]">OpenModem</a> from modemdrv.o(.text) referenced from modemdrv.o(.constdata)
 <LI><a href="#[e6]">OpenSSP0</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[fc]">OpenSTATS</a> from all_stats.o(.text) referenced from all_stats.o(.constdata)
 <LI><a href="#[121]">OpenSaver</a> from saver.o(.text) referenced from saver.o(.constdata)
 <LI><a href="#[12b]">OpenTCP_1</a> from tcp_redirector.o(.text) referenced from tcp_redirector.o(.constdata)
 <LI><a href="#[134]">OpenTCP_2</a> from tcp_redirector.o(.text) referenced from tcp_redirector.o(.constdata)
 <LI><a href="#[192]">OpenUSB</a> from usb_rndis_lpc17xx.o(.text) referenced from usb_rndis_lpc17xx.o(.constdata)
 <LI><a href="#[f0]">OpenUart1</a> from uart_lpc17xx.o(.text) referenced from uart_lpc17xx.o(.constdata)
 <LI><a href="#[f9]">OpenUart3</a> from uart_lpc17xx.o(.text) referenced from uart_lpc17xx.o(.constdata)
 <LI><a href="#[184]">PIPELINES_process</a> from http_cgi.o(.text) referenced from http_cgi.o(.constdata)
 <LI><a href="#[94]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a4]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8d]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a3]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[183]">REINIT_process</a> from http_cgi.o(.text) referenced from http_cgi.o(.constdata)
 <LI><a href="#[a1]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[95]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[138]">ReadClock</a> from rtc_lpc17xx.o(.text) referenced from rtc_lpc17xx.o(.constdata)
 <LI><a href="#[13b]">ReadClockText</a> from rtc_lpc17xx.o(.text) referenced from rtc_lpc17xx.o(.constdata)
 <LI><a href="#[118]">ReadDiscrete</a> from discrete_lpc17xx.o(.text) referenced from discrete_lpc17xx.o(.constdata)
 <LI><a href="#[11b]">ReadDiscreteText</a> from discrete_lpc17xx.o(.text) referenced from discrete_lpc17xx.o(.constdata)
 <LI><a href="#[142]">ReadFlash</a> from m25pe80.o(.text) referenced from m25pe80.o(.constdata)
 <LI><a href="#[145]">ReadFlashText</a> from m25pe80.o(.text) referenced from m25pe80.o(.constdata)
 <LI><a href="#[10c]">ReadI2C</a> from i2c_lpc17xx.o(.text) referenced 2 times from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[10f]">ReadI2CText</a> from i2c_lpc17xx.o(.text) referenced 2 times from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[14c]">ReadImp</a> from impulse_lpc17xx.o(.text) referenced from impulse_lpc17xx.o(.constdata)
 <LI><a href="#[14f]">ReadImpText</a> from impulse_lpc17xx.o(.text) referenced from impulse_lpc17xx.o(.constdata)
 <LI><a href="#[102]">ReadMBS</a> from mb_server_device.o(.text) referenced from mb_server_device.o(.constdata)
 <LI><a href="#[105]">ReadMBSText</a> from mb_server_device.o(.text) referenced from mb_server_device.o(.constdata)
 <LI><a href="#[156]">ReadModem</a> from modemdrv.o(.text) referenced from modemdrv.o(.constdata)
 <LI><a href="#[159]">ReadModemText</a> from modemdrv.o(.text) referenced from modemdrv.o(.constdata)
 <LI><a href="#[e7]">ReadSSP</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[ea]">ReadSSPText</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[fd]">ReadSTATSText</a> from all_stats.o(.text) referenced from all_stats.o(.constdata)
 <LI><a href="#[122]">ReadSaver</a> from saver.o(.text) referenced from saver.o(.constdata)
 <LI><a href="#[125]">ReadSaverText</a> from saver.o(.text) referenced from saver.o(.constdata)
 <LI><a href="#[12c]">ReadTCP</a> from tcp_redirector.o(.text) referenced 2 times from tcp_redirector.o(.constdata)
 <LI><a href="#[12f]">ReadTCPText</a> from tcp_redirector.o(.text) referenced 2 times from tcp_redirector.o(.constdata)
 <LI><a href="#[193]">ReadUSB</a> from usb_rndis_lpc17xx.o(.text) referenced from usb_rndis_lpc17xx.o(.constdata)
 <LI><a href="#[197]">ReadUSBText</a> from usb_rndis_lpc17xx.o(.text) referenced from usb_rndis_lpc17xx.o(.constdata)
 <LI><a href="#[f1]">ReadUart</a> from uart_lpc17xx.o(.text) referenced 2 times from uart_lpc17xx.o(.constdata)
 <LI><a href="#[f4]">ReadUartText</a> from uart_lpc17xx.o(.text) referenced 2 times from uart_lpc17xx.o(.constdata)
 <LI><a href="#[250]">ResetTask</a> from user_task1.o(.text) referenced from user_task1.o(.text)
 <LI><a href="#[7d]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17e]">SENSOR_process</a> from http_cgi.o(.text) referenced from http_cgi.o(.constdata)
 <LI><a href="#[91]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[92]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[93]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[128]">SaverIOCtl</a> from saver.o(.text) referenced from saver.o(.constdata)
 <LI><a href="#[13a]">SeekClock</a> from rtc_lpc17xx.o(.text) referenced from rtc_lpc17xx.o(.constdata)
 <LI><a href="#[13d]">SeekClockText</a> from rtc_lpc17xx.o(.text) referenced from rtc_lpc17xx.o(.constdata)
 <LI><a href="#[11a]">SeekDiscrete</a> from discrete_lpc17xx.o(.text) referenced from discrete_lpc17xx.o(.constdata)
 <LI><a href="#[11d]">SeekDiscreteText</a> from discrete_lpc17xx.o(.text) referenced from discrete_lpc17xx.o(.constdata)
 <LI><a href="#[144]">SeekFlash</a> from m25pe80.o(.text) referenced from m25pe80.o(.constdata)
 <LI><a href="#[147]">SeekFlashText</a> from m25pe80.o(.text) referenced from m25pe80.o(.constdata)
 <LI><a href="#[10e]">SeekI2C</a> from i2c_lpc17xx.o(.text) referenced 2 times from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[111]">SeekI2CText</a> from i2c_lpc17xx.o(.text) referenced 2 times from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[14e]">SeekImp</a> from impulse_lpc17xx.o(.text) referenced from impulse_lpc17xx.o(.constdata)
 <LI><a href="#[151]">SeekImpText</a> from impulse_lpc17xx.o(.text) referenced from impulse_lpc17xx.o(.constdata)
 <LI><a href="#[104]">SeekMBS</a> from mb_server_device.o(.text) referenced from mb_server_device.o(.constdata)
 <LI><a href="#[107]">SeekMBSText</a> from mb_server_device.o(.text) referenced from mb_server_device.o(.constdata)
 <LI><a href="#[158]">SeekModem</a> from modemdrv.o(.text) referenced from modemdrv.o(.constdata)
 <LI><a href="#[15b]">SeekModemText</a> from modemdrv.o(.text) referenced from modemdrv.o(.constdata)
 <LI><a href="#[e9]">SeekSSP</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[ec]">SeekSSPText</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[fe]">SeekSTATSText</a> from all_stats.o(.text) referenced from all_stats.o(.constdata)
 <LI><a href="#[124]">SeekSaver</a> from saver.o(.text) referenced from saver.o(.constdata)
 <LI><a href="#[127]">SeekSaverText</a> from saver.o(.text) referenced from saver.o(.constdata)
 <LI><a href="#[12e]">SeekTCP</a> from tcp_redirector.o(.text) referenced 2 times from tcp_redirector.o(.constdata)
 <LI><a href="#[131]">SeekTCPText</a> from tcp_redirector.o(.text) referenced 2 times from tcp_redirector.o(.constdata)
 <LI><a href="#[f3]">SeekUART</a> from uart_lpc17xx.o(.text) referenced 2 times from uart_lpc17xx.o(.constdata)
 <LI><a href="#[f6]">SeekUARTText</a> from uart_lpc17xx.o(.text) referenced 2 times from uart_lpc17xx.o(.constdata)
 <LI><a href="#[195]">SeekUSB</a> from usb_rndis_lpc17xx.o(.text) referenced from usb_rndis_lpc17xx.o(.constdata)
 <LI><a href="#[198]">SeekUSBText</a> from usb_rndis_lpc17xx.o(.text) referenced from usb_rndis_lpc17xx.o(.constdata)
 <LI><a href="#[132]">TCPIOCtl</a> from tcp_redirector.o(.text) referenced 2 times from tcp_redirector.o(.constdata)
 <LI><a href="#[85]">TIMER0_IRQ</a> from user_task1.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[86]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[87]">TIMER2_IRQ</a> from user_task1.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[88]">TIMER3_IRQ</a> from user_task1.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[ae]">TelnetTask</a> from telnet.o(.text) referenced from user_task1.o(.text)
 <LI><a href="#[89]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8a]">UART1_IRQHandler</a> from uart_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8b]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8c]">UART3_IRQHandler</a> from uart_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a5]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[199]">USBIOCtl</a> from usb_rndis_lpc17xx.o(.text) referenced from usb_rndis_lpc17xx.o(.constdata)
 <LI><a href="#[9c]">USB_IRQHandler</a> from hal_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[ab]">UartControlTask</a> from uartcontroltask.o(.text) referenced from user_task1.o(.text)
 <LI><a href="#[f7]">UartIOCtl</a> from uart_lpc17xx.o(.text) referenced 2 times from uart_lpc17xx.o(.constdata)
 <LI><a href="#[aa]">UserTask</a> from user_task1.o(.text) referenced from main.o(.text)
 <LI><a href="#[42]">WDTCountersInc</a> from wdt.o(.text) referenced 2 times from user_timers.o(.data)
 <LI><a href="#[84]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[139]">WriteClock</a> from rtc_lpc17xx.o(.text) referenced from rtc_lpc17xx.o(.constdata)
 <LI><a href="#[13c]">WriteClockText</a> from rtc_lpc17xx.o(.text) referenced from rtc_lpc17xx.o(.constdata)
 <LI><a href="#[119]">WriteDiscrete</a> from discrete_lpc17xx.o(.text) referenced from discrete_lpc17xx.o(.constdata)
 <LI><a href="#[11c]">WriteDiscreteText</a> from discrete_lpc17xx.o(.text) referenced from discrete_lpc17xx.o(.constdata)
 <LI><a href="#[143]">WriteFlash</a> from m25pe80.o(.text) referenced from m25pe80.o(.constdata)
 <LI><a href="#[146]">WriteFlashText</a> from m25pe80.o(.text) referenced from m25pe80.o(.constdata)
 <LI><a href="#[10d]">WriteI2C</a> from i2c_lpc17xx.o(.text) referenced 2 times from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[110]">WriteI2CText</a> from i2c_lpc17xx.o(.text) referenced 2 times from i2c_lpc17xx.o(.constdata)
 <LI><a href="#[14d]">WriteImp</a> from impulse_lpc17xx.o(.text) referenced from impulse_lpc17xx.o(.constdata)
 <LI><a href="#[150]">WriteImpText</a> from impulse_lpc17xx.o(.text) referenced from impulse_lpc17xx.o(.constdata)
 <LI><a href="#[103]">WriteMBS</a> from mb_server_device.o(.text) referenced from mb_server_device.o(.constdata)
 <LI><a href="#[106]">WriteMBSText</a> from mb_server_device.o(.text) referenced from mb_server_device.o(.constdata)
 <LI><a href="#[157]">WriteModem</a> from modemdrv.o(.text) referenced from modemdrv.o(.constdata)
 <LI><a href="#[15a]">WriteModemText</a> from modemdrv.o(.text) referenced from modemdrv.o(.constdata)
 <LI><a href="#[e8]">WriteSSP</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[eb]">WriteSSPText</a> from ssp_lpc17xx.o(.text) referenced from ssp_lpc17xx.o(.constdata)
 <LI><a href="#[123]">WriteSaver</a> from saver.o(.text) referenced from saver.o(.constdata)
 <LI><a href="#[126]">WriteSaverText</a> from saver.o(.text) referenced from saver.o(.constdata)
 <LI><a href="#[12d]">WriteTCP</a> from tcp_redirector.o(.text) referenced 2 times from tcp_redirector.o(.constdata)
 <LI><a href="#[130]">WriteTCPText</a> from tcp_redirector.o(.text) referenced 2 times from tcp_redirector.o(.constdata)
 <LI><a href="#[194]">WriteUSB</a> from usb_rndis_lpc17xx.o(.text) referenced from usb_rndis_lpc17xx.o(.constdata)
 <LI><a href="#[196]">WriteUSBText</a> from usb_rndis_lpc17xx.o(.text) referenced from usb_rndis_lpc17xx.o(.constdata)
 <LI><a href="#[f2]">WriteUart</a> from uart_lpc17xx.o(.text) referenced 2 times from uart_lpc17xx.o(.constdata)
 <LI><a href="#[f5]">WriteUartText</a> from uart_lpc17xx.o(.text) referenced 2 times from uart_lpc17xx.o(.constdata)
 <LI><a href="#[a8]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[de]">_sbackspace</a> from _sgetc.o(.text) referenced 3 times from sscanf.o(.text)
 <LI><a href="#[df]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[dd]">_sgetc</a> from _sgetc.o(.text) referenced 3 times from sscanf.o(.text)
 <LI><a href="#[e2]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[e3]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[e3]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[c7]">accept_function</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[b1]">arp_timer</a> from usb_netif.o(.text) referenced 2 times from usb_netif.o(.text)
 <LI><a href="#[1]">at45_VFS_close</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[f]">at45_VFS_closedir</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[8]">at45_VFS_fseek</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[5]">at45_VFS_fsync</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[10]">at45_VFS_get_free</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[6]">at45_VFS_mkdir</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[a]">at45_VFS_mount</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[0]">at45_VFS_open</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[e]">at45_VFS_opendir</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[2]">at45_VFS_read</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[d]">at45_VFS_readdir</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[c]">at45_VFS_rename</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[7]">at45_VFS_rmdir</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[9]">at45_VFS_stat</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[4]">at45_VFS_truncate</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[b]">at45_VFS_unmount</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[3]">at45_VFS_write</a> from at45db161d.o(.text) referenced 2 times from at45db161d.o(.data)
 <LI><a href="#[188]">cd</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[187]">cd_dot_dot</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[ce]">check_idle</a> from auth.o(.text) referenced 2 times from auth.o(.text)
 <LI><a href="#[cf]">connect_time_expired</a> from auth.o(.text) referenced from auth.o(.text)
 <LI><a href="#[18b]">date</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[186]">dir</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[b8]">do_bind</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[bf]">do_close</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[b9]">do_connect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[c6]">do_connected</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[b6]">do_delconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[ba]">do_disconnect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[b7]">do_getaddr</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[bb]">do_listen</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[b5]">do_newconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[bc]">do_recv</a> from api_msg.o(.text) referenced 2 times from api_lib.o(.text)
 <LI><a href="#[bd]">do_send</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[be]">do_write</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[12]">drv_VFS_close</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[1f]">drv_VFS_closedir</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[18]">drv_VFS_fseek</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[15]">drv_VFS_fsync</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[20]">drv_VFS_get_free</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[16]">drv_VFS_mkdir</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[1a]">drv_VFS_mount</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[11]">drv_VFS_open</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[1e]">drv_VFS_opendir</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[13]">drv_VFS_read</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[1d]">drv_VFS_readdir</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[1c]">drv_VFS_rename</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[17]">drv_VFS_rmdir</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[19]">drv_VFS_stat</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[1b]">drv_VFS_unmount</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[14]">drv_VFS_write</a> from drivers.o(.text) referenced 2 times from drivers.o(.data)
 <LI><a href="#[c2]">err_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[470]">ethernetif_init</a> from usb_netif.o(.text) referenced from usb_netif.o(.text)
 <LI><a href="#[46b]">ethernetif_input</a> from usb_netif.o(.text) referenced from usb_netif.o(.text)
 <LI><a href="#[b2]">ethernetif_output</a> from usb_netif.o(.text) referenced from usb_netif.o(.text)
 <LI><a href="#[c8]">event_callback</a> from sockets.o(.text) referenced 2 times from sockets.o(.text)
 <LI><a href="#[af]">events_task</a> from user_events.o(.text) referenced from user_task1.o(.text)
 <LI><a href="#[18c]">firm</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[e1]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[d0]">fsm_timeout</a> from fsm.o(.text) referenced 3 times from fsm.o(.text)
 <LI><a href="#[16e]">ftcmd_abor</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[160]">ftcmd_acct</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[174]">ftcmd_allo</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[17c]">ftcmd_appe</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[165]">ftcmd_cdup</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[164]">ftcmd_cwd</a> from ftpd.o(.text) referenced 2 times from ftpd.o(.constdata)
 <LI><a href="#[16f]">ftcmd_dele</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[178]">ftcmd_help</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[167]">ftcmd_list</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[16d]">ftcmd_mdtm</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[172]">ftcmd_mkd</a> from ftpd.o(.text) referenced 2 times from ftpd.o(.constdata)
 <LI><a href="#[16a]">ftcmd_mode</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[168]">ftcmd_nlst</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[176]">ftcmd_noop</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[15e]">ftcmd_pass</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[162]">ftcmd_pasv</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[161]">ftcmd_port</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[163]">ftcmd_pwd</a> from ftpd.o(.text) referenced 2 times from ftpd.o(.constdata)
 <LI><a href="#[179]">ftcmd_quit</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[17a]">ftcmd_rein</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[166]">ftcmd_rest</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[15f]">ftcmd_retr</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[173]">ftcmd_rmd</a> from ftpd.o(.text) referenced 2 times from ftpd.o(.constdata)
 <LI><a href="#[170]">ftcmd_rnfr</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[171]">ftcmd_rnto</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[16c]">ftcmd_size</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[175]">ftcmd_stat</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[17b]">ftcmd_stor</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[16b]">ftcmd_stru</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[177]">ftcmd_syst</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[169]">ftcmd_type</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[15d]">ftcmd_user</a> from ftpd.o(.text) referenced from ftpd.o(.constdata)
 <LI><a href="#[18e]">help</a> from shell.o(.text) referenced 2 times from shell.o(.constdata)
 <LI><a href="#[428]">httpTask</a> from http_server.o(.text) referenced from http_server.o(.text)
 <LI><a href="#[d5]">ip_input</a> from ip.o(.text) referenced from ppp.o(.text)
 <LI><a href="#[db]">ip_reass_timer</a> from lwip_timers.o(.text) referenced from lwip_timers.o(.text)
 <LI><a href="#[57]">ipcp_ackci</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[56]">ipcp_addci</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[55]">ipcp_cilen</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[64]">ipcp_close</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[5c]">ipcp_down</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[5d]">ipcp_finished</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[5e]">ipcp_init</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[5f]">ipcp_input</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[62]">ipcp_lowerdown</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[61]">ipcp_lowerup</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[58]">ipcp_nakci</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[63]">ipcp_open</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[60]">ipcp_protrej</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[59]">ipcp_rejci</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[5a]">ipcp_reqci</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[54]">ipcp_resetci</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[5b]">ipcp_up</a> from ipcp.o(.text) referenced 2 times from ipcp.o(.data)
 <LI><a href="#[e0]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[68]">lcp_ackci</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[67]">lcp_addci</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[66]">lcp_cilen</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[77]">lcp_close</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[6d]">lcp_down</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[70]">lcp_extcode</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[6f]">lcp_finished</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[71]">lcp_init</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[72]">lcp_input</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[75]">lcp_lowerdown</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[74]">lcp_lowerup</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[69]">lcp_nakci</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[76]">lcp_open</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[73]">lcp_protrej</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[6a]">lcp_rejci</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[6b]">lcp_reqci</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[65]">lcp_resetci</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[6e]">lcp_starting</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[6c]">lcp_up</a> from lcp.o(.text) referenced 2 times from lcp.o(.data)
 <LI><a href="#[b3]">low_level_output</a> from usb_netif.o(.text) referenced from usb_netif.o(.text)
 <LI><a href="#[c9]">lwip_getsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[ca]">lwip_setsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[a7]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[cd]">mem_free</a> from mem.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[543]">netif_poll</a> from netif.o(.text) referenced from netif.o(.text)
 <LI><a href="#[185]">open</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[18d]">option</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[cc]">pbuf_free_int</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[d8]">pbuf_free_ooseq</a> from pbuf.o(.text) referenced from pbuf.o(.text)
 <LI><a href="#[c1]">poll_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[d7]">pppInput</a> from ppp.o(.text) referenced from ppp.o(.text)
 <LI><a href="#[d6]">pppifNetifInit</a> from ppp.o(.text) referenced from ppp.o(.text)
 <LI><a href="#[d4]">pppifOutput</a> from ppp.o(.text) referenced from ppp.o(.text)
 <LI><a href="#[41]">proc_led</a> from user_task1.o(.text) referenced 2 times from user_timers.o(.data)
 <LI><a href="#[a9]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[c4]">recv_raw</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[c3]">recv_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[c5]">recv_udp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[22]">sens_VFS_close</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[2f]">sens_VFS_closedir</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[28]">sens_VFS_fseek</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[25]">sens_VFS_fsync</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[30]">sens_VFS_get_free</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[26]">sens_VFS_mkdir</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[2a]">sens_VFS_mount</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[21]">sens_VFS_open</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[2e]">sens_VFS_opendir</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[23]">sens_VFS_read</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[2d]">sens_VFS_readdir</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[2c]">sens_VFS_rename</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[27]">sens_VFS_rmdir</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[29]">sens_VFS_stat</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[2b]">sens_VFS_unmount</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[24]">sens_VFS_write</a> from sensors.o(.text) referenced 2 times from sensors.o(.data)
 <LI><a href="#[c0]">sent_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[189]">stat</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[32]">svr_VFS_close</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[3f]">svr_VFS_closedir</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[38]">svr_VFS_fseek</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[35]">svr_VFS_fsync</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[40]">svr_VFS_get_free</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[36]">svr_VFS_mkdir</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[3a]">svr_VFS_mount</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[31]">svr_VFS_open</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[3e]">svr_VFS_opendir</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[33]">svr_VFS_read</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[3d]">svr_VFS_readdir</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[3c]">svr_VFS_rename</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[37]">svr_VFS_rmdir</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[39]">svr_VFS_stat</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[3b]">svr_VFS_unmount</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[34]">svr_VFS_write</a> from saver_fs.o(.text) referenced 2 times from saver_fs.o(.data)
 <LI><a href="#[d9]">tcp_accept_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[55f]">tcp_recv_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[b4]">tcpip_input</a> from tcpip.o(.text) referenced from usb_netif.o(.text)
 <LI><a href="#[da]">tcpip_tcp_timer</a> from lwip_timers.o(.text) referenced from lwip_timers.o(.text)
 <LI><a href="#[cb]">tcpip_thread</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[18a]">time</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[43b]">tl_accept_pool</a> from telnet.o(.text) referenced from telnet.o(.text)
 <LI><a href="#[43d]">tl_pool</a> from telnet.o(.text) referenced from telnet.o(.text)
 <LI><a href="#[18f]">unknown</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[78]">upap_init</a> from pap.o(.text) referenced 2 times from pap.o(.data)
 <LI><a href="#[79]">upap_input</a> from pap.o(.text) referenced 2 times from pap.o(.data)
 <LI><a href="#[7c]">upap_lowerdown</a> from pap.o(.text) referenced 2 times from pap.o(.data)
 <LI><a href="#[7b]">upap_lowerup</a> from pap.o(.text) referenced 2 times from pap.o(.data)
 <LI><a href="#[7a]">upap_protrej</a> from pap.o(.text) referenced 2 times from pap.o(.data)
 <LI><a href="#[d3]">upap_reqtimeout</a> from pap.o(.text) referenced 2 times from pap.o(.text)
 <LI><a href="#[d2]">upap_timeout</a> from pap.o(.text) referenced from pap.o(.text)
 <LI><a href="#[ad]">vFTPServer</a> from ftpd.o(.text) referenced from user_task1.o(.text)
 <LI><a href="#[62f]">vModemPPPStatusCB</a> from modemtask.o(.text) referenced from modemtask.o(.text)
 <LI><a href="#[80]">vPortSVCHandler</a> from port.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[82]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[83]">xPortSysTickHandler</a> from port.o(.text) referenced from startup_lpc17xx.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a8]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[667]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[19a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[65a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[668]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[669]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[66a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[66b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[66c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[80]"></a>vPortSVCHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22f]"></a>vPortStartFirstTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[82]"></a>xPortPendSVHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortPendSVHandler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1fb]"></a>vPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1fc]"></a>vPortClearInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[26b]"></a>go_to_boot</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_task1.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
</UL>

<P><STRONG><a name="[260]"></a>debug_puts_RTOS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_con
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSaver
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSaver
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSaver
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDiscrete
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDiscrete
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDiscrete
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C0
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMBS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSTATS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSTATS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSTATS
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseUart
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUart3
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUart1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSSP0
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateModem
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseModem
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenModem
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseImp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenImp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateImp
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlash
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenClock
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendData
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUSB
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemPPPStatusCB
</UL>

<P><STRONG><a name="[479]"></a>debug_printf_RTOS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInput
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemPPPStatusCB
</UL>

<P><STRONG><a name="[460]"></a>debug_vprintf_RTOS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug_system.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_trace
</UL>

<P><STRONG><a name="[19f]"></a>getkey</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[e1]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fputc &rArr; LCD_putchar &rArr; LCD_put_symbol &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[19e]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[66d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[66e]"></a>_ttywrch</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[66f]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
</UL>

<P><STRONG><a name="[208]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[20d]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[213]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[20f]"></a>vListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[7d]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a0]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1a1]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[1a2]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[1a3]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[1a4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[81]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1a6]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1a7]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[670]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[671]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[672]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[673]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[674]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[524]"></a>magicInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, magic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInit
</UL>

<P><STRONG><a name="[1a8]"></a>magic</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, magic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = magic &rArr; avRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRandom
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_resetci
</UL>

<P><STRONG><a name="[1aa]"></a>lwip_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lwip_init &rArr; mem_init &rArr; sys_sem_new &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sanity_check
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[0]"></a>at45_VFS_open</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = at45_VFS_open &rArr; f_open &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>at45_VFS_close</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = at45_VFS_close &rArr; f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>at45_VFS_read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = at45_VFS_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>at45_VFS_write</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = at45_VFS_write &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>at45_VFS_get_free</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = at45_VFS_get_free &rArr; f_getfree &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>at45_VFS_truncate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = at45_VFS_truncate &rArr; f_truncate &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>at45_VFS_fsync</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = at45_VFS_fsync &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>at45_VFS_mkdir</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = at45_VFS_mkdir &rArr; f_mkdir &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>at45_VFS_rmdir</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = at45_VFS_rmdir &rArr; f_unlink &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>at45_VFS_fseek</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = at45_VFS_fseek &rArr; f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>at45_VFS_stat</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = at45_VFS_stat &rArr; f_stat &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_root
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>at45_VFS_mount</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = at45_VFS_mount &rArr; f_mount &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>at45_VFS_unmount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at45db161d.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>at45_VFS_rename</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at45_VFS_rename &rArr; f_rename &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>at45_VFS_opendir</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = at45_VFS_opendir &rArr; f_opendir &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_root
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>at45_VFS_closedir</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = at45_VFS_closedir &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>at45_VFS_readdir</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, at45db161d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = at45_VFS_readdir &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at45db161d.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>drv_VFS_open</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_VFS_open &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDeviceText
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>drv_VFS_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_VFS_read &rArr; ReadDeviceText
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>drv_VFS_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_VFS_write &rArr; WriteDeviceText
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>drv_VFS_fseek</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_VFS_fseek &rArr; SeekDeviceText
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDeviceText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>drv_VFS_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_VFS_close &rArr; CloseDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>drv_VFS_fsync</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drivers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>drv_VFS_mkdir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drivers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>drv_VFS_rmdir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drivers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>drv_VFS_get_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drivers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>drv_VFS_stat</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_VFS_stat &rArr; is_root
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_root
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>drv_VFS_mount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drivers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>drv_VFS_unmount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drivers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>drv_VFS_rename</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drivers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>drv_VFS_readdir</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_VFS_readdir &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDeviceText
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>drv_VFS_opendir</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_VFS_opendir &rArr; is_root
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_root
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>drv_VFS_closedir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drivers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.data)
</UL>
<P><STRONG><a name="[1cb]"></a>get_filename</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drivers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>

<P><STRONG><a name="[21]"></a>sens_VFS_open</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sens_VFS_open &rArr; OpenSensorProc &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSensorText
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>sens_VFS_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sens_VFS_read &rArr; ReadSensorText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>sens_VFS_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>sens_VFS_get_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>sens_VFS_fseek</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sens_VFS_fseek &rArr; SeekSensorText
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSensorText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>sens_VFS_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>sens_VFS_fsync</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>sens_VFS_mkdir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>sens_VFS_rmdir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[1d0]"></a>is_sensor_opened</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_sensor_opened &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_VFS_stat
</UL>

<P><STRONG><a name="[29]"></a>sens_VFS_stat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sens_VFS_stat &rArr; is_sensor_opened &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sensor_opened
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_root
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>sens_VFS_mount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>sens_VFS_unmount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>sens_VFS_rename</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>sens_VFS_readdir</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sens_VFS_readdir
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>sens_VFS_opendir</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sens_VFS_opendir &rArr; is_root
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_root
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>sens_VFS_closedir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.data)
</UL>
<P><STRONG><a name="[248]"></a>VFS_reg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VFS
</UL>

<P><STRONG><a name="[1d2]"></a>VFS_get</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_closedir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_opendir
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_readdir
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_unmount
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_mount
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_stat
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_fseek
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get_free
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rmdir
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_mkdir
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_fsync
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_truncate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_write
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_read
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
</UL>

<P><STRONG><a name="[1d3]"></a>VFS_get_path</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VFS_get_path
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_opendir
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_stat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rmdir
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_mkdir
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
</UL>

<P><STRONG><a name="[1d5]"></a>VFS_open</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VFS_open &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get_path
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_browse
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getkey
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getsection
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_gets
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_retr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execStore
</UL>

<P><STRONG><a name="[1d6]"></a>VFS_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VFS_close &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_browse
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getkey
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_rename
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getsection
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_gets
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
</UL>

<P><STRONG><a name="[1d7]"></a>VFS_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VFS_read &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleDownload
</UL>

<P><STRONG><a name="[1d8]"></a>VFS_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VFS_write &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleUpload
</UL>

<P><STRONG><a name="[1d9]"></a>VFS_truncate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VFS_truncate &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
</UL>

<P><STRONG><a name="[1da]"></a>VFS_fsync</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>

<P><STRONG><a name="[1db]"></a>VFS_mkdir</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VFS_mkdir &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get_path
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_mkd
</UL>

<P><STRONG><a name="[1dc]"></a>VFS_rmdir</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VFS_rmdir &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get_path
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_rename
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_dele
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
</UL>

<P><STRONG><a name="[1dd]"></a>VFS_get_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>

<P><STRONG><a name="[1de]"></a>VFS_fseek</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VFS_fseek &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_flush
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_initTransfer
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_prepTransfer
</UL>

<P><STRONG><a name="[1df]"></a>VFS_stat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VFS_stat &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get_path
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getNextDirEntry
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_size
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rnfr
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_changeCurrentPath
</UL>

<P><STRONG><a name="[1e0]"></a>VFS_mount</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VFS_mount &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VFS
</UL>

<P><STRONG><a name="[1e1]"></a>VFS_unmount</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, vfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>

<P><STRONG><a name="[1e2]"></a>VFS_rename</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VFS_rename &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get_path
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rnto
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
</UL>

<P><STRONG><a name="[1e3]"></a>VFS_readdir</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VFS_readdir &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getNextDirEntry
</UL>

<P><STRONG><a name="[1e4]"></a>VFS_opendir</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VFS_opendir &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get_path
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getNextDirEntry
</UL>

<P><STRONG><a name="[1e5]"></a>VFS_closedir</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VFS_closedir &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getNextDirEntry
</UL>

<P><STRONG><a name="[1bf]"></a>is_root</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_root
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_VFS_opendir
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_VFS_stat
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_VFS_opendir
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_VFS_stat
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_opendir
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_stat
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_opendir
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_stat
</UL>

<P><STRONG><a name="[31]"></a>svr_VFS_open</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, saver_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svr_VFS_open &rArr; GetSaverFile &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSaverFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>svr_VFS_read</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, saver_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svr_VFS_read &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDeviceText
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceText
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>svr_VFS_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>svr_VFS_get_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>svr_VFS_fseek</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>svr_VFS_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>svr_VFS_fsync</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>svr_VFS_mkdir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>svr_VFS_rmdir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>svr_VFS_stat</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, saver_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svr_VFS_stat &rArr; is_root
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_root
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>svr_VFS_mount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>svr_VFS_unmount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>svr_VFS_rename</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>svr_VFS_readdir</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, saver_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svr_VFS_readdir
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>svr_VFS_opendir</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, saver_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svr_VFS_opendir &rArr; is_root
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_root
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>svr_VFS_closedir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, saver_fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver_fs.o(.data)
</UL>
<P><STRONG><a name="[1e7]"></a>xQueueCreate</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTCP_2
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTCP_1
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C0
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMBS
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSSP0
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSMS
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLog
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvents
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMyHTTP
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetTask
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_synk_init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUSB
</UL>

<P><STRONG><a name="[1f2]"></a>xQueueGenericSend</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTCP
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_mem_chain
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTCP_2
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTCP_1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseI2C
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C0
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseMBS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMBS
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIOCtl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSSP
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSSP0
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartControlTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLog
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToComQueue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwakeResetTask
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_synk_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonFunc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutEvenToQueue
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_write
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_tryread
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMINAL_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseUSB
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUSB
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_queue_proc
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToModem
</UL>

<P><STRONG><a name="[1f9]"></a>xQueueCreateMutex</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1fa]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_interupt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_interupt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwakeResetTask
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_timers
</UL>

<P><STRONG><a name="[1ff]"></a>xQueueGenericReceive</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_pool
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_mem_chain
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenI2C1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenI2C0
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMBS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUart
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUart
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSSP0
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartControlTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetTask
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_write
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_tryread
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMINAL_process
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUSB
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_queue_proc
</UL>

<P><STRONG><a name="[202]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>

<P><STRONG><a name="[203]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxQueueMessagesWaiting &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[675]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>vQueueDelete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[676]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[677]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>xTaskGenericCreate</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[20e]"></a>vTaskDelete</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBInterfaceDown
</UL>

<P><STRONG><a name="[210]"></a>vTaskIncrementTick</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1f8]"></a>xTaskResumeAll</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[1f5]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[212]"></a>vTaskDelay</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFTPServer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_task
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartControlTask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusTCPTask
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverSystem
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_reset
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Task
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_modem_to_online
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_modem_from_online
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_name
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ussd_send
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_turn_off
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_oper_check
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemGPRSConnect
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_gprs_connect
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpTask
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendData
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Stream_LE
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Null_Stream
</UL>

<P><STRONG><a name="[214]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[215]"></a>vTaskPrioritySet</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[216]"></a>vTaskSuspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_suspend
</UL>

<P><STRONG><a name="[218]"></a>xTaskIsTaskSuspended</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[217]"></a>vTaskResume</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_resume
</UL>

<P><STRONG><a name="[219]"></a>xTaskResumeFromISR</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[21d]"></a>vTaskStartScheduler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureTimerForRunTimeStats
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[220]"></a>vTaskEndScheduler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
</UL>

<P><STRONG><a name="[222]"></a>xTaskGetTickCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusTCPTask
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_processConnections
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newConnection
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_timeout
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processDataConnections
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_initTransfer
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleDownload
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleUpload
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processCtrlConnections
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newConnection
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rein
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_prepTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_processConnections
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newConnection
</UL>

<P><STRONG><a name="[678]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>vTaskList</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskList &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTATSText
</UL>

<P><STRONG><a name="[229]"></a>vTaskGetRunTimeStats</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Stat_tick
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGenerateRunTimeStatsForTasksInList
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>

<P><STRONG><a name="[22b]"></a>vTaskStartTrace</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[22c]"></a>ulTaskEndTrace</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[19c]"></a>vTaskSwitchContext</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Stat_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[1f7]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskPlaceOnEventList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1eb]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1f4]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1f6]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ec]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[22d]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usTaskCheckFreeStackSpace
</UL>

<P><STRONG><a name="[200]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_pid_task
</UL>

<P><STRONG><a name="[201]"></a>vTaskPriorityInherit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1f0]"></a>vTaskPriorityDisinherit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[20c]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[21f]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStartFirstTask
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[221]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[1f3]"></a>vPortYieldFromISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ea]"></a>vPortEnterCritical</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defragmentation_my
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskEndTrace
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartTrace
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTransmitUart
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIOCtl
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_assert
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>

<P><STRONG><a name="[1ed]"></a>vPortExitCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defragmentation_my
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskEndTrace
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartTrace
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTransmitUart
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIOCtl
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>

<P><STRONG><a name="[83]"></a>xPortSysTickHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xPortSysTickHandler &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>pvPortMalloc</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorText
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_readdir
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_opendir
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_stat
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_open
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTCP
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDiscreteText
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI2CText
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMBSText
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTATSText
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUartText
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSPText
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityInit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModBusReg
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_form
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIOCtl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMBQualFunc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitButtonFunc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDiscreteFunc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMBProc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExpProc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNullDataFunc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAverageFunc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModemText
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadImpText
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlash
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenClock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClockText
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[231]"></a>defragmentation</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = defragmentation
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defragmentation_my
</UL>

<P><STRONG><a name="[230]"></a>defragmentation_my</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = defragmentation_my &rArr; defragmentation
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defragmentation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[1b5]"></a>vPortFree</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defragmentation_my
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorText
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_readdir
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_closedir
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_stat
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_close
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_open
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_pool
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDiscreteText
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI2CText
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelMBDev
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMBSText
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTATSText
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUartText
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSPText
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAllEvents
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_form
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAllSensors
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModemText
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadImpText
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlash
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseClock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClockText
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_FreeReqBuf
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAllSecurity
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[679]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[67a]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>vGetFreeMem</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGetFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTATSText
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[a7]"></a>main</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWDT
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[234]"></a>GetNumericIP</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetNumericIP &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingInit
</UL>

<P><STRONG><a name="[236]"></a>GetNumericPort</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetNumericPort &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCPortConfig
</UL>

<P><STRONG><a name="[85]"></a>TIMER0_IRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_WDTHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>TIMER2_IRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_WDTHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>TIMER3_IRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER3_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_WDTHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>ADC_IRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_WDTHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>CAN_IRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_WDTHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[238]"></a>initLCDContrast</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = initLCDContrast &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[23a]"></a>readUstValues</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = readUstValues &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[41f]"></a>GetUstVal</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, user_task1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[23d]"></a>ReInitDevSystem</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ReInitDevSystem &rArr; InitEventCheck &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModemSettings
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWDT
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSettingsFile
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingInit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCPortConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCMethodConfig
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_clock
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAllEvents
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUstValues
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
</UL>

<P><STRONG><a name="[247]"></a>init_VFS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_VFS &rArr; VFS_mount &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_mount
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverSystem
</UL>

<P><STRONG><a name="[249]"></a>PutMesToLog</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSaver
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSaver
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C0
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMBS
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseUart
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUart3
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUart1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSSP0
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSIM
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnLog
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_modem_to_online
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_turn_off
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemGPRSConnect
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenModem
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenClock
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_acceptClient
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_acceptClient
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_acceptClient
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemPPPStatusCB
</UL>

<P><STRONG><a name="[24b]"></a>MBC_Task</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MBC_Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialReceive
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBClientProcess
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_task1.o(.text)
</UL>
<P><STRONG><a name="[250]"></a>ResetTask</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ResetTask &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_task1.o(.text)
</UL>
<P><STRONG><a name="[251]"></a>user_system_init</STRONG> (Thumb, 882 bytes, Stack size 24 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = user_system_init &rArr; USBConfigureInterface &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wdt_cnt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWDT
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vlwIPInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigureInterface
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityInit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSettingsFile
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingInit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCPortConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCMethodConfig
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_clock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimers
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSMS
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPhysFunctions
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModBusReg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLog
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvents
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverSystem
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataFunctions
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMBCMethod
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMyHTTP
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMyFTP
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUstValues
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLCDContrast
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask
</UL>

<P><STRONG><a name="[265]"></a>AwakeResetTask</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AwakeResetTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3_IRQ
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolClock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_cnt_match
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_reset
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
</UL>

<P><STRONG><a name="[266]"></a>program_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = program_reset &rArr; AwakeResetTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwakeResetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_process
</UL>

<P><STRONG><a name="[267]"></a>common_queue_proc</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = common_queue_proc &rArr; ReInitDevSystem &rArr; InitEventCheck &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_boot
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolSensor
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolClock
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEvents
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_reset
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask
</UL>

<P><STRONG><a name="[26c]"></a>PowerOnLog</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PowerOnLog &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask
</UL>

<P><STRONG><a name="[aa]"></a>UserTask</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = UserTask &rArr; user_system_init &rArr; USBConfigureInterface &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolClock
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnLog
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[26e]"></a>PutMesToComQueue</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PutMesToComQueue &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINIT_process
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemPPPStatusCB
</UL>

<P><STRONG><a name="[41]"></a>proc_led</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc_led &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_timers.o(.data)
</UL>
<P><STRONG><a name="[26f]"></a>wdt_cnt_match</STRONG> (Thumb, 648 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wdt_cnt_match &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwakeResetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_cnt_check
</UL>

<P><STRONG><a name="[270]"></a>wdt_cnt_check</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wdt_cnt_check &rArr; wdt_cnt_match &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_cnt_match
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[21c]"></a>vApplicationIdleHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = vApplicationIdleHook &rArr; wdt_cnt_check &rArr; wdt_cnt_match &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWDT
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_cnt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[271]"></a>checkSIM</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, user_task1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>

<P><STRONG><a name="[272]"></a>Saver_user_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Saver_user_init &rArr; Saver_addr_init &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saver_addr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSaver
</UL>

<P><STRONG><a name="[274]"></a>AddError</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, user_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AddError &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimerParam
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModemSettings
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityInit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLog
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMBQualFunc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitButtonFunc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDiscreteFunc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMBProc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExpProc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNullDataFunc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAverageFunc
</UL>

<P><STRONG><a name="[5e0]"></a>getDoorStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_service_menu
</UL>

<P><STRONG><a name="[275]"></a>kvit_event</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, user_events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = kvit_event &rArr; lock_page &rArr; update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_page
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[277]"></a>fail_event</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, user_events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fail_event &rArr; lock_page &rArr; update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_page
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[278]"></a>QueueProcEvent</STRONG> (Thumb, 1624 bytes, Stack size 48 bytes, user_events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = QueueProcEvent &rArr; PingPool &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_menu
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_obriv_flag
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fail_page
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_blink_flag
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_to_clock
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_obriv_flag
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_fail_page
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetClockTimer
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPool
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_event
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_event
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_task
</UL>

<P><STRONG><a name="[288]"></a>kvit_done</STRONG> (Thumb, 740 bytes, Stack size 16 bytes, user_events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = kvit_done &rArr; fail_event &rArr; lock_page &rArr; update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fail_page
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_blink_flag
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_blink_flag
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_event
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_event
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_menu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_task
</UL>

<P><STRONG><a name="[af]"></a>events_task</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, user_events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = events_task &rArr; QueueProcEvent &rArr; PingPool &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_error_page
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_task1.o(.text)
</UL>
<P><STRONG><a name="[259]"></a>InitEvents</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, user_events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = InitEvents &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_event
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[27b]"></a>ResetClockTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[28f]"></a>SetTimerParam</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, user_timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SetTimerParam &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimers
</UL>

<P><STRONG><a name="[25d]"></a>InitTimers</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, user_timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = InitTimers &rArr; SetTimerParam &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimerParam
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[294]"></a>mem_reverce</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, user_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_reverce
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revshort
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revlong
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revfloat
</UL>

<P><STRONG><a name="[293]"></a>Revfloat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Revfloat &rArr; mem_reverce
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_reverce
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegModBusPool
</UL>

<P><STRONG><a name="[295]"></a>Revlong</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user_modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_reverce
</UL>

<P><STRONG><a name="[296]"></a>Revshort</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, user_modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_reverce
</UL>

<P><STRONG><a name="[297]"></a>ReadInputRegistersProc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, user_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadInputRegistersProc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCReadInputRegisters
</UL>

<P><STRONG><a name="[25e]"></a>InitModBusReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, user_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = InitModBusReg &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumberOfSensors
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[299]"></a>RegModBusPool</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, user_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegModBusPool &rArr; ReadSensor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirstSensor
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Revfloat
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartControlTask
</UL>

<P><STRONG><a name="[241]"></a>MBCMethodConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, user_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = MBCMethodConfig &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[240]"></a>MBCPortConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, user_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = MBCPortConfig &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumericPort
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[264]"></a>GetMBCMethod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[153]"></a>CreateModem</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, sim300dz.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = CreateModem &rArr; SetModemSettings &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ResistorMode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modem
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModemSettings
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSettingsFile
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemdrv.o(.constdata)
</UL>
<P><STRONG><a name="[2ad]"></a>StartTransmitUart</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StartTransmitUart &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUart
</UL>

<P><STRONG><a name="[2b0]"></a>rx_interupt</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rx_interupt &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[2b1]"></a>tx_interupt</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tx_interupt &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>UART3_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART3_IRQHandler &rArr; tx_interupt &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_interupt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_interupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>UART1_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART1_IRQHandler &rArr; tx_interupt &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_interupt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_interupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b2]"></a>AddDriver</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverSystem
</UL>

<P><STRONG><a name="[255]"></a>InitDriverSystem</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = InitDriverSystem &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDriver
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VFS
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[28d]"></a>ReadDevice</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSaverText
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSaver
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceLnEx
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saver_addr_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialReceive
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvents
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonFunc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscreteFunc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBfunc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpExIntermediate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpIntermediate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullDataFunc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageFunc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadFATFun
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadRAWFun
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRDY
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_tryread
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_data_form
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToTheNewestRecord
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLogRecord
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArchInfo
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_clock_menu
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[287]"></a>WriteDevice</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSaver
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceLn
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteFATFun
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteRAWFun
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFunc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlash
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_write
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATETIME_process
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data_send_buf
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_config_send
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToTheNewestRecord
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLogRecord
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_clock_menu
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialSend
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[286]"></a>SeekDevice</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SeekDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSaver
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvents
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonFunc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscreteFunc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBfunc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpExIntermediate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpIntermediate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullDataFunc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageFunc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATETIME_process
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_data_form
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data_send_buf
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_config_send
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToTheNewestRecord
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLogRecord
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArchInfo
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_clock_menu
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[2b3]"></a>WriteDeviceLn</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteDeviceLn &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[24c]"></a>DeviceIOCtl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeviceIOCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSaverText
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSaver
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSaver
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceLnEx
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saver_addr_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Task
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBQualFunc
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_modem_to_online
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_time_gsm
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_read_abort
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_tryread
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSNIFFER_process
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUartControl
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[2b4]"></a>ReadDeviceLnEx</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, driverscore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[1c8]"></a>ReadDeviceText</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadDeviceText
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_VFS_read
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_read
</UL>

<P><STRONG><a name="[1c9]"></a>WriteDeviceText</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteDeviceText
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_write
</UL>

<P><STRONG><a name="[1c7]"></a>SeekDeviceText</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SeekDeviceText
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_VFS_read
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_readdir
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_fseek
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_open
</UL>

<P><STRONG><a name="[1ca]"></a>CloseDevice</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_VFS_read
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_readdir
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_close
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSaver
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSaver
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvents
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBQualFunc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_time_gsm
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseModem
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlash
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSNIFFER_process
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATETIME_process
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_data_form
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_pixel
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_symbol
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToTheNewestRecord
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLogRecord
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArchInfo
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_clock_menu
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUartControl
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[1c6]"></a>OpenDevice</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, driverscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_VFS_read
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_readdir
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_open
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSaver
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSaver
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvents
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_cnt_match
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetTask
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Task
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBQualFunc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_time_gsm
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenModem
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlash
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSNIFFER_process
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATETIME_process
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_data_form
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_pixel
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_symbol
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToTheNewestRecord
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLogRecord
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArchInfo
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_clock_menu
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCBusSerPortInit
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSBusSerPortInit
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUartControl
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[2b6]"></a>IsDevicePresent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, driverscore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[21e]"></a>vConfigureTimerForRunTimeStats</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, all_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vConfigureTimerForRunTimeStats &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[22a]"></a>Get_Stat_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, all_stats.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[2bc]"></a>mbs_get_reg</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mbs_get_reg &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
</UL>

<P><STRONG><a name="[2be]"></a>init_MBS</STRONG> (Thumb, 732 bytes, Stack size 80 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = init_MBS &rArr; mbs_get_reg &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_get_reg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMBS
</UL>

<P><STRONG><a name="[2c8]"></a>PoolMBS</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = PoolMBS &rArr; ServerReadInputRegisters &rArr; ServerReadInputRegisters1 &rArr; MBSerialReceive &rArr; mb_check_crc &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerReadInputRegisters
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInpRegsFLOAT
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_tx_counter
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_rx_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartControlTask
</UL>

<P><STRONG><a name="[2cc]"></a>DelMBDev</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, mb_server_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[118]"></a>ReadDiscrete</STRONG> (Thumb, 198 bytes, Stack size 28 bytes, discrete_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ReadDiscrete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> discrete_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>WriteDiscrete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, discrete_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> discrete_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>SeekDiscrete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, discrete_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekDiscrete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> discrete_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>WriteDiscreteText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, discrete_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> discrete_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>ReadDiscreteText</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, discrete_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReadDiscreteText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> discrete_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>SeekDiscreteText</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, discrete_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekDiscreteText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> discrete_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[2d1]"></a>PoolDiscrete</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, discrete_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PoolDiscrete &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCtlDiscrete
</UL>

<P><STRONG><a name="[11e]"></a>IOCtlDiscrete</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, discrete_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IOCtlDiscrete &rArr; PoolDiscrete &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolDiscrete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> discrete_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[2d2]"></a>AddSaverFile</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, saver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSaver
</UL>

<P><STRONG><a name="[273]"></a>Saver_addr_init</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, saver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Saver_addr_init &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saver_user_init
</UL>

<P><STRONG><a name="[1e6]"></a>GetSaverFile</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, saver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetSaverFile &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_VFS_open
</UL>

<P><STRONG><a name="[268]"></a>PoolClock</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PoolClock &rArr; AwakeResetTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwakeResetTask
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_setup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateClock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockIOCtl
</UL>

<P><STRONG><a name="[2eb]"></a>clock_setup</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = clock_setup &rArr; PoolClock &rArr; AwakeResetTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolClock
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_synk_gsm
</UL>

<P><STRONG><a name="[2ec]"></a>time_synk_gsm</STRONG> (Thumb, 216 bytes, Stack size 112 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = time_synk_gsm &rArr; clock_setup &rArr; PoolClock &rArr; AwakeResetTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_setup
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockIOCtl
</UL>

<P><STRONG><a name="[2f4]"></a>SaveClockDate</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtc_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
</UL>

<P><STRONG><a name="[2f5]"></a>time_stamp</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, rtc_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[246]"></a>Init_clock</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Init_clock &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[2f7]"></a>FlashFunc</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FlashFunc &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadFATFun
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadRAWFun
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteFATFun
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteRAWFun
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRDY
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlash
</UL>

<P><STRONG><a name="[2f8]"></a>WaitRDY</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WaitRDY &rArr; FlashFunc &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadFATFun
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadRAWFun
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteFATFun
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteRAWFun
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
</UL>

<P><STRONG><a name="[2f9]"></a>FlashPageErase</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FlashPageErase &rArr; WaitRDY &rArr; FlashFunc &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRDY
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashIOCtl
</UL>

<P><STRONG><a name="[2fa]"></a>FlashWriteRAWFun</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FlashWriteRAWFun &rArr; WaitRDY &rArr; FlashFunc &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRDY
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash
</UL>

<P><STRONG><a name="[2fb]"></a>FlashWriteFATFun</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FlashWriteFATFun &rArr; WaitRDY &rArr; FlashFunc &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRDY
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash
</UL>

<P><STRONG><a name="[2fc]"></a>FlashReadRAWFun</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FlashReadRAWFun &rArr; WaitRDY &rArr; FlashFunc &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRDY
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash
</UL>

<P><STRONG><a name="[2fd]"></a>FlashReadFATFun</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FlashReadFATFun &rArr; WaitRDY &rArr; FlashFunc &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRDY
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash
</UL>

<P><STRONG><a name="[99]"></a>EINT3_IRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, impulse_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = EINT3_IRQ &rArr; AwakeResetTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwakeResetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[67b]"></a>reset_counters</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, impulse_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[67c]"></a>init_counters</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, impulse_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[67d]"></a>save_counters</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, impulse_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>modem_turn_off</STRONG> (Thumb, 624 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = modem_turn_off &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_modem
</UL>

<P><STRONG><a name="[301]"></a>ReadLineEx</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadLineEx &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_check
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_modem_from_online
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ussd_send
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLine
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
</UL>

<P><STRONG><a name="[303]"></a>ReadLine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadLine &rArr; ReadLineEx &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
</UL>

<P><STRONG><a name="[305]"></a>cmd_operat</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmd_operat &rArr; ReadLine &rArr; ReadLineEx &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLine
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_modem_to_online
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_modem_from_online
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_oper_check
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_gprs_connect
</UL>

<P><STRONG><a name="[308]"></a>cmd_get_parametrEx</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cmd_get_parametrEx &rArr; ReadLineEx &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;At_send
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ussd_send
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametr
</UL>

<P><STRONG><a name="[309]"></a>cmd_get_parametr</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_get_parametr &rArr; cmd_get_parametrEx &rArr; ReadLineEx &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_check
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imei
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_name
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sig_level
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_time_gsm
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_oper_check
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_gprs_connect
</UL>

<P><STRONG><a name="[30d]"></a>Modem_state_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modemdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_time_gsm
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
</UL>

<P><STRONG><a name="[30c]"></a>Sync_time_gsm</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Sync_time_gsm &rArr; cmd_get_parametr &rArr; cmd_get_parametrEx &rArr; ReadLineEx &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_state_get
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametr
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
</UL>

<P><STRONG><a name="[30e]"></a>ussd_send</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ussd_send &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_out_own_num
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
</UL>

<P><STRONG><a name="[30f]"></a>find_out_own_num</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = find_out_own_num &rArr; ussd_send &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ussd_send
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
</UL>

<P><STRONG><a name="[311]"></a>sig_level</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sig_level &rArr; cmd_get_parametr &rArr; cmd_get_parametrEx &rArr; ReadLineEx &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_check
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
</UL>

<P><STRONG><a name="[312]"></a>op_name</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = op_name &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
</UL>

<P><STRONG><a name="[315]"></a>imei</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = imei &rArr; cmd_get_parametr &rArr; cmd_get_parametrEx &rArr; ReadLineEx &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametr
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
</UL>

<P><STRONG><a name="[31a]"></a>modem_automate</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = modem_automate &rArr; ModemCheckOperator &rArr; sms_proces &rArr; sms_perform &rArr; SetParameter &rArr; ini_puts &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwakeResetTask
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_turn_off
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_modem
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemGPRSConnect
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemIOCtl
</UL>

<P><STRONG><a name="[29d]"></a>init_modem</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_modem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateModem
</UL>

<P><STRONG><a name="[631]"></a>Modem_state_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modemdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[5db]"></a>Sim_state_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modemdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
</UL>

<P><STRONG><a name="[31c]"></a>modem_online</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, modemdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_modem_to_online
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_modem_from_online
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_read_abort
</UL>

<P><STRONG><a name="[31b]"></a>take_modem_from_online</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = take_modem_from_online &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_online
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[31d]"></a>give_modem_to_online</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = give_modem_to_online &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_online
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[31e]"></a>sms_check</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sms_check &rArr; sig_level &rArr; cmd_get_parametr &rArr; cmd_get_parametrEx &rArr; ReadLineEx &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sig_level
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
</UL>

<P><STRONG><a name="[31f]"></a>sms_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sms_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
</UL>

<P><STRONG><a name="[320]"></a>sms_delete</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sms_delete &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
</UL>

<P><STRONG><a name="[321]"></a>sms_send</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sms_send &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSend
</UL>

<P><STRONG><a name="[322]"></a>At_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = At_send &rArr; cmd_get_parametrEx &rArr; ReadLineEx &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
</UL>

<P><STRONG><a name="[323]"></a>SmsSend</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SmsSend &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSettingsFile
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[324]"></a>GetIMEI</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetIMEI &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
</UL>

<P><STRONG><a name="[416]"></a>GetOpName</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modemdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
</UL>

<P><STRONG><a name="[418]"></a>GetSigLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modemdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[417]"></a>GetSimNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modemdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[67e]"></a>GetRoamingState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modemdrv.o(.text), UNUSED)

<P><STRONG><a name="[634]"></a>GetExtPowLim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modemdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[23f]"></a>SetModemSettings</STRONG> (Thumb, 1016 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SetModemSettings &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateModem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[252]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateModem
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvents
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnLog
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetDir
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateImp
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlash
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_reset
</UL>

<P><STRONG><a name="[253]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateModem
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvents
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_led
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetValue
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_modem_from_online
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_turn_off
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadFATFun
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadRAWFun
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteFATFun
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteRAWFun
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRDY
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlash
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_reset
</UL>

<P><STRONG><a name="[254]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateModem
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_event
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_led
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearValue
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_modem_to_online
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_turn_off
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_oper_check
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_gprs_connect
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadFATFun
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadRAWFun
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteFATFun
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteRAWFun
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRDY
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlash
</UL>

<P><STRONG><a name="[26d]"></a>GPIO_ReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolDiscrete
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSIM
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnLog
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ReadValue
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_turn_off
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
</UL>

<P><STRONG><a name="[32b]"></a>GPIO_IntCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_IntCmd
</UL>

<P><STRONG><a name="[32d]"></a>GPIO_GetIntStatus</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_GetIntStatus
</UL>

<P><STRONG><a name="[32f]"></a>GPIO_ClearInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearInt
</UL>

<P><STRONG><a name="[326]"></a>FIO_SetDir</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[327]"></a>FIO_SetValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[328]"></a>FIO_ClearValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[329]"></a>FIO_ReadValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>

<P><STRONG><a name="[32a]"></a>FIO_IntCmd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntCmd
</UL>

<P><STRONG><a name="[32c]"></a>FIO_GetIntStatus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetIntStatus
</UL>

<P><STRONG><a name="[32e]"></a>FIO_ClearInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearInt
</UL>

<P><STRONG><a name="[330]"></a>FIO_SetMask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>

<P><STRONG><a name="[331]"></a>FIO_HalfWordSetDir</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[333]"></a>FIO_HalfWordSetMask</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[334]"></a>FIO_HalfWordSetValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[335]"></a>FIO_HalfWordClearValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[336]"></a>FIO_HalfWordReadValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[337]"></a>FIO_ByteSetDir</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[339]"></a>FIO_ByteSetMask</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[33a]"></a>FIO_ByteSetValue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[33b]"></a>FIO_ByteClearValue</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[33c]"></a>FIO_ByteReadValue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[29c]"></a>set_ResistorMode</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_ResistorMode
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateModem
</UL>

<P><STRONG><a name="[67f]"></a>PINSEL_ConfigTraceFunc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[680]"></a>PINSEL_SetI2C0Pins</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ResistorMode
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_OpenDrainMode
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C0
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSSP0
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUSB
</UL>

<P><STRONG><a name="[2a0]"></a>SSP_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSSP0
</UL>

<P><STRONG><a name="[342]"></a>SSP_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[344]"></a>SSP_GetDataSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[681]"></a>SSP_ConfigStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>SSP_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSSP0
</UL>

<P><STRONG><a name="[682]"></a>SSP_LoopBackCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[683]"></a>SSP_SlaveOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>SSP_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSP
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSP
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[2a4]"></a>SSP_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSP
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSP
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[343]"></a>SSP_ReadWrite</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetDataSize
</UL>

<P><STRONG><a name="[2a3]"></a>SSP_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSP
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSP
</UL>

<P><STRONG><a name="[684]"></a>SSP_IntConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[685]"></a>SSP_GetRawIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[686]"></a>SSP_GetRawIntStatusReg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[687]"></a>SSP_GetIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[688]"></a>SSP_ClearIntPending</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[689]"></a>SSP_DMACmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>getUartNum</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetupCbs
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[2ae]"></a>uart_set_divisors</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIOCtl
</UL>

<P><STRONG><a name="[345]"></a>UART_GenIntHandler</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUartNum
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_StdIntHandler
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_StdIntHandler
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_StdIntHandler
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_StdIntHandler
</UL>

<P><STRONG><a name="[2ac]"></a>UART_TxCmd</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
</UL>

<P><STRONG><a name="[2af]"></a>UART_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIOCtl
</UL>

<P><STRONG><a name="[2a5]"></a>UART_Init</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
</UL>

<P><STRONG><a name="[68a]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>UART_SendData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[34d]"></a>UART_ReceiveData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[68b]"></a>UART_ForceBreak</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[68c]"></a>UART_IrDAInvtInputCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[68d]"></a>UART_IrDACmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[68e]"></a>UART_IrDAPulseDivConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>UART_IntConfig</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
</UL>

<P><STRONG><a name="[68f]"></a>UART_GetLineStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[690]"></a>UART_CheckBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>UART_FIFOConfig</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
</UL>

<P><STRONG><a name="[691]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[692]"></a>UART_ABCmd</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[693]"></a>UART_FullModemForcePinState</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[694]"></a>UART_FullModemConfigMode</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[695]"></a>UART_FullModemGetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>UART_RS485Config</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
</UL>

<P><STRONG><a name="[2a7]"></a>UART_RS485ReceiverCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
</UL>

<P><STRONG><a name="[347]"></a>UART_Send</STRONG> (Thumb, 146 bytes, Stack size 36 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[349]"></a>UART_RS485Send</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendData
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendSlvAddr
</UL>

<P><STRONG><a name="[34a]"></a>UART_RS485SendSlvAddr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[34b]"></a>UART_RS485SendData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[34c]"></a>UART_Receive</STRONG> (Thumb, 112 bytes, Stack size 28 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>

<P><STRONG><a name="[34e]"></a>UART_SetupCbs</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUartNum
</UL>

<P><STRONG><a name="[34f]"></a>UART0_StdIntHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[350]"></a>UART1_StdIntHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[351]"></a>UART2_StdIntHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[352]"></a>UART3_StdIntHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GenIntHandler
</UL>

<P><STRONG><a name="[696]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 320 bytes, Stack size 0 bytes, system_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>SystemInit</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29f]"></a>CLKPWR_SetPCLKDiv</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureTimerForRunTimeStats
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSSP0
</UL>

<P><STRONG><a name="[353]"></a>CLKPWR_GetPCLKSEL</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>

<P><STRONG><a name="[340]"></a>CLKPWR_GetPCLK</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLKSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetClock
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>

<P><STRONG><a name="[341]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DeInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[697]"></a>CLKPWR_Sleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[698]"></a>CLKPWR_DeepSleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[699]"></a>CLKPWR_PowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[69a]"></a>CLKPWR_DeepPowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[69b]"></a>TIM_GetIntStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[69c]"></a>TIM_GetIntCaptureStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[69d]"></a>TIM_ClearIntPending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[69e]"></a>TIM_ClearIntCapturePending</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[69f]"></a>TIM_ConfigStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>TIM_Init</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converPtrToTimeNum
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureTimerForRunTimeStats
</UL>

<P><STRONG><a name="[358]"></a>TIM_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[2ba]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureTimerForRunTimeStats
</UL>

<P><STRONG><a name="[2b9]"></a>TIM_ResetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureTimerForRunTimeStats
</UL>

<P><STRONG><a name="[6a0]"></a>TIM_ConfigMatch</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[6a1]"></a>TIM_UpdateMatchValue</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[6a2]"></a>TIM_ConfigCapture</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[6a3]"></a>TIM_GetCaptureValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>I2C_IntCmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferData
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveHandler
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[35c]"></a>I2C_MasterHandler</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_MasterHandler &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc17xx_i2c.o(.text)
</UL>
<P><STRONG><a name="[35f]"></a>I2C_SlaveHandler</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_SlaveHandler &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc17xx_i2c.o(.text)
</UL>
<P><STRONG><a name="[360]"></a>I2C_SetClock</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SetClock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[361]"></a>I2C_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lpc17xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[2cd]"></a>I2C_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Init &rArr; I2C_SetClock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetClock
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C0
</UL>

<P><STRONG><a name="[2cf]"></a>I2C_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C0
</UL>

<P><STRONG><a name="[2d0]"></a>I2C_MasterTransferData</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetByte
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteI2C
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI2C
</UL>

<P><STRONG><a name="[365]"></a>I2C_SlaveTransferData</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, lpc17xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[6a4]"></a>I2C_SetOwnSlaveAddr</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lpc17xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[6a5]"></a>I2C_MonitorModeConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc17xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>I2C_MonitorModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateI2C0
</UL>

<P><STRONG><a name="[6a6]"></a>I2C_MonitorGetDatabuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[6a7]"></a>I2C0_StdIntHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc17xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[6a8]"></a>I2C1_StdIntHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc17xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[6a9]"></a>I2C2_StdIntHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc17xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>RTC_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateClock
</UL>

<P><STRONG><a name="[366]"></a>RTC_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[2f1]"></a>RTC_ResetClockTickCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateClock
</UL>

<P><STRONG><a name="[2f2]"></a>RTC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateClock
</UL>

<P><STRONG><a name="[6aa]"></a>RTC_CntIncrIntConfig</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[6ab]"></a>RTC_AlarmIntConfig</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>RTC_SetTime</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_setup
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClock
</UL>

<P><STRONG><a name="[2ea]"></a>RTC_GetTime</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolClock
</UL>

<P><STRONG><a name="[6ac]"></a>RTC_SetFullTime</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[6ad]"></a>RTC_GetFullTime</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[6ae]"></a>RTC_SetAlarmTime</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[6af]"></a>RTC_GetAlarmTime</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[6b0]"></a>RTC_SetFullAlarmTime</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[6b1]"></a>RTC_GetFullAlarmTime</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[6b2]"></a>RTC_GetIntPending</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[6b3]"></a>RTC_ClearIntPending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>RTC_CalibCounterCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateClock
</UL>

<P><STRONG><a name="[6b4]"></a>RTC_CalibConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>RTC_WriteGPREG</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteGPREG
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveClockDate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockIOCtl
</UL>

<P><STRONG><a name="[2ef]"></a>RTC_ReadGPREG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadGPREG
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockIOCtl
</UL>

<P><STRONG><a name="[23e]"></a>ReadSettingsFile</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, setparametrs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMBS
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateModem
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSend
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
</UL>

<P><STRONG><a name="[239]"></a>GetPointToElement</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, setparametrs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_gets
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_get_reg
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimerParam
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModemSettings
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingInit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCPortConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCMethodConfig
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_clock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLog
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUstValues
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLCDContrast
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSend
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUartControl
</UL>

<P><STRONG><a name="[369]"></a>SetParameter</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, setparametrs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SetParameter &rArr; ini_puts &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_process
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONFIG_process
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
</UL>

<P><STRONG><a name="[36b]"></a>GetCurrentTop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, setparametrs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = GetCurrentTop &rArr; ini_getsection &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getsection
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
</UL>

<P><STRONG><a name="[36d]"></a>DeleteTop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, setparametrs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = DeleteTop &rArr; ini_puts &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONFIG_process
</UL>

<P><STRONG><a name="[368]"></a>ini_gets</STRONG> (Thumb, 118 bytes, Stack size 96 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_strncpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getbool
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getl
</UL>

<P><STRONG><a name="[377]"></a>ini_getl</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, minini.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_gets
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[37a]"></a>ini_getbool</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, minini.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_gets
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[36c]"></a>ini_getsection</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ini_getsection &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTop
</UL>

<P><STRONG><a name="[37b]"></a>ini_getkey</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, minini.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[37c]"></a>ini_browse</STRONG> (Thumb, 284 bytes, Stack size 88 bytes, minini.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanstring
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_strncpy
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;striptrailing
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipleading
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[36a]"></a>ini_puts</STRONG> (Thumb, 924 bytes, Stack size 176 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ini_puts &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_fseek
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_rename
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_flush
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_accum
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writekey
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writesection
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_tempname
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skiptrailing
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipleading
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_putl
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTop
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParameter
</UL>

<P><STRONG><a name="[387]"></a>ini_putl</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, minini.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2str
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[392]"></a>GetDataFuncAddr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetDataFuncAddr &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
</UL>

<P><STRONG><a name="[393]"></a>GetDataFuncName</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, datafunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[394]"></a>GetInitDataFuncAddr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetInitDataFuncAddr &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
</UL>

<P><STRONG><a name="[395]"></a>AddDataFun</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, datafunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataFunctions
</UL>

<P><STRONG><a name="[256]"></a>InitDataFunctions</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitDataFunctions
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDataFun
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[396]"></a>is_match_operat</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, datafunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[397]"></a>is_operat</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, datafunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[398]"></a>is_const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, datafunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[39b]"></a>is_sensor</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, datafunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
</UL>

<P><STRONG><a name="[39c]"></a>compute</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, datafunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>

<P><STRONG><a name="[3a0]"></a>match_compute</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, datafunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[3a1]"></a>cmp_val</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, datafunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>

<P><STRONG><a name="[3a2]"></a>PutValueToOutBuf</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, physfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PutValueToOutBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullFunc
</UL>

<P><STRONG><a name="[3a3]"></a>GetPhysFuncName</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, physfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[3a4]"></a>GetPhysFuncAddr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, physfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetPhysFuncAddr &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
</UL>

<P><STRONG><a name="[3a5]"></a>GetInitPhysFuncAddr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, physfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetInitPhysFuncAddr &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
</UL>

<P><STRONG><a name="[3a6]"></a>AddPhysFun</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, physfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPhysFunctions
</UL>

<P><STRONG><a name="[257]"></a>InitPhysFunctions</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, physfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitPhysFunctions
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPhysFun
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[283]"></a>ReadSensor</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadSensor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegModBusPool
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_process
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[1cf]"></a>ReadSensorText</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReadSensorText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_VFS_read
</UL>

<P><STRONG><a name="[1ce]"></a>SeekSensorText</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekSensorText
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_VFS_fseek
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_VFS_open
</UL>

<P><STRONG><a name="[3ae]"></a>DataProcSensor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DataProcSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolSensor
</UL>

<P><STRONG><a name="[3aa]"></a>DataInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
</UL>

<P><STRONG><a name="[3ab]"></a>PhysInit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PhysInit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
</UL>

<P><STRONG><a name="[3af]"></a>PhysProcSensor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PhysProcSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolSensor
</UL>

<P><STRONG><a name="[3a8]"></a>SensorIOCtl</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SensorIOCtl &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
</UL>

<P><STRONG><a name="[3ac]"></a>AddSensor</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sensorcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
</UL>

<P><STRONG><a name="[6b5]"></a>GetSensNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensorcore.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>AttachSensor</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sensorcore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1cd]"></a>OpenSensorProc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OpenSensorProc &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_VFS_open
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sensor
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_process
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[258]"></a>InitSensorSystem</STRONG> (Thumb, 1040 bytes, Stack size 64 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = InitSensorSystem &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWDT
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSensor
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIOCtl
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysInit
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitPhysFuncAddr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhysFuncAddr
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitDataFuncAddr
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFuncAddr
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTop
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[3ad]"></a>StrToFloat</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, sensorcore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[269]"></a>PoolSensor</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sensorcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PoolSensor &rArr; PhysProcSensor
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysProcSensor
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
</UL>

<P><STRONG><a name="[298]"></a>GetNumberOfSensors</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sensorcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModBusReg
</UL>

<P><STRONG><a name="[29a]"></a>GetFirstSensor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensorcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegModBusPool
</UL>

<P><STRONG><a name="[3b0]"></a>DeleteAllSensors</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sensorcore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[3b2]"></a>EventID</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventID &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
</UL>

<P><STRONG><a name="[314]"></a>PutEvenToQueue</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PutEvenToQueue &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEvents
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_oper_check
</UL>

<P><STRONG><a name="[28c]"></a>add_event</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvents
</UL>

<P><STRONG><a name="[3b4]"></a>get_event_handle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, events.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrEventExistFlag
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEventExistFlag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventExistFlag
</UL>

<P><STRONG><a name="[6b6]"></a>Get_event_name</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, events.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>GetEventExistFlag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, events.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event_handle
</UL>

<P><STRONG><a name="[3b5]"></a>SetEventExistFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, events.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event_handle
</UL>

<P><STRONG><a name="[3b6]"></a>ClrEventExistFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, events.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event_handle
</UL>

<P><STRONG><a name="[6b7]"></a>add_event_to_list</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, events.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>prior</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_form
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
</UL>

<P><STRONG><a name="[3b7]"></a>opz_calc</STRONG> (Thumb, 574 bytes, Stack size 80 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = opz_calc &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prior
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEvents
</UL>

<P><STRONG><a name="[26a]"></a>CheckEvents</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CheckEvents &rArr; opz_calc &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutEvenToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_queue_proc
</UL>

<P><STRONG><a name="[3b9]"></a>opz_form</STRONG> (Thumb, 506 bytes, Stack size 72 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = opz_form &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prior
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
</UL>

<P><STRONG><a name="[244]"></a>InitEventCheck</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = InitEventCheck &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_form
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventID
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[243]"></a>DelAllEvents</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DelAllEvents &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[3ba]"></a>ff_synk_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ff_synk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ff_synk_init &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[3de]"></a>ff_cre_syncobj</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_synk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[3dd]"></a>ff_del_syncobj</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_synk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[3bb]"></a>ff_req_grant</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff_synk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[3bc]"></a>ff_rel_grant</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ff_synk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ff_rel_grant &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[3db]"></a>disk_initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, iofat_at25db161a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[3da]"></a>disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iofat_at25db161a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[3bd]"></a>disk_read</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, iofat_at25db161a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_read &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_crc
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[3be]"></a>disk_write</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, iofat_at25db161a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_crc
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[3bf]"></a>disk_ioctl</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, iofat_at25db161a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_power
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[3c1]"></a>get_fattime</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, iofat_at25db161a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fattime &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[3cd]"></a>clust2sect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[3c8]"></a>get_fat</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[3c9]"></a>put_fat</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = put_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[1c2]"></a>f_mount</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = f_mount &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_synk_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_mount
</UL>

<P><STRONG><a name="[1b4]"></a>f_open</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f_open &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_open
</UL>

<P><STRONG><a name="[1b7]"></a>f_read</STRONG> (Thumb, 556 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_read
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[1b8]"></a>f_write</STRONG> (Thumb, 606 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[1bb]"></a>f_sync</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_fsync
</UL>

<P><STRONG><a name="[1b6]"></a>f_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_close
</UL>

<P><STRONG><a name="[6b8]"></a>f_chdrive</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>f_chdir</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1be]"></a>f_lseek</STRONG> (Thumb, 516 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_fseek
</UL>

<P><STRONG><a name="[1c4]"></a>f_opendir</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_opendir &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_opendir
</UL>

<P><STRONG><a name="[1c5]"></a>f_readdir</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_readdir
</UL>

<P><STRONG><a name="[1c0]"></a>f_stat</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = f_stat &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_stat
</UL>

<P><STRONG><a name="[1b9]"></a>f_getfree</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = f_getfree &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_get_free
</UL>

<P><STRONG><a name="[1ba]"></a>f_truncate</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_truncate &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_truncate
</UL>

<P><STRONG><a name="[1bd]"></a>f_unlink</STRONG> (Thumb, 208 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_unlink &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_rmdir
</UL>

<P><STRONG><a name="[1bc]"></a>f_mkdir</STRONG> (Thumb, 408 bytes, Stack size 80 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f_mkdir &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_mkdir
</UL>

<P><STRONG><a name="[3e1]"></a>f_chmod</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[3e2]"></a>f_utime</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1c3]"></a>f_rename</STRONG> (Thumb, 310 bytes, Stack size 120 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = f_rename &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_rename
</UL>

<P><STRONG><a name="[3e3]"></a>f_mkfs</STRONG> (Thumb, 1582 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[373]"></a>f_gets</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_browse
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_flush
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[3e4]"></a>f_putc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_putc &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
</UL>

<P><STRONG><a name="[37f]"></a>f_puts</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_puts &rArr; f_putc &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_flush
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writekey
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writesection
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
</UL>

<P><STRONG><a name="[3e5]"></a>f_printf</STRONG> (Thumb, 520 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[3f0]"></a>ft_buildPathName</STRONG> (Thumb, 584 bytes, Stack size 36 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ft_buildPathName
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getNextDirEntry
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_mkd
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_changeCurrentPath
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getFilename
</UL>

<P><STRONG><a name="[6b9]"></a>ftpd_running</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ftpd.o(.text), UNUSED)

<P><STRONG><a name="[6ba]"></a>ftpd_stop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ftpd.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>ftpd_start</STRONG> (Thumb, 542 bytes, Stack size 64 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ftpd_start &rArr; ft_processDataConnections &rArr; ft_handleUpload &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_fdSanity
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_timeout
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_acceptClient
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processDataConnections
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processCtrlConnections
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_addSendSocket
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyConnection
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFTPServer
</UL>

<P><STRONG><a name="[ad]"></a>vFTPServer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = vFTPServer &rArr; ftpd_start &rArr; ft_processDataConnections &rArr; ft_handleUpload &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_task1.o(.text)
</UL>
<P><STRONG><a name="[262]"></a>CreateMyFTP</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CreateMyFTP &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[40e]"></a>CheckCookies</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, cookie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CheckCookies &rArr; NetAccessRequest &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetAccessRequest
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessRequest
</UL>

<P><STRONG><a name="[40f]"></a>SetCookies</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, cookie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetCookies &rArr; GetProcessorID &rArr; get_ID &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProcessorID
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOGIN_process
</UL>

<P><STRONG><a name="[411]"></a>AddCookies</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cookie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AddCookies &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
</UL>

<P><STRONG><a name="[413]"></a>CGI_parser</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CGI_parser &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessRequest
</UL>

<P><STRONG><a name="[414]"></a>escape</STRONG> (Thumb, 784 bytes, Stack size 24 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = escape &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMINAL_process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONFIG_process
</UL>

<P><STRONG><a name="[428]"></a>httpTask</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = httpTask &rArr; HTTP_ProcessConnection &rArr; HTTP_ProcessRequest &rArr; SendWap &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_server.o(.text)
</UL>
<P><STRONG><a name="[263]"></a>CreateMyHTTP</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CreateMyHTTP &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[425]"></a>SendWap</STRONG> (Thumb, 1282 bytes, Stack size 136 bytes, wap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = SendWap &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUstVal
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessRequest
</UL>

<P><STRONG><a name="[43c]"></a>clr_telnet_auth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_accept_pool
</UL>

<P><STRONG><a name="[42c]"></a>shell_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = shell_start &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_accept_pool
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_input
</UL>

<P><STRONG><a name="[42e]"></a>shell_input</STRONG> (Thumb, 1036 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = shell_input &rArr; shell_start &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_start
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_wellcome
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetAccessRequest
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_telnet_cmd
</UL>

<P><STRONG><a name="[43a]"></a>TelnetProcessCharacter</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = TelnetProcessCharacter &rArr; form_telnet_cmd &rArr; shell_input &rArr; shell_start &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_telnet_cmd
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessDont
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessDo
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessWont
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessWill
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_pool
</UL>

<P><STRONG><a name="[43b]"></a>tl_accept_pool</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tl_accept_pool &rArr; shell_start &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_start
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_telnet_auth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(.text)
</UL>
<P><STRONG><a name="[43d]"></a>tl_pool</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tl_pool &rArr; TelnetProcessCharacter &rArr; form_telnet_cmd &rArr; shell_input &rArr; shell_start &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessCharacter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>TelnetTask</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = TelnetTask &rArr; tl_processConnections &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_timeout
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_acceptClient
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_fdSanity
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_processConnections
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tl_serv_to_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_task1.o(.text)
</UL>
<P><STRONG><a name="[42a]"></a>shell_output</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_input
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firm
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_wellcome
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unknown
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
</UL>

<P><STRONG><a name="[42b]"></a>shell_prompt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = shell_prompt &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firm
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_wellcome
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unknown
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
</UL>

<P><STRONG><a name="[447]"></a>sio_open</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip_sio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
</UL>

<P><STRONG><a name="[448]"></a>sio_read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lwip_sio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sio_read &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_recv
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Pool
</UL>

<P><STRONG><a name="[449]"></a>sio_tryread</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lwip_sio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
</UL>

<P><STRONG><a name="[44a]"></a>sio_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lwip_sio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sio_write &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_send
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nPut
</UL>

<P><STRONG><a name="[44b]"></a>sio_read_abort</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwip_sio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sio_read_abort &rArr; DeviceIOCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_online
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppRecvWakeup
</UL>

<P><STRONG><a name="[44c]"></a>sio_send</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lwip_sio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_write
</UL>

<P><STRONG><a name="[44d]"></a>sio_recv</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwip_sio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_read
</UL>

<P><STRONG><a name="[44e]"></a>sys_mbox_new</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_mbox_new &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[44f]"></a>sys_mbox_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_mbox_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[450]"></a>sys_mbox_post</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[451]"></a>sys_mbox_trypost</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[452]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[453]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[454]"></a>sys_sem_new</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_sem_new &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[455]"></a>sys_arch_sem_wait</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPPSemTake
</UL>

<P><STRONG><a name="[456]"></a>sys_sem_signal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPPSemGive
</UL>

<P><STRONG><a name="[457]"></a>sys_sem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_sem_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
</UL>

<P><STRONG><a name="[1ac]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[458]"></a>sys_get_pid_task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>

<P><STRONG><a name="[40d]"></a>sys_thread_new</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMyHTTP
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMyFTP
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[459]"></a>sys_thread_suspend</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[45a]"></a>sys_thread_resume</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[6bb]"></a>sys_thread_delete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>sys_arch_protect</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_arch_protect &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_recv_config
</UL>

<P><STRONG><a name="[45c]"></a>sys_arch_unprotect</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_recv_config
</UL>

<P><STRONG><a name="[45d]"></a>sys_assert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[45e]"></a>sys_jiffies</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_jiffies &rArr; xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRandomInit
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRandomize
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppifOutput
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppWrite
</UL>

<P><STRONG><a name="[45f]"></a>ppp_trace</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_vprintf_RTOS
</UL>

<P><STRONG><a name="[466]"></a>ping_recv</STRONG> (Thumb, 118 bytes, Stack size 112 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPool
</UL>

<P><STRONG><a name="[279]"></a>PingPool</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = PingPool &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[632]"></a>ResetPing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ping.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[633]"></a>IsPingOk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ping.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[245]"></a>PingInit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = PingInit &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumericIP
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[46b]"></a>ethernetif_input</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usb_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_netif.o(.text)
</UL>
<P><STRONG><a name="[470]"></a>ethernetif_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usb_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_netif.o(.text)
</UL>
<P><STRONG><a name="[261]"></a>USBConfigureInterface</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, usb_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = USBConfigureInterface &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[473]"></a>USBInterfaceDown</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[476]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[47b]"></a>netconn_delete</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = netconn_delete &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[47d]"></a>netconn_getaddr</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[47e]"></a>netconn_bind</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[47f]"></a>netconn_connect</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_connect &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[480]"></a>netconn_disconnect</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = netconn_disconnect &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[481]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[482]"></a>netconn_accept</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_accept &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[484]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[485]"></a>netconn_recv</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[487]"></a>netconn_recved</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = netconn_recved &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[488]"></a>netconn_send</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netconn_send &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[489]"></a>netconn_sendto</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</UL>

<P><STRONG><a name="[48a]"></a>netconn_write</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netconn_write &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[48c]"></a>netconn_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[48d]"></a>netconn_shutdown</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[47c]"></a>netconn_free</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[477]"></a>netconn_alloc</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_alloc &rArr; sys_sem_new &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[b5]"></a>do_newconn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>do_delconn</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = do_delconn &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>do_bind</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = do_bind &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>do_connect</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>do_disconnect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = do_disconnect &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>do_listen</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>do_send</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>do_recv</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>do_write</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>do_getaddr</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = do_getaddr &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>do_close</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = do_close &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[4b5]"></a>netbuf_new</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[490]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[4b6]"></a>netbuf_alloc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[4b7]"></a>netbuf_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[4b8]"></a>netbuf_ref</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[4b9]"></a>netbuf_chain</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[4bb]"></a>netbuf_data</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
</UL>

<P><STRONG><a name="[4bc]"></a>netbuf_next</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
</UL>

<P><STRONG><a name="[4bd]"></a>netbuf_first</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
</UL>

<P><STRONG><a name="[1b0]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2e4]"></a>lwip_accept</STRONG> (Thumb, 556 bytes, Stack size 64 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lwip_accept &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_valid
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_acceptClient
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpTask
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_acceptClient
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processDataConnections
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_acceptClient
</UL>

<P><STRONG><a name="[2e0]"></a>lwip_bind</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_listen
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpTask
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_port
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pasv
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newServerSocket
</UL>

<P><STRONG><a name="[2d8]"></a>lwip_close</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIOCtl
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_con
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_valid
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_listen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_pool
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTCP
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingInit
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_acceptClient
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_fdSanity
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_delSocket
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpTask
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_fdSanity
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_acceptClient
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_setupNewTransfer
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_delSocket
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_acceptClient
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fdSanity
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newServerSocket
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_delSocket
</UL>

<P><STRONG><a name="[2e6]"></a>lwip_connect</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_con
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_prepTransfer
</UL>

<P><STRONG><a name="[2e1]"></a>lwip_listen</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_listen
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpTask
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pasv
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newServerSocket
</UL>

<P><STRONG><a name="[468]"></a>lwip_recvfrom</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
</UL>

<P><STRONG><a name="[4c2]"></a>lwip_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[2d7]"></a>lwip_recv</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTCP
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_processConnections
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_fdSanity
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleUpload
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processCtrlConnections
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_processConnections
</UL>

<P><STRONG><a name="[465]"></a>lwip_sendto</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>

<P><STRONG><a name="[2da]"></a>lwip_send</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_pool
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessCharacter
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessDont
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessDo
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessWont
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessWill
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendData
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendError
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleDownload
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newConnection
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_frame_send
</UL>

<P><STRONG><a name="[2dc]"></a>lwip_socket</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_con
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_listen
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingInit
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpTask
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_setupNewTransfer
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newServerSocket
</UL>

<P><STRONG><a name="[4c3]"></a>lwip_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[2e3]"></a>lwip_select</STRONG> (Thumb, 840 bytes, Stack size 120 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lwip_select &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_valid
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusTCPTask
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_fdSanity
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_fdSanity
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fdSanity
</UL>

<P><STRONG><a name="[4c6]"></a>lwip_shutdown</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
</UL>

<P><STRONG><a name="[4c8]"></a>lwip_getpeername</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[3fa]"></a>lwip_getsockname</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_port
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pasv
</UL>

<P><STRONG><a name="[4c9]"></a>lwip_getsockopt</STRONG> (Thumb, 446 bytes, Stack size 64 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[2dd]"></a>lwip_setsockopt</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_con
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_valid
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_listen
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingInit
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpTask
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_initTransfer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_port
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newServerSocket
</UL>

<P><STRONG><a name="[2de]"></a>lwip_ioctl</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_listen
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newConnection
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpTask
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processDataConnections
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newConnection
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_setupNewTransfer
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newServerSocket
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newConnection
</UL>

<P><STRONG><a name="[4cb]"></a>lwip_fcntl</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[2e7]"></a>SetSocketTCPPrio</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSocketTCPPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_con
</UL>

<P><STRONG><a name="[b4]"></a>tcpip_input</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcpip_input &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_netif.o(.text)
</UL>
<P><STRONG><a name="[4ca]"></a>tcpip_callback_with_block</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_callback
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_callback
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
</UL>

<P><STRONG><a name="[4d0]"></a>tcpip_timeout</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[4d1]"></a>tcpip_untimeout</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[478]"></a>tcpip_apimsg</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[4d2]"></a>tcpip_netifapi</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[4d3]"></a>tcpip_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vlwIPInit
</UL>

<P><STRONG><a name="[4d4]"></a>pbuf_free_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[4d5]"></a>mem_free_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[516]"></a>link_required</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_starting
</UL>

<P><STRONG><a name="[4d6]"></a>link_terminated</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = link_terminated &rArr; pppLinkTerminated &rArr; pppRecvWakeup &rArr; sio_read_abort &rArr; DeviceIOCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plogout
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppLinkTerminated
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppHup
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_finished
</UL>

<P><STRONG><a name="[4d9]"></a>link_down</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = link_down &rArr; pppLinkDown &rArr; pppRecvWakeup &rArr; sio_read_abort &rArr; DeviceIOCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppLinkDown
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_down
</UL>

<P><STRONG><a name="[4dd]"></a>link_established</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = link_established &rArr; network_phase &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_login
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pap_passwd
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_phase
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_authwithpeer
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_authpeer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_up
</UL>

<P><STRONG><a name="[4e1]"></a>auth_peer_fail</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = auth_peer_fail &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_protrej
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_reqtimeout
</UL>

<P><STRONG><a name="[4e2]"></a>auth_peer_success</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = auth_peer_success &rArr; network_phase &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_phase
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthreq
</UL>

<P><STRONG><a name="[4e3]"></a>auth_withpeer_fail</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = auth_withpeer_fail &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppIOCtl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthnak
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_protrej
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_timeout
</UL>

<P><STRONG><a name="[4e5]"></a>auth_withpeer_success</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = auth_withpeer_success &rArr; network_phase &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_phase
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthack
</UL>

<P><STRONG><a name="[4e7]"></a>np_up</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = np_up &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[4e8]"></a>np_down</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = np_down &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL>

<P><STRONG><a name="[4e9]"></a>np_finished</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = np_finished &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_finished
</UL>

<P><STRONG><a name="[4ea]"></a>auth_reset</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = auth_reset &rArr; get_pap_passwd
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;have_pap_secret
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;have_chap_secret
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pap_passwd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_resetci
</UL>

<P><STRONG><a name="[51c]"></a>check_passwd</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = check_passwd
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthreq
</UL>

<P><STRONG><a name="[4ed]"></a>bad_ip_adrs</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bad_ip_adrs &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_check
</UL>

<P><STRONG><a name="[4f0]"></a>auth_ip_addr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = auth_ip_addr &rArr; ip_addr_check &rArr; bad_ip_adrs &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[500]"></a>fsm_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_init
</UL>

<P><STRONG><a name="[4f1]"></a>fsm_sdata</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppWrite
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_sprotrej
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpSendEchoRequest
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_extcode
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_protreject
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_close
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfreq
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfack
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfnakrej
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermreq
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timeout
</UL>

<P><STRONG><a name="[4f4]"></a>fsm_lowerup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = fsm_lowerup &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_lowerup
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_open
</UL>

<P><STRONG><a name="[4f5]"></a>fsm_lowerdown</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fsm_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerdown
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_protrej
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_lowerdown
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_open
</UL>

<P><STRONG><a name="[4f6]"></a>fsm_open</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = fsm_open &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerdown
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerup
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_open
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_open
</UL>

<P><STRONG><a name="[4f7]"></a>fsm_close</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_close
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>

<P><STRONG><a name="[4fd]"></a>fsm_input</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_input &rArr; fsm_rconfreq &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfreq
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfack
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfnakrej
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermreq
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermack
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rcoderej
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_input
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_input
</UL>

<P><STRONG><a name="[4ff]"></a>fsm_protreject</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = fsm_protreject &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_protrej
</UL>

<P><STRONG><a name="[71]"></a>lcp_init</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>lcp_open</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lcp_open &rArr; fsm_open &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_open
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>lcp_close</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_finished
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_idle
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_time_expired
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_phase
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppStop
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpLinkFailure
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_finished
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_fail
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_peer_fail
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>lcp_lowerup</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lcp_lowerup &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_set_xaccm
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_send_config
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_recv_config
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerup
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>lcp_lowerdown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lcp_lowerdown &rArr; fsm_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerdown
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppHup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[510]"></a>lcp_sprotrej</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lcp_sprotrej &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInput
</UL>

<P><STRONG><a name="[4e0]"></a>upap_authwithpeer</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = upap_authwithpeer &rArr; upap_sauthreq &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
</UL>

<P><STRONG><a name="[4df]"></a>upap_authpeer</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = upap_authpeer &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
</UL>

<P><STRONG><a name="[4d8]"></a>pppLinkTerminated</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pppLinkTerminated &rArr; pppRecvWakeup &rArr; sio_read_abort &rArr; DeviceIOCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppRecvWakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_terminated
</UL>

<P><STRONG><a name="[4da]"></a>pppLinkDown</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pppLinkDown &rArr; pppRecvWakeup &rArr; sio_read_abort &rArr; DeviceIOCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppRecvWakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_down
</UL>

<P><STRONG><a name="[522]"></a>pppSetAuth</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pppSetAuth &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInit
</UL>

<P><STRONG><a name="[523]"></a>pppInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pppInit &rArr; pppSetAuth &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppSetAuth
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magicInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[525]"></a>PPPSemTake</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ppp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[526]"></a>PPPSemGive</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ppp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>

<P><STRONG><a name="[527]"></a>pppOverSerialOpen</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = pppOverSerialOpen &rArr; pppStart &rArr; lcp_open &rArr; fsm_open &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppStart
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[528]"></a>pppClose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ppp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppStop
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppRecvWakeup
</UL>

<P><STRONG><a name="[529]"></a>pppSigHUP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pppSigHUP &rArr; pppHup &rArr; pppDrop &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppHup
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[4e4]"></a>pppIOCtl</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pppIOCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_fail
</UL>

<P><STRONG><a name="[52c]"></a>pppMTU</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pppMTU
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppifNetifInit
</UL>

<P><STRONG><a name="[4f2]"></a>pppWrite</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppAppend
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nPut
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_sresp
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>

<P><STRONG><a name="[50c]"></a>ppp_send_config</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ppp_send_config
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_down
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_up
</UL>

<P><STRONG><a name="[50b]"></a>ppp_set_xaccm</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ppp_set_xaccm &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
</UL>

<P><STRONG><a name="[50d]"></a>ppp_recv_config</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ppp_recv_config &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_down
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_up
</UL>

<P><STRONG><a name="[4e6]"></a>get_idle_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_idle
</UL>

<P><STRONG><a name="[502]"></a>GetMask</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetMask
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[501]"></a>sifvjcomp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sifvjcomp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_down
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[504]"></a>sifup</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = sifup &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[505]"></a>sifnpmode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[50a]"></a>sifdown</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sifdown &rArr; netif_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL>

<P><STRONG><a name="[503]"></a>sifaddr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sifaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[509]"></a>cifaddr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cifaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_clear_addrs
</UL>

<P><STRONG><a name="[506]"></a>sifdefaultroute</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sifdefaultroute
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>

<P><STRONG><a name="[508]"></a>cifdefaultroute</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cifdefaultroute
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_clear_addrs
</UL>

<P><STRONG><a name="[52e]"></a>pppSingleBuf</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pppSingleBuf &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInput
</UL>

<P><STRONG><a name="[533]"></a>PPP_Pool</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = PPP_Pool &rArr; pppInProc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_read
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
</UL>

<P><STRONG><a name="[534]"></a>pppos_input</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ppp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
</UL>

<P><STRONG><a name="[535]"></a>ppp_set_netif_linkcallback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ppp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_callback
</UL>

<P><STRONG><a name="[537]"></a>avRandomInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, randm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = avRandomInit &rArr; sys_jiffies &rArr; xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRandomize
</UL>

<P><STRONG><a name="[532]"></a>avRandomize</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, randm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = avRandomize &rArr; avRandomInit &rArr; sys_jiffies &rArr; xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRandomInit
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
</UL>

<P><STRONG><a name="[1a9]"></a>avRandom</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, randm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = avRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
</UL>

<P><STRONG><a name="[1ad]"></a>mem_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[cd]"></a>mem_free</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyConnection
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_destroyConnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[53b]"></a>mem_trim</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mem_trim &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[3f6]"></a>mem_malloc</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newConnection
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newConnection
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newTransfer
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newConnection
</UL>

<P><STRONG><a name="[53c]"></a>mem_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1ae]"></a>memp_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[486]"></a>memp_malloc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[47a]"></a>memp_free</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1af]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[540]"></a>netif_set_gw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[53f]"></a>netif_set_netmask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[53d]"></a>netif_set_ipaddr</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[53e]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[471]"></a>netif_add</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigureInterface
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifup
</UL>

<P><STRONG><a name="[52d]"></a>netif_set_default</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifdefaultroute
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifdefaultroute
</UL>

<P><STRONG><a name="[474]"></a>netif_set_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBInterfaceDown
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifdown
</UL>

<P><STRONG><a name="[475]"></a>netif_remove</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = netif_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBInterfaceDown
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifup
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifdown
</UL>

<P><STRONG><a name="[6bc]"></a>netif_find</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>netif_set_up</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConfigureInterface
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifup
</UL>

<P><STRONG><a name="[542]"></a>netif_set_link_up</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[6bd]"></a>netif_set_link_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[536]"></a>netif_set_link_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_set_netif_linkcallback
</UL>

<P><STRONG><a name="[543]"></a>netif_poll</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = netif_poll &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netif.o(.text)
</UL>
<P><STRONG><a name="[545]"></a>netif_loop_output</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = netif_loop_output &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[48f]"></a>pbuf_free</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_int
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppSingleBuf
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInput
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppifOutput
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nPut
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppDrop
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppWrite
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[46a]"></a>pbuf_alloc</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppSingleBuf
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppifOutput
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppAppend
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppWrite
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[531]"></a>pbuf_realloc</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
</UL>

<P><STRONG><a name="[52f]"></a>pbuf_header</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_header
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInput
</UL>

<P><STRONG><a name="[544]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
</UL>

<P><STRONG><a name="[548]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_ref &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[4ba]"></a>pbuf_cat</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
</UL>

<P><STRONG><a name="[549]"></a>pbuf_chain</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[54a]"></a>pbuf_dechain</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[48e]"></a>pbuf_copy</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[4c1]"></a>pbuf_copy_partial</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_copy_partial &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[54b]"></a>pbuf_take</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[54c]"></a>pbuf_coalesce</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[54e]"></a>pbuf_get_at</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>

<P><STRONG><a name="[54d]"></a>pbuf_memcmp</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[54f]"></a>pbuf_memfind</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[550]"></a>pbuf_strstr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[586]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[4a9]"></a>raw_bind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[4ac]"></a>raw_connect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[4a1]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[4b2]"></a>raw_sendto</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = raw_sendto &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[4b1]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[4a7]"></a>raw_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = raw_remove &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[4a0]"></a>raw_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = raw_new &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[408]"></a>sys_msleep</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sys_msleep &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newServerSocket
</UL>

<P><STRONG><a name="[553]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[546]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>

<P><STRONG><a name="[554]"></a>tcp_pcb_purge</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[555]"></a>tcp_slowtmr</STRONG> (Thumb, 1046 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[55a]"></a>tcp_pcb_remove</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[49c]"></a>tcp_close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[55e]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[491]"></a>tcp_recved</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[55f]"></a>tcp_recv_null</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[560]"></a>tcp_fasttmr</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[561]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[49d]"></a>tcp_shutdown</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[562]"></a>tcp_abandon</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[4a6]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[4ab]"></a>tcp_bind</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[4b0]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[564]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[565]"></a>tcp_next_iss</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[4ae]"></a>tcp_connect</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[4cc]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSocketTCPPrio
</UL>

<P><STRONG><a name="[567]"></a>tcp_seg_copy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[56a]"></a>tcp_alloc</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[4a4]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[496]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[498]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[499]"></a>tcp_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[49b]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[497]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[49a]"></a>tcp_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[6be]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[574]"></a>tcp_input</STRONG> (Thumb, 1418 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[566]"></a>tcp_enqueue_flags</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[55d]"></a>tcp_send_fin</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[493]"></a>tcp_write</STRONG> (Thumb, 1184 bytes, Stack size 104 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[56e]"></a>tcp_send_empty_ack</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[494]"></a>tcp_output</STRONG> (Thumb, 506 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[559]"></a>tcp_rst</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[557]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[571]"></a>tcp_rexmit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[56d]"></a>tcp_rexmit_fast</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[558]"></a>tcp_keepalive</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_keepalive &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[556]"></a>tcp_zero_window_probe</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[57e]"></a>icmp_input</STRONG> (Thumb, 490 bytes, Stack size 48 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[581]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[582]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[576]"></a>inet_chksum_pseudo</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[584]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inet_chksum_pseudo_partial &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[463]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[57f]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[551]"></a>ip_route</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[d5]"></a>ip_input</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ppp.o(.text)
</UL>
<P><STRONG><a name="[552]"></a>ip_output_if</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[57d]"></a>ip_output</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[57b]"></a>ip_output_hinted</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[575]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[589]"></a>ip4_addr_netmask_valid</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>

<P><STRONG><a name="[58a]"></a>ipaddr_aton</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[58b]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>

<P><STRONG><a name="[58d]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>

<P><STRONG><a name="[58c]"></a>ipaddr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipaddr_ntoa &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOurIPStr
</UL>

<P><STRONG><a name="[590]"></a>ip_reass_tmr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
</UL>

<P><STRONG><a name="[585]"></a>ip_reass</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[588]"></a>ip_frag</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[2df]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_listen
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpTask
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_port
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pasv
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInput
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[467]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[3fb]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_port
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pasv
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_netmask_valid
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMask
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_reqci
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_rejci
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_nakci
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_ackci
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>

<P><STRONG><a name="[4ee]"></a>lwip_ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_reqci
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_addci
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_ip_adrs
</UL>

<P><STRONG><a name="[46f]"></a>sys_timeout</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lwip_timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_idle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_lowerup
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_protreject
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_close
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermreq
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timeout
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_authpeer
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_up
</UL>

<P><STRONG><a name="[55c]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lwip_timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1b1]"></a>sys_timeouts_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwip_timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4cf]"></a>sys_untimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lwip_timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_idle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthreq
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_lowerdown
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_lowerup
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_echo_lowerdown
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_protreject
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_close
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerdown
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfreq
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfack
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfnakrej
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermreq
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermack
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timeout
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_authpeer
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_down
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_up
</UL>

<P><STRONG><a name="[4cd]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lwip_timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[587]"></a>udp_input</STRONG> (Thumb, 552 bytes, Stack size 64 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[4aa]"></a>udp_bind</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[594]"></a>udp_sendto_if</STRONG> (Thumb, 482 bytes, Stack size 72 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[4b4]"></a>udp_sendto</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[4b3]"></a>udp_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[4ad]"></a>udp_connect</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[4af]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
</UL>

<P><STRONG><a name="[4a3]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[4a8]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_remove &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[4a2]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[46e]"></a>etharp_tmr</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = etharp_tmr &rArr; free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[59a]"></a>etharp_find_addr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>

<P><STRONG><a name="[541]"></a>etharp_request</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[59e]"></a>etharp_query</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[46d]"></a>etharp_output</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_output
</UL>

<P><STRONG><a name="[4ce]"></a>ethernet_input</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[291]"></a>add_timer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimers
</UL>

<P><STRONG><a name="[6bf]"></a>get_timer_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[6c0]"></a>get_timer_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[6c1]"></a>get_rese_timer_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[6c2]"></a>start_timer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[6c3]"></a>stop_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[630]"></a>load_timer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemPPPStatusCB
</UL>

<P><STRONG><a name="[6c4]"></a>reset_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[59f]"></a>inc_timers</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[211]"></a>vApplicationTickHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_timers
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>

<P><STRONG><a name="[42]"></a>WDTCountersInc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wdt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> user_timers.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>Default_WDTHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQ
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQ
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQ
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQ
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[232]"></a>InitWDT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[242]"></a>ResetWDT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReInitDevSystem
</UL>

<P><STRONG><a name="[5a1]"></a>get_ID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_ID &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProcessorID
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_hash
</UL>

<P><STRONG><a name="[5a3]"></a>calc_hash</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, security_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = calc_hash &rArr; get_ID &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityInit
</UL>

<P><STRONG><a name="[3f4]"></a>NetAccessRequest</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, security_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NetAccessRequest &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_input
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOGIN_process
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCookies
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pass
</UL>

<P><STRONG><a name="[5a4]"></a>SmsAccessRequest</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, security_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SmsAccessRequest &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
</UL>

<P><STRONG><a name="[6c5]"></a>GetPassword</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, security_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>GetProcessorID</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, security_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetProcessorID &rArr; get_ID &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ID
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCookies
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[5a5]"></a>default_security_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, security_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityInit
</UL>

<P><STRONG><a name="[25a]"></a>SecurityInit</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, security_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = SecurityInit &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_security_init
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_hash
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[5a6]"></a>DelAllSecurity</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, security_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[2d3]"></a>CRC16</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, crc16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSaver
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSaver
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saver_addr_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_crc
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_check_crc
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialSend
</UL>

<P><STRONG><a name="[6c6]"></a>ComputeCRC8</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, crc16.o(.text), UNUSED)

<P><STRONG><a name="[5a7]"></a>MBCReadInputRegisters</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mb_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MBCReadInputRegisters &rArr; ReadInputRegistersProc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInputRegistersProc
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBClientProcess
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_pool
</UL>

<P><STRONG><a name="[b0]"></a>ModbusTCPTask</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ModbusTCPTask &rArr; mb_processConnections &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timeout
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_acceptClient
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fdSanity
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newServerSocket
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_processConnections
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_task1.o(.text)
</UL>
<P><STRONG><a name="[24e]"></a>MBClientProcess</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, mb_serial_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MBClientProcess &rArr; MBCReadInputRegisters &rArr; ReadInputRegistersProc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialSend
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialErrorResponse
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCReadInputRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Task
</UL>

<P><STRONG><a name="[6c7]"></a>GetMBDriverHandle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb_serial_port.o(.text), UNUSED)

<P><STRONG><a name="[5ba]"></a>GetMBDataBuff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb_serial_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerWriteSingleRegister1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerReadInputRegisters1
</UL>

<P><STRONG><a name="[5b7]"></a>MBSBusSerPortInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mb_serial_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MBSBusSerPortInit &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartControlTask
</UL>

<P><STRONG><a name="[5b8]"></a>MBCBusSerPortInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mb_serial_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
</UL>

<P><STRONG><a name="[5b5]"></a>MBSerialErrorResponse</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mb_serial_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBClientProcess
</UL>

<P><STRONG><a name="[6c8]"></a>GetErrCounterHigh</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mb_serial_port.o(.text), UNUSED)

<P><STRONG><a name="[6c9]"></a>GetErrCounterLow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb_serial_port.o(.text), UNUSED)

<P><STRONG><a name="[6ca]"></a>ClearCounters</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mb_serial_port.o(.text), UNUSED)

<P><STRONG><a name="[5b9]"></a>mb_check_crc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mb_serial_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mb_check_crc &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialReceive
</UL>

<P><STRONG><a name="[5b6]"></a>MBSerialSend</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mb_serial_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MBSerialSend &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerWriteSingleRegister1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerReadInputRegisters1
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBClientProcess
</UL>

<P><STRONG><a name="[24d]"></a>MBSerialReceive</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mb_serial_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MBSerialReceive &rArr; mb_check_crc &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_check_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerWriteSingleRegister1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerReadInputRegisters1
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Task
</UL>

<P><STRONG><a name="[2c2]"></a>ServerReadInputRegisters1</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mbserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ServerReadInputRegisters1 &rArr; MBSerialReceive &rArr; mb_check_crc &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialReceive
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMBDataBuff
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerReadInputRegisters
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_rw
</UL>

<P><STRONG><a name="[2c1]"></a>ServerWriteSingleRegister1</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mbserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ServerWriteSingleRegister1 &rArr; MBSerialReceive &rArr; mb_check_crc &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialReceive
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMBDataBuff
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSerialSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_rw
</UL>

<P><STRONG><a name="[2c3]"></a>GetInpRegsUSHORT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mbserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_rw
</UL>

<P><STRONG><a name="[5bb]"></a>memrevercy</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, mbserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memrevercy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInpRegsLONG
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInpRegsFLOAT
</UL>

<P><STRONG><a name="[2c5]"></a>GetInpRegsFLOAT</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mbserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetInpRegsFLOAT &rArr; memrevercy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrevercy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolMBS
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_rw
</UL>

<P><STRONG><a name="[2c4]"></a>GetInpRegsLONG</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mbserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetInpRegsLONG &rArr; memrevercy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrevercy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_rw
</UL>

<P><STRONG><a name="[2c9]"></a>ServerReadInputRegisters</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mbserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ServerReadInputRegisters &rArr; ServerReadInputRegisters1 &rArr; MBSerialReceive &rArr; mb_check_crc &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerReadInputRegisters1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolMBS
</UL>

<P><STRONG><a name="[5bc]"></a>make_icon_dark</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = make_icon_dark &rArr; LCD_draw_image &rArr; LCD_data_send_buf &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleIcons
</UL>

<P><STRONG><a name="[5be]"></a>make_icon_bright</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = make_icon_bright &rArr; LCD_draw_image &rArr; LCD_data_send_buf &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleIcons
</UL>

<P><STRONG><a name="[5bf]"></a>toggleIcons</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = toggleIcons &rArr; make_icon_bright &rArr; LCD_draw_image &rArr; LCD_data_send_buf &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_icon_bright
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_icon_dark
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_menu
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_to_clock
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_page
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_clock_menu
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_service_menu
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_archive_menu
</UL>

<P><STRONG><a name="[5c0]"></a>setCentred</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setCentred
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ustavki_menu
</UL>

<P><STRONG><a name="[5c1]"></a>LCD_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_reset &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[28a]"></a>init_lcd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = init_lcd &rArr; LCD_init &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_reset
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCentred
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_icon_bright
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_icon_dark
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_task
</UL>

<P><STRONG><a name="[5dd]"></a>clear_time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display_133x64.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_clock_menu
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_service_menu
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_archive_menu
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_error_menu
</UL>

<P><STRONG><a name="[5c6]"></a>update_archive_menu</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = update_archive_menu &rArr; LCD_erase_area &rArr; LCD_data_send_buf &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToTheNewestRecord
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLogRecord
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetArchInfo
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
</UL>

<P><STRONG><a name="[5cc]"></a>draw_ustavki_menu</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = draw_ustavki_menu &rArr; LCD_draw_rectangle &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCentred
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[5ce]"></a>draw_packets_menu</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = draw_packets_menu &rArr; LCD_erase_area &rArr; LCD_data_send_buf &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[5cf]"></a>draw_voltage_menu</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = draw_voltage_menu &rArr; LCD_draw_rectangle &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[5d0]"></a>update_service_menu</STRONG> (Thumb, 1834 bytes, Stack size 72 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = update_service_menu &rArr; draw_voltage_menu &rArr; LCD_draw_rectangle &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetFreeMem
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUstVal
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSimNum
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSigLevel
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOurIPStr
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProcessorID
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_voltage_menu
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_packets_menu
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ustavki_menu
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
</UL>

<P><STRONG><a name="[5d1]"></a>get_res_format</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_res_format &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
</UL>

<P><STRONG><a name="[5d3]"></a>draw_resistors_menu</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = draw_resistors_menu &rArr; LCD_draw_rectangle &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
</UL>

<P><STRONG><a name="[5d4]"></a>draw_fail_menu</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = draw_fail_menu &rArr; LCD_draw_rectangle &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
</UL>

<P><STRONG><a name="[5d5]"></a>update_resistors_menu</STRONG> (Thumb, 720 bytes, Stack size 56 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = update_resistors_menu &rArr; draw_fail_menu &rArr; LCD_draw_rectangle &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_text
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;direct_text
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fail_menu
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_resistors_menu
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_format
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
</UL>

<P><STRONG><a name="[5d8]"></a>draw_pow_indy</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
</UL>

<P><STRONG><a name="[5da]"></a>update_clock_menu</STRONG> (Thumb, 694 bytes, Stack size 96 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSigLevel
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpName
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim_state_get
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_state_get
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_text
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;direct_text
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pow_indy
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
</UL>

<P><STRONG><a name="[27d]"></a>update_menu</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_archive_menu
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_menu
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_to_clock
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_page
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_task
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_clock_menu
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_service_menu
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_archive_menu
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_error_menu
</UL>

<P><STRONG><a name="[27a]"></a>reset_to_clock</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = reset_to_clock &rArr; update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleIcons
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[28b]"></a>go_to_error_page</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = go_to_error_page &rArr; LCD_erase_area &rArr; LCD_data_send_buf &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_task
</UL>

<P><STRONG><a name="[5dc]"></a>switch_error_menu</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = switch_error_menu &rArr; update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_time
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_menu
</UL>

<P><STRONG><a name="[5de]"></a>switch_archive_menu</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = switch_archive_menu &rArr; update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_time
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleIcons
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_menu
</UL>

<P><STRONG><a name="[5df]"></a>switch_service_menu</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = switch_service_menu &rArr; update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDoorStatus
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_time
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleIcons
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_menu
</UL>

<P><STRONG><a name="[5e1]"></a>switch_clock_menu</STRONG> (Thumb, 622 bytes, Stack size 16 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = switch_clock_menu &rArr; update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_time
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleIcons
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_menu
</UL>

<P><STRONG><a name="[27c]"></a>switch_menu</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = switch_menu &rArr; kvit_done &rArr; fail_event &rArr; lock_page &rArr; update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_clock_menu
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_service_menu
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_archive_menu
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_error_menu
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleIcons
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[276]"></a>lock_page</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, display_133x64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lock_page &rArr; update_menu &rArr; update_clock_menu &rArr; draw_pow_indy &rArr; LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleIcons
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_event
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_event
</UL>

<P><STRONG><a name="[282]"></a>set_blink_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display_133x64.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[289]"></a>clr_blink_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display_133x64.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
</UL>

<P><STRONG><a name="[280]"></a>set_obriv_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display_133x64.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[281]"></a>clr_obriv_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display_133x64.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[27e]"></a>set_fail_page</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display_133x64.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvit_done
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[27f]"></a>clr_fail_page</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display_133x64.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
</UL>

<P><STRONG><a name="[5d6]"></a>invert_text</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
</UL>

<P><STRONG><a name="[5d7]"></a>direct_text</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
</UL>

<P><STRONG><a name="[5ea]"></a>is_invert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_symbol
</UL>

<P><STRONG><a name="[5e3]"></a>byte_invers</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_get
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data_send
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_set
</UL>

<P><STRONG><a name="[5e2]"></a>LCD_buff_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_buff_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_invers
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_pixel
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_symbol
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
</UL>

<P><STRONG><a name="[5e4]"></a>LCD_data_send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_data_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_invers
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_pixel
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_symbol
</UL>

<P><STRONG><a name="[5e5]"></a>LCD_buff_get</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_buff_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_invers
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_pixel
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_symbol
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
</UL>

<P><STRONG><a name="[5e6]"></a>LCD_config_send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_row
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_column
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>

<P><STRONG><a name="[5e7]"></a>LCD_set_column</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_set_column &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_config_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_symbol
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
</UL>

<P><STRONG><a name="[5e8]"></a>LCD_set_row</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_config_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_symbol
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
</UL>

<P><STRONG><a name="[5c4]"></a>LCD_setXY</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_row
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_column
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_putchar
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_error_page
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_pixel
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_symbol
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fail_menu
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_resistors_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_voltage_menu
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_packets_menu
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ustavki_menu
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_archive_menu
</UL>

<P><STRONG><a name="[5e9]"></a>LCD_put_symbol</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_put_symbol &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_row
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_column
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_get
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data_send
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_set
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_invert
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_putchar
</UL>

<P><STRONG><a name="[19d]"></a>LCD_putchar</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_putchar &rArr; LCD_put_symbol &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_symbol
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5ed]"></a>LCD_buff_get_addr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>

<P><STRONG><a name="[5eb]"></a>LCD_data_send_buf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_data_send_buf &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_erase_area
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_image
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>

<P><STRONG><a name="[5ec]"></a>LCD_buff_clear</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>

<P><STRONG><a name="[5c3]"></a>LCD_clear</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_clear &rArr; LCD_data_send_buf &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_clear
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data_send_buf
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_get_addr
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_config_send
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[5c2]"></a>LCD_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_init &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_config_send
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[5ee]"></a>LCD_put_pixel</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_get
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data_send
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_set
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_setXY
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_rectangle
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_draw_line
</UL>

<P><STRONG><a name="[5cd]"></a>LCD_draw_rectangle</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_draw_rectangle &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fail_menu
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_resistors_menu
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_voltage_menu
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ustavki_menu
</UL>

<P><STRONG><a name="[5d9]"></a>LCD_draw_line</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_draw_line &rArr; LCD_put_pixel &rArr; LCD_setXY &rArr; LCD_set_row &rArr; LCD_config_send &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_put_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pow_indy
</UL>

<P><STRONG><a name="[5bd]"></a>LCD_draw_image</STRONG> (Thumb, 394 bytes, Stack size 64 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_draw_image &rArr; LCD_data_send_buf &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data_send_buf
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_get_addr
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_row
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_column
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_get
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_icon_bright
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_icon_dark
</UL>

<P><STRONG><a name="[5c7]"></a>LCD_erase_area</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, lcd 133x65_uc1601s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_erase_area &rArr; LCD_data_send_buf &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data_send_buf
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_get_addr
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_row
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_column
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_get
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_buff_set
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_error_page
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pow_indy
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fail_menu
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_resistors_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_voltage_menu
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_packets_menu
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ustavki_menu
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_archive_menu
</UL>

<P><STRONG><a name="[5f0]"></a>clock_data_form</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clock_data_form &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
</UL>

<P><STRONG><a name="[24a]"></a>AddLogMessage</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_data_form
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCurrentPos
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPool
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_cnt_match
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetTask
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>

<P><STRONG><a name="[5ca]"></a>GetLogRecord</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetLogRecord &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCurrentPos
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_archive_menu
</UL>

<P><STRONG><a name="[5c8]"></a>GoToTheNewestRecord</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GoToTheNewestRecord &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_archive_menu
</UL>

<P><STRONG><a name="[5c9]"></a>GetArchInfo</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetArchInfo &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_archive_menu
</UL>

<P><STRONG><a name="[25c]"></a>InitLog</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = InitLog &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[41d]"></a>get_sms_ID</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_sms_ID &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMINAL_process
</UL>

<P><STRONG><a name="[25b]"></a>InitSMS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = InitSMS &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[5f3]"></a>sms_perform</STRONG> (Thumb, 2442 bytes, Stack size 40 bytes, sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = sms_perform &rArr; SetParameter &rArr; ini_puts &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSettingsFile
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToComQueue
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParameter
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;At_send
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ussd_send
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOurIPStr
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProcessorID
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
</UL>

<P><STRONG><a name="[5f4]"></a>sms_handling</STRONG> (Thumb, 478 bytes, Stack size 56 bytes, sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sms_handling &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
</UL>

<P><STRONG><a name="[317]"></a>sms_proces</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = sms_proces &rArr; sms_perform &rArr; SetParameter &rArr; ini_puts &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_check
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_time_gsm
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sms_ID
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_handling
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAccessRequest
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
</UL>

<P><STRONG><a name="[5f5]"></a>sms_queue_proc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, sms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[5f8]"></a>USBDeviceMode_USBTask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_rndis_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBDeviceMode_USBTask &rArr; RNDIS_Device_USBTask &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_USBTask
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIOCtl
</UL>

<P><STRONG><a name="[6cb]"></a>EVENT_USB_Device_Connect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_rndis_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[6cc]"></a>EVENT_USB_Device_Disconnect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_rndis_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[5fe]"></a>EVENT_USB_Device_ConfigurationChanged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_rndis_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EVENT_USB_Device_ConfigurationChanged &rArr; RNDIS_Device_ConfigureEndpoints &rArr; Endpoint_ConfigureEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ConfigureEndpoints
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_SetConfiguration
</UL>

<P><STRONG><a name="[600]"></a>EVENT_USB_Device_ControlRequest</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_rndis_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = EVENT_USB_Device_ControlRequest &rArr; RNDIS_Device_ProcessControlRequest &rArr; Endpoint_Write_Control_Stream_LE &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessControlRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
</UL>

<P><STRONG><a name="[628]"></a>CALLBACK_USB_GetDescriptor</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, descriptors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CALLBACK_USB_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetDescriptor
</UL>

<P><STRONG><a name="[601]"></a>RNDIS_Device_ProcessControlRequest</STRONG> (Thumb, 450 bytes, Stack size 16 bytes, rndisclassdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RNDIS_Device_ProcessControlRequest &rArr; Endpoint_Write_Control_Stream_LE &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteControlEndpoint
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Control_Stream_LE
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Read_Control_Stream_LE
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdDataTransfer
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessRNDISControlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Device_ControlRequest
</UL>

<P><STRONG><a name="[5ff]"></a>RNDIS_Device_ConfigureEndpoints</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, rndisclassdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RNDIS_Device_ConfigureEndpoints &rArr; Endpoint_ConfigureEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ConfigureEndpoint
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Device_ConfigurationChanged
</UL>

<P><STRONG><a name="[5f9]"></a>RNDIS_Device_USBTask</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, rndisclassdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RNDIS_Device_USBTask &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteControlEndpoint
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_ReadCommandData
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Stream_LE
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdDataTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceMode_USBTask
</UL>

<P><STRONG><a name="[5fb]"></a>RNDIS_Device_IsPacketReceived</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, rndisclassdevice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_count
</UL>

<P><STRONG><a name="[5fc]"></a>RNDIS_Device_ReadPacket</STRONG> (Thumb, 410 bytes, Stack size 64 bytes, rndisclassdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RNDIS_Device_ReadPacket &rArr; Endpoint_Read_Stream_LE
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_StallTransaction
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Read_Stream_LE
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_count
</UL>

<P><STRONG><a name="[5f7]"></a>RNDIS_Device_SendPacket</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, rndisclassdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RNDIS_Device_SendPacket &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteControlEndpoint
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Stream_LE
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_WaitUntilReady
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdDataTransfer
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUSB
</UL>

<P><STRONG><a name="[605]"></a>SIE_WriteCommamd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteControlEndpoint
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Stream_LE
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Read_Control_Stream_LE
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_USBTask
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ReadPacket
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessControlRequest
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetStatus
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ClearSetFeature
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_SetAddress
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetDescriptor
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetConfiguration
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_SetConfiguration
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Null_Stream
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ClearStatusStage
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdIrqHandler
</UL>

<P><STRONG><a name="[610]"></a>SIE_WriteCommandData</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_StallTransaction
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ConfigureEndpoint
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ClearSetFeature
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_SetAddress
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL17XX_USBConnect
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL17XX_SetDeviceAddress
</UL>

<P><STRONG><a name="[60b]"></a>SIE_ReadCommandData</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Stream_LE
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_USBTask
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetStatus
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_SetAddress
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Null_Stream
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdIrqHandler
</UL>

<P><STRONG><a name="[619]"></a>HAL_Reset</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USBInit
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdIrqHandler
</UL>

<P><STRONG><a name="[60e]"></a>Endpoint_StallTransaction</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Endpoint_StallTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommandData
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ReadPacket
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ClearSetFeature
</UL>

<P><STRONG><a name="[60a]"></a>Endpoint_ConfigureEndpoint</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Endpoint_ConfigureEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommandData
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ConfigureEndpoints
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init_Device
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdIrqHandler
</UL>

<P><STRONG><a name="[614]"></a>ReadControlEndpoint</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadControlEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveEndpointISR
</UL>

<P><STRONG><a name="[607]"></a>WriteControlEndpoint</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteControlEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Control_Stream_LE
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_USBTask
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_SendPacket
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessControlRequest
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetStatus
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetConfiguration
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ClearStatusStage
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveEndpointISR
</UL>

<P><STRONG><a name="[611]"></a>HAL17XX_SetDeviceAddress</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, endpoint_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommandData
</UL>

<P><STRONG><a name="[612]"></a>HAL17XX_USBConnect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL17XX_USBConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommandData
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USBConnect
</UL>

<P><STRONG><a name="[62d]"></a>Endpoint_GetSetupPackage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
</UL>

<P><STRONG><a name="[613]"></a>SlaveEndpointISR</STRONG> (Thumb, 334 bytes, Stack size 12 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SlaveEndpointISR &rArr; WriteControlEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteControlEndpoint
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadControlEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdIrqHandler
</UL>

<P><STRONG><a name="[608]"></a>DcdDataTransfer</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DcdDataTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Control_Stream_LE
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_USBTask
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_SendPacket
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessControlRequest
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetStatus
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetConfiguration
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ClearStatusStage
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMANewTransferRequestISR
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAEndTransferISR
</UL>

<P><STRONG><a name="[615]"></a>DMAEndTransferISR</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMAEndTransferISR &rArr; DcdDataTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdDataTransfer
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_HAL_GetISOBufferAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdIrqHandler
</UL>

<P><STRONG><a name="[617]"></a>DMANewTransferRequestISR</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMANewTransferRequestISR &rArr; DcdDataTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdDataTransfer
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_HAL_GetISOBufferAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdIrqHandler
</UL>

<P><STRONG><a name="[618]"></a>DcdIrqHandler</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DcdIrqHandler &rArr; Endpoint_ConfigureEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_ReadCommandData
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ConfigureEndpoint
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMANewTransferRequestISR
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAEndTransferISR
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveEndpointISR
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[616]"></a>CALLBACK_HAL_GetISOBufferAddress</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, endpoint_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMANewTransferRequestISR
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAEndTransferISR
</UL>

<P><STRONG><a name="[6cd]"></a>Dummy_EPGetISOAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, endpoint_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[61a]"></a>HAL_USBInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hal_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_USBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[61b]"></a>HAL_USBDeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disable
</UL>

<P><STRONG><a name="[622]"></a>HAL_EnableUSBInterrupt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetStatus
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ClearSetFeature
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init_Device
</UL>

<P><STRONG><a name="[61d]"></a>HAL_DisableUSBInterrupt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DisableUSBInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetStatus
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ClearSetFeature
</UL>

<P><STRONG><a name="[61e]"></a>HAL_USBConnect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_USBConnect &rArr; HAL17XX_USBConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL17XX_USBConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init_Device
</UL>

<P><STRONG><a name="[9c]"></a>USB_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_IRQHandler &rArr; DcdIrqHandler &rArr; Endpoint_ConfigureEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6ce]"></a>Endpoint_ConfigureEndpoint_Prv</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, endpoint_lpc.o(.text), UNUSED)

<P><STRONG><a name="[6cf]"></a>Endpoint_ClearEndpoints</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, endpoint_lpc.o(.text), UNUSED)

<P><STRONG><a name="[61f]"></a>Endpoint_ClearStatusStage</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, endpoint_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Endpoint_ClearStatusStage &rArr; WriteControlEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteControlEndpoint
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdDataTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetStatus
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ClearSetFeature
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_SetAddress
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetConfiguration
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_SetConfiguration
</UL>

<P><STRONG><a name="[60f]"></a>Endpoint_WaitUntilReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, endpoint_lpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_SendPacket
</UL>

<P><STRONG><a name="[6d0]"></a>Endpoint_Discard_Stream</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, endpointstream_lpc.o(.text), UNUSED)

<P><STRONG><a name="[620]"></a>Endpoint_Null_Stream</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, endpointstream_lpc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_ReadCommandData
</UL>

<P><STRONG><a name="[60c]"></a>Endpoint_Write_Stream_LE</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, endpointstream_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_ReadCommandData
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Control_Stream_LE
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_USBTask
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_SendPacket
</UL>

<P><STRONG><a name="[6d1]"></a>Endpoint_Write_Stream_BE</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, endpointstream_lpc.o(.text), UNUSED)

<P><STRONG><a name="[60d]"></a>Endpoint_Read_Stream_LE</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, endpointstream_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Endpoint_Read_Stream_LE
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Read_Control_Stream_LE
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ReadPacket
</UL>

<P><STRONG><a name="[6d2]"></a>Endpoint_Read_Stream_BE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, endpointstream_lpc.o(.text), UNUSED)

<P><STRONG><a name="[609]"></a>Endpoint_Write_Control_Stream_LE</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, endpointstream_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Endpoint_Write_Control_Stream_LE &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteControlEndpoint
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Stream_LE
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdDataTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessControlRequest
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetDescriptor
</UL>

<P><STRONG><a name="[6d3]"></a>Endpoint_Write_Control_Stream_BE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, endpointstream_lpc.o(.text), UNUSED)

<P><STRONG><a name="[606]"></a>Endpoint_Read_Control_Stream_LE</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, endpointstream_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Endpoint_Read_Control_Stream_LE &rArr; Endpoint_Read_Stream_LE
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Read_Stream_LE
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessControlRequest
</UL>

<P><STRONG><a name="[6d4]"></a>Endpoint_Read_Control_Stream_BE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, endpointstream_lpc.o(.text), UNUSED)

<P><STRONG><a name="[623]"></a>USB_ResetInterface</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbcontroller_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_ResetInterface &rArr; USB_Init_Device &rArr; Endpoint_ConfigureEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[5f6]"></a>USB_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbcontroller_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_Init &rArr; USB_ResetInterface &rArr; USB_Init_Device &rArr; Endpoint_ConfigureEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetInterface
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USBInit
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUSB
</UL>

<P><STRONG><a name="[624]"></a>USB_Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbcontroller_lpc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USBDeInit
</UL>

<P><STRONG><a name="[62c]"></a>USB_Device_ProcessControlRequest</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, devicestandardreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USB_Device_ProcessControlRequest &rArr; EVENT_USB_Device_ControlRequest &rArr; RNDIS_Device_ProcessControlRequest &rArr; Endpoint_Write_Control_Stream_LE &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_StallTransaction
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Device_ControlRequest
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetStatus
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ClearSetFeature
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_SetAddress
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetDescriptor
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_GetConfiguration
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_SetConfiguration
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_GetSetupPackage
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceTask
</UL>

<P><STRONG><a name="[5fd]"></a>USB_USBTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USB_USBTask &rArr; USB_DeviceTask &rArr; USB_Device_ProcessControlRequest &rArr; EVENT_USB_Device_ControlRequest &rArr; RNDIS_Device_ProcessControlRequest &rArr; Endpoint_Write_Control_Stream_LE &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceTask
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIOCtl
</UL>

<P><STRONG><a name="[62f]"></a>vModemPPPStatusCB</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, modemtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vModemPPPStatusCB &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToComQueue
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemtask.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>ModemTask</STRONG> (Thumb, 786 bytes, Stack size 64 bytes, modemtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ModemTask &rArr; sms_proces &rArr; sms_perform &rArr; SetParameter &rArr; ini_puts &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AwakeResetTask
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtPowLim
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSend
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_modem_to_online
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_modem_from_online
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_state_set
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sig_level
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_state_get
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPingOk
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPing
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Pool
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppSigHUP
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppOverSerialOpen
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInit
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppSetAuth
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_task1.o(.text)
</UL>
<P><STRONG><a name="[636]"></a>PutMesToModem</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, modemtask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[25f]"></a>vlwIPInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, modemtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = vlwIPInit &rArr; tcpip_init &rArr; sys_thread_new &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[419]"></a>GetOurIPStr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, modemtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetOurIPStr &rArr; ipaddr_ntoa &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[ab]"></a>UartControlTask</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, uartcontroltask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = UartControlTask &rArr; procMBS_RW &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolMBS
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegModBusPool
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSBusSerPortInit
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_task1.o(.text)
</UL>
<P><STRONG><a name="[63c]"></a>InitUartControl</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uartcontroltask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[356]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[42f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[e0]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[378]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getbool
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getl
</UL>

<P><STRONG><a name="[539]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRandom
</UL>

<P><STRONG><a name="[538]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRandomInit
</UL>

<P><STRONG><a name="[2f6]"></a>mktime</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, mktime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_stamp
</UL>

<P><STRONG><a name="[6d5]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorText
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTCP
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSaver
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSaver
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDiscreteText
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI2CText
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCtlMBS
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMBSText
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTATSText
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUartText
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSPText
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInputRegistersProc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModemSettings
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToFloat
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitButtonFunc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDiscreteFunc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMBProc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExpProc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNullDataFunc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAverageFunc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMEI
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_check
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imei
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_name
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemIOCtl
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModem
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModemText
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModem
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadImpText
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClockText
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppSingleBuf
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_sresp
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_set_xaccm
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_reqci
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_peer_success
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessNDISQuery
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUSB
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_handling
</UL>

<P><STRONG><a name="[2ed]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_synk_gsm
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_rejci
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_resetci
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_rejci
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_nakci
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_resetci
</UL>

<P><STRONG><a name="[2b5]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceLnEx
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ussd_send
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
</UL>

<P><STRONG><a name="[6d6]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6d7]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[6d8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorText
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_readdir
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_opendir
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_stat
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_open
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDiscreteText
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI2CText
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMBSText
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTATSText
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceLnEx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUartText
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSPText
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_modem
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMBQualFunc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAverageFunc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_name
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_modem
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModemText
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModem
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadImpText
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClockText
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthreq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_init
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_success
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_fail
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_archive_menu
</UL>

<P><STRONG><a name="[2bf]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_form
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newConnection
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppOverSerialOpen
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_reqci
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_nakci
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_init
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ConfigureEndpoint
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_SendPacket
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ConfigureEndpoints
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
</UL>

<P><STRONG><a name="[6da]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[640]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[226]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGenerateRunTimeStatsForTasksInList
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendError
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOurIPStr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INFO_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_process
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getNextDirEntry
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_changeCurrentPath
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[307]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMINAL_process
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATETIME_process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INFO_process
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONFIG_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_process
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOGIN_process
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCookies
</UL>

<P><STRONG><a name="[207]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execCommand
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_user
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppSetAuth
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
</UL>

<P><STRONG><a name="[1d4]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get_path
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_root
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_browse
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writekey
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writesection
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_tempname
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanstring
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;striptrailing
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_name
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd_dot_dot
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessRequest
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMIMEType
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMINAL_process
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATETIME_process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INFO_process
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONFIG_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_process
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOGIN_process
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCookies
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
</UL>

<P><STRONG><a name="[285]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTATSText
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceLn
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModemSettings
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingInit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLog
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_browse
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getkey
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strreverse
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_accum
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writesection
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getsection
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_gets
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSend
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imei
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_out_own_num
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_time_gsm
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_synk_gsm
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_input
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessRequest
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendData
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendError
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGI_parser
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMINAL_process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INFO_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_process
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCookies
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetAccessRequest
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getNextDirEntry
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execCommand
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pass
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_close
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_authwithpeer
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessNDISQuery
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_handling
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCentred
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAccessRequest
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUartControl
</UL>

<P><STRONG><a name="[1d1]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSaverFile
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_closedir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_opendir
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_readdir
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sensor_opened
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDevicePresent
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCMethodConfig
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventID
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttachSensor
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitPhysFuncAddr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhysFuncAddr
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_compute
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_operat
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_match_operat
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInitDataFuncAddr
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFuncAddr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_flush
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessRequest
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMIMEType
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sms_ID
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMINAL_process
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCookies
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_user
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
</UL>

<P><STRONG><a name="[302]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ussd_send
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_oper_check
</UL>

<P><STRONG><a name="[1c1]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wdt_cnt
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_VFS_readdir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_opendir
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_readdir
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_VFS_readdir
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_VFS_readdir
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_readdir
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at45_VFS_stat
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModemSettings
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhysFuncName
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFuncName
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writekey
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writesection
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_out_own_num
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemIOCtl
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pap_passwd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendError
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOurIPStr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSNIFFER_process
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMINAL_process
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINIT_process
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATETIME_process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INFO_process
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONFIG_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_process
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOGIN_process
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getNextDirEntry
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rnto
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_doListing
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_changeCurrentPath
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_handling
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[310]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_out_own_num
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGI_parser
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSNIFFER_process
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCookies
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetAccessRequest
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execCommand
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_retr
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAccessRequest
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
</UL>

<P><STRONG><a name="[1cc]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filename
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd_dot_dot
</UL>

<P><STRONG><a name="[2bd]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_get_reg
</UL>

<P><STRONG><a name="[375]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[63a]"></a>sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
</UL>

<P><STRONG><a name="[3fc]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATETIME_process
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rest
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_port
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[643]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[379]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[235]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumericPort
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumericIP
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_get_reg
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModemSettings
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_clock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorSystem
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLog
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLCDContrast
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMBQualFunc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitButtonFunc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDiscreteFunc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMBProc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExpProc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNullDataFunc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAverageFunc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_check
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sig_level
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_synk_gsm
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_process
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUartControl
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[290]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimerParam
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
</UL>

<P><STRONG><a name="[388]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpExIntermediate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpIntermediate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageFunc
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[38f]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpExIntermediate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpIntermediate
</UL>

<P><STRONG><a name="[649]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[390]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBQualFunc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpExIntermediate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpIntermediate
</UL>

<P><STRONG><a name="[38a]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBQualFunc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageFunc
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[635]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[64e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[38c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAverageFunc
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[391]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBQualFunc
</UL>

<P><STRONG><a name="[389]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonFunc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscreteFunc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBfunc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpExIntermediate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageFunc
</UL>

<P><STRONG><a name="[38b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAverageFunc
</UL>

<P><STRONG><a name="[39f]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEvents
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_format
</UL>

<P><STRONG><a name="[38d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAverageFunc
</UL>

<P><STRONG><a name="[284]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorText
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_process
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_format
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
</UL>

<P><STRONG><a name="[39a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_const
</UL>

<P><STRONG><a name="[6db]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[5d2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_format
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[23c]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModemSettings
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUstValues
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToFloat
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExpProc
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[38e]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_val
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_compute
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpIntermediate
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
</UL>

<P><STRONG><a name="[39e]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTask
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_val
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_compute
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
</UL>

<P><STRONG><a name="[39d]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_val
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_compute
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_format
</UL>

<P><STRONG><a name="[6dc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[664]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[63e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[6dd]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[63d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[6de]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[64a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6df]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[641]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[63f]"></a>_localtime</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, localtime_i.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[644]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[64f]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[65b]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[657]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[653]"></a>_scanf_really_real</STRONG> (Thumb, 560 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[642]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[dd]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> sscanf.o(.text)
<LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> sscanf.o(.text)
<LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[645]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[658]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[6e0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[648]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[647]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[64c]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[64b]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[652]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[659]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[6e1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[655]"></a>__vfscanf</STRONG> (Thumb, 806 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[651]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[6e2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6e3]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[65c]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e4]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[5c5]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_error_page
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fail_menu
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_resistors_menu
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_service_menu
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_voltage_menu
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_packets_menu
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ustavki_menu
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_archive_menu
</UL>

<P><STRONG><a name="[6e5]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[5cb]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_archive_menu
</UL>

<P><STRONG><a name="[65e]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e6]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[306]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_reqci
</UL>

<P><STRONG><a name="[6e7]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[6e8]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[65f]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e9]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[225]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGenerateRunTimeStatsForTasksInList
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorText
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDiscreteText
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI2CText
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMBSText
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSTATSText
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUartText
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSPText
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcEvent
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityInit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEventCheck
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_oper_check
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_gprs_connect
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModemText
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadImpText
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClockText
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendData
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendError
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIPELINES_process
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INFO_process
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_process
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProcessorID
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCookies
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getNextDirEntry
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_perform
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_data_form
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_clock_menu
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_resistors_menu
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_format
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procS485
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMBS_RW
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procTerminal
</UL>

<P><STRONG><a name="[6ea]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[6eb]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[660]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6ec]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[6ed]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[6ee]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[3eb]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>

<P><STRONG><a name="[646]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6ef]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[665]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[6f0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[6f1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[6f2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[666]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[654]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[23b]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModemSettings
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUstValues
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opz_calc
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToFloat
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExpProc
</UL>

<P><STRONG><a name="[399]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_const
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1e9]"></a>prvUnlockQueue</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ee]"></a>prvIsQueueFull</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ef]"></a>prvCopyDataToQueue</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1fd]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1fe]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[205]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[206]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[209]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[21a]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[21b]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[a9]"></a>prvIdleTask</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvIdleTask &rArr; vApplicationIdleHook &rArr; wdt_cnt_check &rArr; wdt_cnt_match &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[224]"></a>usTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
</UL>

<P><STRONG><a name="[223]"></a>prvListTaskWithinSingleList</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvListTaskWithinSingleList &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usTaskCheckFreeStackSpace
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[228]"></a>prvGenerateRunTimeStatsForTasksInList</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[22e]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[237]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, user_task1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[24f]"></a>init_wdt_cnt</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, user_task1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_wdt_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[28e]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, user_timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[292]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, user_modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[29b]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sim300dz.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[e4]"></a>CreateSSP0</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CreateSSP0 &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>OpenSSP0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OpenSSP0 &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>SeekSSP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssp_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>WriteSSPText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssp_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>ReadSSPText</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReadSSPText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>SeekSSPText</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekSSPText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>IOCtlSSP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssp_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>CloseSSP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CloseSSP &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>WriteSSP</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteSSP
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>ReadSSP</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ssp_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadSSP
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssp_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[2aa]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
</UL>

<P><STRONG><a name="[ee]"></a>CreateUart1</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CreateUart1 &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485ReceiverCmd
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Config
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>OpenUart1</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OpenUart1 &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>CreateUart3</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CreateUart3 &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>OpenUart3</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OpenUart3 &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>WriteUartText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>ReadUartText</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReadUartText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>SeekUART</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>SeekUARTText</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekUARTText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>CloseUart</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CloseUart &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>WriteUart</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WriteUart &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTransmitUart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>ReadUart</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadUart &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>UartIOCtl</STRONG> (Thumb, 796 bytes, Stack size 40 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = UartIOCtl &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[2ab]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1
</UL>

<P><STRONG><a name="[fd]"></a>ReadSTATSText</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, all_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReadSTATSText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetFreeMem
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_stats.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>SeekSTATSText</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, all_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekSTATSText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_stats.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>CreateSTATS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, all_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CreateSTATS
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_stats.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>OpenSTATS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, all_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenSTATS
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_stats.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>CloseSTATS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, all_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseSTATS
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> all_stats.o(.constdata)
</UL>
<P><STRONG><a name="[2bb]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mb_server_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[ff]"></a>CreateMBS</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = CreateMBS &rArr; init_MBS &rArr; mbs_get_reg &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MBS
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSettingsFile
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_server_device.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>OpenMBS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OpenMBS &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_server_device.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>SeekMBS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekMBS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_server_device.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>WriteMBSText</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, mb_server_device.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_server_device.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>ReadMBSText</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReadMBSText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_server_device.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>SeekMBSText</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekMBSText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_server_device.o(.constdata)
</UL>
<P><STRONG><a name="[2c0]"></a>mbs_rw</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbs_rw &rArr; ServerWriteSingleRegister1 &rArr; MBSerialReceive &rArr; mb_check_crc &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerWriteSingleRegister1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerReadInputRegisters1
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInpRegsUSHORT
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInpRegsLONG
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInpRegsFLOAT
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCtlMBS
</UL>

<P><STRONG><a name="[2c7]"></a>get_rx_counter</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mb_server_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCtlMBS
</UL>

<P><STRONG><a name="[2c6]"></a>get_tx_counter</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mb_server_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCtlMBS
</UL>

<P><STRONG><a name="[108]"></a>IOCtlMBS</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = IOCtlMBS &rArr; mbs_rw &rArr; ServerWriteSingleRegister1 &rArr; MBSerialReceive &rArr; mb_check_crc &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_counter
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_counter
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_rw
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_server_device.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>CloseMBS</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CloseMBS &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_server_device.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>WriteMBS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb_server_device.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_server_device.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>ReadMBS</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, mb_server_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadMBS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_server_device.o(.constdata)
</UL>
<P><STRONG><a name="[2cb]"></a>inc_rx_counter</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mb_server_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolMBS
</UL>

<P><STRONG><a name="[2ca]"></a>inc_tx_counter</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mb_server_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolMBS
</UL>

<P><STRONG><a name="[109]"></a>CreateI2C0</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, i2c_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CreateI2C0 &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MonitorModeCmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>OpenI2C0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OpenI2C0 &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>CreateI2C1</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, i2c_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CreateI2C1 &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MonitorModeCmd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>OpenI2C1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OpenI2C1 &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>CloseI2C</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CloseI2C &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>ReadI2C</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, i2c_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ReadI2C &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>WriteI2C</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, i2c_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WriteI2C &rArr; I2C_MasterTransferData &rArr; I2C_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>SeekI2C</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekI2C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>ReadI2CText</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, i2c_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReadI2CText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>WriteI2CText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>SeekI2CText</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, i2c_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekI2CText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>I2CIOCtl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>CreateDiscrete</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, discrete_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CreateDiscrete
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> discrete_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>OpenDiscrete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, discrete_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenDiscrete
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> discrete_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>CloseDiscrete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, discrete_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseDiscrete
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> discrete_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>CreateSaver</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, saver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CreateSaver &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSaverFile
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saver_user_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>OpenSaver</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, saver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OpenSaver &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>CloseSaver</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, saver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CloseSaver &rArr; CloseDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>ReadSaver</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, saver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ReadSaver &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>WriteSaver</STRONG> (Thumb, 722 bytes, Stack size 64 bytes, saver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = WriteSaver &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>SeekSaver</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, saver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SeekSaver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>ReadSaverText</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, saver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadSaverText &rArr; ReadDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>WriteSaverText</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, saver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>SeekSaverText</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, saver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekSaverText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saver.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>SaverIOCtl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, saver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> saver.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>CreateTCP_1</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CreateTCP_1 &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>CreateTCP_2</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CreateTCP_2 &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>OpenTCP_1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp_redirector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>OpenTCP_2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp_redirector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>WriteTCPText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp_redirector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>ReadTCPText</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_redirector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>SeekTCPText</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_redirector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>SeekTCP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp_redirector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>CloseTCP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_redirector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[2d4]"></a>give_mem_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = give_mem_chain &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_pool
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTCP
</UL>

<P><STRONG><a name="[2d6]"></a>chaing_main_chain</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tcp_redirector.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_mem_chain
</UL>

<P><STRONG><a name="[2d5]"></a>take_mem_chain</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = take_mem_chain &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaing_main_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_pool
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTCP
</UL>

<P><STRONG><a name="[12d]"></a>WriteTCP</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WriteTCP &rArr; take_mem_chain &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_mem_chain
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_mem_chain
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>ReadTCP</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ReadTCP &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[2d9]"></a>tcp_redir_pool</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcp_redir_pool &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_mem_chain
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;give_mem_chain
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIOCtl
</UL>

<P><STRONG><a name="[2db]"></a>tcp_redir_listen</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcp_redir_listen &rArr; lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIOCtl
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_valid
</UL>

<P><STRONG><a name="[2e2]"></a>tcp_redir_valid</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_redir_valid &rArr; tcp_redir_listen &rArr; lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_listen
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIOCtl
</UL>

<P><STRONG><a name="[2e5]"></a>tcp_redir_con</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tcp_redir_con &rArr; lwip_connect &rArr; netconn_connect &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSocketTCPPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIOCtl
</UL>

<P><STRONG><a name="[132]"></a>TCPIOCtl</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tcp_redirector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = TCPIOCtl &rArr; tcp_redir_valid &rArr; tcp_redir_listen &rArr; lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_con
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_valid
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_listen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_redir_pool
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_redirector.o(.constdata)
</UL>
<P><STRONG><a name="[2e8]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtc_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[138]"></a>ReadClock</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadClock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>SeekClock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>WriteClock</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>ReadClockText</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ReadClockText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>SeekClockText</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekClockText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>WriteClockText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtc_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rtc_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>ClockIOCtl</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ClockIOCtl &rArr; time_synk_gsm &rArr; clock_setup &rArr; PoolClock &rArr; AwakeResetTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolClock
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadGPREG
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_synk_gsm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>CreateClock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CreateClock &rArr; PoolClock &rArr; AwakeResetTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PoolClock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetClockTickCounter
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibCounterCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>OpenClock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OpenClock &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>CloseClock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtc_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CloseClock &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>WriteFlashText</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m25pe80.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m25pe80.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>ReadFlashText</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m25pe80.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m25pe80.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>SeekFlashText</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m25pe80.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m25pe80.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>CreateFlash</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CreateFlash &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m25pe80.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>OpenFlash</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OpenFlash &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m25pe80.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>CloseFlash</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CloseFlash &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m25pe80.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>SeekFlash</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m25pe80.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>FlashIOCtl</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FlashIOCtl &rArr; FlashPageErase &rArr; WaitRDY &rArr; FlashFunc &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m25pe80.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>WriteFlash</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WriteFlash &rArr; FlashWriteRAWFun &rArr; WaitRDY &rArr; FlashFunc &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteFATFun
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteRAWFun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m25pe80.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>ReadFlash</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m25pe80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ReadFlash &rArr; FlashReadFATFun &rArr; WaitRDY &rArr; FlashFunc &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadFATFun
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadRAWFun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m25pe80.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>CreateImp</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, impulse_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CreateImp &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> impulse_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>OpenImp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, impulse_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenImp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> impulse_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>CloseImp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, impulse_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseImp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> impulse_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>SeekImp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, impulse_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekImp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> impulse_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>WriteImp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, impulse_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> impulse_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>ReadImp</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, impulse_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadImp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> impulse_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>WriteImpText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, impulse_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> impulse_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>ReadImpText</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, impulse_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReadImpText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> impulse_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>SeekImpText</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, impulse_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekImpText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> impulse_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>IOCtlImp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, impulse_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IOCtlImp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> impulse_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[2fe]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modemdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[155]"></a>OpenModem</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OpenModem &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemdrv.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>CloseModem</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CloseModem &rArr; CloseDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemdrv.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>ReadModem</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadModem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemdrv.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>SeekModem</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemdrv.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>ReadModemText</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReadModemText &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemdrv.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>SeekModemText</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekModemText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemdrv.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>WriteModemText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modemdrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> modemdrv.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>WriteModem</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteModem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemdrv.o(.constdata)
</UL>
<P><STRONG><a name="[300]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, modemdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_turn_off
</UL>

<P><STRONG><a name="[304]"></a>send_cmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_cmd &rArr; WriteDeviceLn &rArr; WriteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceLn
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;At_send
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_send
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_delete
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_read
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ussd_send
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametrEx
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
</UL>

<P><STRONG><a name="[30a]"></a>proc_gprs_connect</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = proc_gprs_connect &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametr
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemGPRSConnect
</UL>

<P><STRONG><a name="[30b]"></a>ModemGPRSConnect</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ModemGPRSConnect &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_gprs_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
</UL>

<P><STRONG><a name="[313]"></a>proc_oper_check</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = proc_oper_check &rArr; PutEvenToQueue &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutEvenToQueue
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametr
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemCheckOperator
</UL>

<P><STRONG><a name="[316]"></a>ModemCheckOperator</STRONG> (Thumb, 540 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ModemCheckOperator &rArr; sms_proces &rArr; sms_perform &rArr; SetParameter &rArr; ini_puts &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sms_proces
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imei
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_name
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sig_level
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_out_own_num
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync_time_gsm
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_oper_check
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
</UL>

<P><STRONG><a name="[318]"></a>restart_modem</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = restart_modem &rArr; modem_turn_off &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_turn_off
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
</UL>

<P><STRONG><a name="[319]"></a>power_on</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = power_on &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_parametr
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_operat
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLineEx
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
</UL>

<P><STRONG><a name="[15c]"></a>ModemIOCtl</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, modemdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ModemIOCtl &rArr; modem_automate &rArr; ModemCheckOperator &rArr; sms_proces &rArr; sms_perform &rArr; SetParameter &rArr; ini_puts &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_automate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemdrv.o(.constdata)
</UL>
<P><STRONG><a name="[325]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetMask
</UL>

<P><STRONG><a name="[332]"></a>FIO_HalfWordGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordReadValue
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordClearValue
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetValue
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetMask
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetDir
</UL>

<P><STRONG><a name="[338]"></a>FIO_ByteGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteReadValue
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteClearValue
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetValue
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetMask
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetDir
</UL>

<P><STRONG><a name="[33d]"></a>set_PinFunc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[33e]"></a>set_OpenDrainMode</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_OpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[33f]"></a>setSSPclock</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>

<P><STRONG><a name="[354]"></a>getPClock</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getPClock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[355]"></a>converUSecToVal</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[357]"></a>converPtrToTimeNum</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[35d]"></a>I2C_getNum</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferData
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveHandler
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[362]"></a>I2C_Start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[35e]"></a>I2C_Stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[363]"></a>I2C_SendByte</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[364]"></a>I2C_GetByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[35a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
</UL>

<P><STRONG><a name="[35b]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
</UL>

<P><STRONG><a name="[367]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, setparametrs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[36e]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ini_rename &rArr; VFS_rename &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_rename
</UL>

<P><STRONG><a name="[374]"></a>skipleading</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, minini.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_browse
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[370]"></a>skiptrailing</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, minini.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;striptrailing
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[36f]"></a>striptrailing</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = striptrailing
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skiptrailing
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_browse
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanstring
</UL>

<P><STRONG><a name="[376]"></a>save_strncpy</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = save_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_browse
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writekey
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writesection
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_tempname
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_gets
</UL>

<P><STRONG><a name="[371]"></a>cleanstring</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cleanstring &rArr; striptrailing
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;striptrailing
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_browse
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkeystring
</UL>

<P><STRONG><a name="[372]"></a>getkeystring</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanstring
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_strncpy
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;striptrailing
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skiptrailing
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipleading
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getkey
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_getsection
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_gets
</UL>

<P><STRONG><a name="[37d]"></a>ini_tempname</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ini_tempname &rArr; save_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_strncpy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_rename
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[381]"></a>check_enquote</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, minini.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writekey
</UL>

<P><STRONG><a name="[37e]"></a>writesection</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = writesection &rArr; f_puts &rArr; f_putc &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_strncpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[380]"></a>writekey</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = writekey &rArr; f_puts &rArr; f_putc &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_enquote
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_strncpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[382]"></a>cache_accum</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cache_accum
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[383]"></a>cache_flush</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = cache_flush &rArr; f_puts &rArr; f_putc &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_fseek
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[384]"></a>close_rename</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, minini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = close_rename &rArr; ini_rename &rArr; VFS_rename &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rmdir
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_tempname
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_puts
</UL>

<P><STRONG><a name="[385]"></a>strreverse</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, minini.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2str
</UL>

<P><STRONG><a name="[386]"></a>long2str</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, minini.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strreverse
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_putl
</UL>

<P><STRONG><a name="[43]"></a>AverageFunc</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AverageFunc &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>InitAverageFunc</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = InitAverageFunc &rArr; AddError &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>NullDataFunc</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NullDataFunc &rArr; SeekDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>InitNullDataFunc</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = InitNullDataFunc &rArr; AddError &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>ExpIntermediate</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ExpIntermediate &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>ExpExIntermediate</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ExpExIntermediate &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>InitExpProc</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = InitExpProc &rArr; AddError &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>MBfunc</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MBfunc &rArr; SeekDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>InitMBProc</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = InitMBProc &rArr; AddError &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>DiscreteFunc</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DiscreteFunc &rArr; SeekDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>InitDiscreteFunc</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = InitDiscreteFunc &rArr; AddError &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>ButtonFunc</STRONG> (Thumb, 304 bytes, Stack size 80 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ButtonFunc &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>InitButtonFunc</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = InitButtonFunc &rArr; AddError &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>MBQualFunc</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MBQualFunc &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>InitMBQualFunc</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, datafunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = InitMBQualFunc &rArr; AddError &rArr; PutMesToLog &rArr; AddLogMessage &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddError
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datafunc.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>NullFunc</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, physfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NullFunc &rArr; PutValueToOutBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutValueToOutBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> physfunc.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>InitNullFunc</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, physfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitNullFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> physfunc.o(.data)
</UL>
<P><STRONG><a name="[3a7]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sensorcore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[3b1]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, events.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[3c0]"></a>chk_power</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iofat_at25db161a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[3d3]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[3c7]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[3d0]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[3d6]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[3c2]"></a>lock_fs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[3c3]"></a>unlock_fs</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[3c4]"></a>save_crc</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[3c5]"></a>move_window</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_crc
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[3c6]"></a>sync</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sync &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
</UL>

<P><STRONG><a name="[3ca]"></a>remove_chain</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[3cb]"></a>create_chain</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[3cc]"></a>dir_sdi</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[3ce]"></a>dir_next</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[3cf]"></a>dir_find</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[3d1]"></a>dir_read</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[3d2]"></a>dir_register</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[3d4]"></a>dir_remove</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_remove &rArr; dir_sdi &rArr; get_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[3d5]"></a>create_name</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[3e0]"></a>get_fileinfo</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_fileinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[3d7]"></a>follow_path</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; save_crc &rArr; disk_write &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[3d8]"></a>check_fs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = check_fs &rArr; disk_read &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[3d9]"></a>chk_mounted</STRONG> (Thumb, 958 bytes, Stack size 72 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[3dc]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[3e8]"></a>ft_listDel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ftpd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleDownload
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyConnection
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
</UL>

<P><STRONG><a name="[3e6]"></a>ft_delSocket</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ft_delSocket &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_acceptClient
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processDataConnections
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyConnection
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
</UL>

<P><STRONG><a name="[3e7]"></a>ft_destroyTransfer</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ft_destroyTransfer &rArr; ft_delSocket &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_delSocket
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_listDel
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_fdSanity
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processDataConnections
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_retr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_setupNewTransfer
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyConnection
</UL>

<P><STRONG><a name="[3e9]"></a>ft_destroyConnection</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ft_destroyConnection &rArr; ft_destroyTransfer &rArr; ft_delSocket &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_delSocket
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_listDel
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_fdSanity
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_timeout
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processCtrlConnections
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_quit
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>

<P><STRONG><a name="[3ea]"></a>ft_reply</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyConnection
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_timeout
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processDataConnections
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_initTransfer
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processCtrlConnections
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newConnection
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execCommand
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_user
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_type
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_syst
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_stru
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_stat
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_size
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rnto
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rnfr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_retr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rest
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rein
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_quit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pwd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_port
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pasv
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_setupNewTransfer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pass
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_noop
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_mode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_mkd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_mdtm
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_doListing
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_help
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_dele
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_cwd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_cdup
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execStore
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_allo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_acct
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_abor
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
</UL>

<P><STRONG><a name="[3ec]"></a>ft_abortTransfer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ft_abortTransfer &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rmdir
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleUpload
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rein
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_quit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_abor
</UL>

<P><STRONG><a name="[16e]"></a>ftcmd_abor</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ftcmd_abor &rArr; ft_abortTransfer &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>ftcmd_acct</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_acct &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>ftcmd_allo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_allo &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[3ee]"></a>ft_addSendSocket</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft_addSendSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_initTransfer
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_prepTransfer
</UL>

<P><STRONG><a name="[3ed]"></a>ft_prepTransfer</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ft_prepTransfer &rArr; lwip_connect &rArr; netconn_connect &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_fseek
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_addSendSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_retr
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_doListing
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execStore
</UL>

<P><STRONG><a name="[3ef]"></a>ft_getFilename</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ft_getFilename &rArr; ft_buildPathName
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_buildPathName
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_size
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rnto
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_rnfr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_retr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_dele
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execStore
</UL>

<P><STRONG><a name="[3f1]"></a>ft_execStore</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ft_execStore &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getFilename
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_prepTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_stor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_appe
</UL>

<P><STRONG><a name="[17c]"></a>ftcmd_appe</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ftcmd_appe &rArr; ft_execStore &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execStore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[3f2]"></a>ft_changeCurrentPath</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ft_changeCurrentPath &rArr; VFS_stat &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_stat
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_buildPathName
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_cwd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_cdup
</UL>

<P><STRONG><a name="[165]"></a>ftcmd_cdup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_cdup &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_changeCurrentPath
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>ftcmd_cwd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_cwd &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_changeCurrentPath
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>ftcmd_dele</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_dele &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rmdir
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getFilename
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>ftcmd_help</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_help &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[3f3]"></a>ft_doListing</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ft_doListing &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_prepTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_nlst
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_list
</UL>

<P><STRONG><a name="[167]"></a>ftcmd_list</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ftcmd_list &rArr; ft_doListing &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_doListing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>ftcmd_mdtm</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_mdtm &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>ftcmd_mkd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_mkd &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_mkdir
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_buildPathName
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>ftcmd_mode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_mode &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>ftcmd_nlst</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ftcmd_nlst &rArr; ft_doListing &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_doListing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>ftcmd_noop</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_noop &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>ftcmd_pass</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ftcmd_pass &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetAccessRequest
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[3f7]"></a>ft_listAddTail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ftpd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newConnection
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newTransfer
</UL>

<P><STRONG><a name="[3f5]"></a>ft_newTransfer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ft_newTransfer &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_listAddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_setupNewTransfer
</UL>

<P><STRONG><a name="[3f8]"></a>ft_setupNewTransfer</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ft_setupNewTransfer &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_port
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pasv
</UL>

<P><STRONG><a name="[3f9]"></a>ft_addSocket</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft_addSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_initTransfer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newConnection
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftcmd_pasv
</UL>

<P><STRONG><a name="[162]"></a>ftcmd_pasv</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ftcmd_pasv &rArr; ft_setupNewTransfer &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_addSocket
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_setupNewTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>ftcmd_port</STRONG> (Thumb, 236 bytes, Stack size 80 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ftcmd_port &rArr; ft_setupNewTransfer &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_setupNewTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>ftcmd_pwd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_pwd &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>ftcmd_quit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ftcmd_quit &rArr; ft_abortTransfer &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyConnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>ftcmd_rein</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ftcmd_rein &rArr; ft_abortTransfer &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>ftcmd_rest</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_rest &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>ftcmd_retr</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ftcmd_retr &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getFilename
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_prepTransfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>ftcmd_rmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_rmd &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rmdir
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_buildPathName
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>ftcmd_rnfr</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ftcmd_rnfr &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_stat
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getFilename
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>ftcmd_rnto</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_rnto &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getFilename
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>ftcmd_size</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ftcmd_size &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_stat
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getFilename
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>ftcmd_stat</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_stat &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>ftcmd_stor</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ftcmd_stor &rArr; ft_execStore &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execStore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>ftcmd_stru</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_stru &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>ftcmd_syst</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_syst &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>ftcmd_type</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_type &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>ftcmd_user</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ftcmd_user &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpd.o(.constdata)
</UL>
<P><STRONG><a name="[3fe]"></a>ft_removeRxbufBytes</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft_removeRxbufBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execCommand
</UL>

<P><STRONG><a name="[3fd]"></a>ft_execCommand</STRONG> (Thumb, 818 bytes, Stack size 32 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ft_execCommand &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_removeRxbufBytes
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processCtrlConnections
</UL>

<P><STRONG><a name="[3ff]"></a>ft_getNextDirEntry</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ft_getNextDirEntry &rArr; VFS_opendir &rArr; VFS_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_closedir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_opendir
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_readdir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_stat
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_buildPathName
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleDownload
</UL>

<P><STRONG><a name="[404]"></a>ft_listAddHead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ftpd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleDownload
</UL>

<P><STRONG><a name="[400]"></a>ft_newConnection</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ft_newConnection &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_addSocket
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_listAddTail
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_acceptClient
</UL>

<P><STRONG><a name="[401]"></a>ft_processCtrlConnections</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ft_processCtrlConnections &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_execCommand
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
</UL>

<P><STRONG><a name="[402]"></a>ft_handleUpload</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ft_handleUpload &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_write
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_abortTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processDataConnections
</UL>

<P><STRONG><a name="[403]"></a>ft_handleDownload</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ft_handleDownload &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_read
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_listAddHead
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_getNextDirEntry
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_listDel
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processDataConnections
</UL>

<P><STRONG><a name="[405]"></a>ft_initTransfer</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ft_initTransfer &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_fseek
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_addSocket
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_addSendSocket
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_processDataConnections
</UL>

<P><STRONG><a name="[406]"></a>ft_processDataConnections</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ft_processDataConnections &rArr; ft_handleUpload &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_initTransfer
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleDownload
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_handleUpload
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_delSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
</UL>

<P><STRONG><a name="[407]"></a>ft_newServerSocket</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ft_newServerSocket &rArr; lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_addSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_fdSanity
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_acceptClient
</UL>

<P><STRONG><a name="[409]"></a>ft_acceptClient</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ft_acceptClient &rArr; ft_newConnection &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newConnection
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_delSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
</UL>

<P><STRONG><a name="[40a]"></a>ft_timeout</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ft_timeout &rArr; ft_reply &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_reply
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
</UL>

<P><STRONG><a name="[40b]"></a>ft_fdSanity</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, ftpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ft_fdSanity &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_newServerSocket
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyConnection
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_destroyTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpd_start
</UL>

<P><STRONG><a name="[412]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, http_cgi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[17d]"></a>LOGIN_process</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LOGIN_process &rArr; SetCookies &rArr; GetProcessorID &rArr; get_ID &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCookies
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetAccessRequest
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_cgi.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>SENSOR_process</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SENSOR_process &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_cgi.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>CONFIG_process</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = CONFIG_process &rArr; SetParameter &rArr; ini_puts &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTop
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParameter
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_cgi.o(.constdata)
</UL>
<P><STRONG><a name="[415]"></a>getInfoParam</STRONG> (Thumb, 1198 bytes, Stack size 56 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = getInfoParam &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetFreeMem
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSettingsFile
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointToElement
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSimNum
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSigLevel
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpName
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMEI
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOurIPStr
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProcessorID
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INFO_process
</UL>

<P><STRONG><a name="[180]"></a>INFO_process</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = INFO_process &rArr; getInfoParam &rArr; GetPointToElement &rArr; ini_gets &rArr; getkeystring &rArr; f_gets &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInfoParam
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_cgi.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>FILE_process</STRONG> (Thumb, 392 bytes, Stack size 88 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FILE_process &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_fseek
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_truncate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_write
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_cgi.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>DATETIME_process</STRONG> (Thumb, 588 bytes, Stack size 88 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = DATETIME_process &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_cgi.o(.constdata)
</UL>
<P><STRONG><a name="[41a]"></a>DISP_process</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, http_cgi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_reset
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParameter
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[183]"></a>REINIT_process</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = REINIT_process &rArr; PutMesToComQueue &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToComQueue
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_cgi.o(.constdata)
</UL>
<P><STRONG><a name="[41b]"></a>CAMERA_process</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, http_cgi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[41c]"></a>TERMINAL_process</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, http_cgi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sms_ID
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>

<P><STRONG><a name="[41e]"></a>CANSNIFFER_process</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, http_cgi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[184]"></a>PIPELINES_process</STRONG> (Thumb, 952 bytes, Stack size 72 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PIPELINES_process &rArr; ReadSensor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSensorProc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensor
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUstVal
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_cgi.o(.constdata)
</UL>
<P><STRONG><a name="[420]"></a>HTTP_SendError</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = HTTP_SendError &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessRequest
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
</UL>

<P><STRONG><a name="[421]"></a>getMIMEType</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getMIMEType &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
</UL>

<P><STRONG><a name="[422]"></a>HTTP_SendWebPage</STRONG> (Thumb, 378 bytes, Stack size 96 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = HTTP_SendWebPage &rArr; HTTP_SendError &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_fseek
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_read
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMIMEType
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendError
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCookies
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessRequest
</UL>

<P><STRONG><a name="[423]"></a>HTTP_SendData</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HTTP_SendData &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessRequest
</UL>

<P><STRONG><a name="[424]"></a>HTTP_ProcessRequest</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = HTTP_ProcessRequest &rArr; SendWap &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWap
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendData
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendWebPage
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendError
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGI_parser
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCookies
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
</UL>

<P><STRONG><a name="[426]"></a>HTTP_ProcessConnection</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = HTTP_ProcessConnection &rArr; HTTP_ProcessRequest &rArr; SendWap &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_FreeReqBuf
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessRequest
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_SendError
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpTask
</UL>

<P><STRONG><a name="[427]"></a>HTTP_FreeReqBuf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HTTP_FreeReqBuf &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ProcessConnection
</UL>

<P><STRONG><a name="[429]"></a>parse</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = parse &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_input
</UL>

<P><STRONG><a name="[18e]"></a>help</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = help &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>unknown</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = unknown &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[42d]"></a>shell_wellcome</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = shell_wellcome &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_input
</UL>

<P><STRONG><a name="[18a]"></a>time</STRONG> (Thumb, 432 bytes, Stack size 88 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = time &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>date</STRONG> (Thumb, 484 bytes, Stack size 88 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = date &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>stat</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = stat &rArr; unknown &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unknown
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>open</STRONG> (Thumb, 358 bytes, Stack size 200 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = open &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_fseek
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_read
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_close
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_open
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[430]"></a>scan</STRONG> (Thumb, 208 bytes, Stack size 128 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = scan &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_closedir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_opendir
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_readdir
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd_dot_dot
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
</UL>

<P><STRONG><a name="[186]"></a>dir</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = dir &rArr; scan &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>cd</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = cd &rArr; scan &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>cd_dot_dot</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = cd_dot_dot &rArr; scan &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>option</STRONG> (Thumb, 518 bytes, Stack size 56 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = option &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sms_ID
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>firm</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = firm &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[446]"></a>add_tl_serv_to_list</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, telnet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
</UL>

<P><STRONG><a name="[433]"></a>get_tl_serv</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_tl_serv
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>

<P><STRONG><a name="[434]"></a>tl_listDel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, telnet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>

<P><STRONG><a name="[431]"></a>tl_delSocket</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tl_delSocket &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>

<P><STRONG><a name="[432]"></a>tl_destroyConnection</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tl_destroyConnection &rArr; tl_delSocket &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_delSocket
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_listDel
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tl_serv
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessCharacter
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_timeout
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_fdSanity
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_processConnections
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessDont
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessDo
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessWont
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessWill
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_prompt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_output
</UL>

<P><STRONG><a name="[435]"></a>TelnetProcessWill</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TelnetProcessWill &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessCharacter
</UL>

<P><STRONG><a name="[436]"></a>TelnetProcessWont</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TelnetProcessWont &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessCharacter
</UL>

<P><STRONG><a name="[437]"></a>TelnetProcessDo</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TelnetProcessDo &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessCharacter
</UL>

<P><STRONG><a name="[438]"></a>TelnetProcessDont</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TelnetProcessDont &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessCharacter
</UL>

<P><STRONG><a name="[439]"></a>form_telnet_cmd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = form_telnet_cmd &rArr; shell_input &rArr; shell_start &rArr; shell_output &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_input
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetProcessCharacter
</UL>

<P><STRONG><a name="[43f]"></a>tl_addSocket</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tl_addSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newConnection
</UL>

<P><STRONG><a name="[440]"></a>tl_listAddTail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, telnet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newConnection
</UL>

<P><STRONG><a name="[43e]"></a>tl_newConnection</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tl_newConnection &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_listAddTail
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_addSocket
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_acceptClient
</UL>

<P><STRONG><a name="[441]"></a>tl_processConnections</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tl_processConnections &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
</UL>

<P><STRONG><a name="[442]"></a>tl_newServerSocket</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tl_newServerSocket &rArr; lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_addSocket
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_fdSanity
</UL>

<P><STRONG><a name="[443]"></a>tl_fdSanity</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = tl_fdSanity &rArr; tl_newServerSocket &rArr; lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newServerSocket
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_acceptClient
</UL>

<P><STRONG><a name="[444]"></a>tl_acceptClient</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tl_acceptClient &rArr; tl_fdSanity &rArr; tl_newServerSocket &rArr; lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_fdSanity
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_newConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
</UL>

<P><STRONG><a name="[445]"></a>tl_timeout</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tl_timeout &rArr; tl_destroyConnection &rArr; tl_delSocket &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tl_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
</UL>

<P><STRONG><a name="[461]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ping.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[462]"></a>ping_prepare_echo</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ping_prepare_echo &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>

<P><STRONG><a name="[464]"></a>ping_send</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ping_send &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPool
</UL>

<P><STRONG><a name="[469]"></a>low_level_input</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[46c]"></a>low_level_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, usb_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = low_level_init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[b3]"></a>low_level_output</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usb_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = low_level_output &rArr; OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_netif.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>ethernetif_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usb_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ethernetif_output &rArr; etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_netif.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>arp_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usb_netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_netif.o(.text)
</UL>
<P><STRONG><a name="[483]"></a>netconn_recv_data</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
</UL>

<P><STRONG><a name="[48b]"></a>netconn_close_shutdown</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
</UL>

<P><STRONG><a name="[c4]"></a>recv_raw</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>recv_udp</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>recv_tcp</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>err_tcp</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[492]"></a>do_writemore</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[c0]"></a>sent_tcp</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = sent_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[495]"></a>do_close_internal</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[c1]"></a>poll_tcp</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = poll_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[49e]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setup_tcp
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[c7]"></a>accept_function</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_sem_new &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[49f]"></a>pcb_new</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[4a5]"></a>netconn_drain</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[c6]"></a>do_connected</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = do_connected &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[4c0]"></a>get_socket</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSocketTCPPrio
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[4c5]"></a>tryget_socket</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[4be]"></a>alloc_socket</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alloc_socket &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[4bf]"></a>free_socket</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[c8]"></a>event_callback</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[4c4]"></a>lwip_selscan</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lwip_selscan &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[4c7]"></a>lwip_getaddrname</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</UL>

<P><STRONG><a name="[c9]"></a>lwip_getsockopt_internal</STRONG> (Thumb, 544 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lwip_getsockopt_internal &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>lwip_setsockopt_internal</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lwip_setsockopt_internal &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>tcpip_thread</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>pbuf_free_int</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pbuf_free_int &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[4d7]"></a>plogout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_terminated
</UL>

<P><STRONG><a name="[4db]"></a>network_phase</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = network_phase &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_success
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_peer_success
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
</UL>

<P><STRONG><a name="[4dc]"></a>get_pap_passwd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_pap_passwd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_reset
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
</UL>

<P><STRONG><a name="[4de]"></a>null_login</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
</UL>

<P><STRONG><a name="[cf]"></a>connect_time_expired</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = connect_time_expired &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auth.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>check_idle</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = check_idle &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idle_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auth.o(.text)
</UL>
<P><STRONG><a name="[4ec]"></a>have_chap_secret</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_reset
</UL>

<P><STRONG><a name="[4eb]"></a>have_pap_secret</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_reset
</UL>

<P><STRONG><a name="[4ef]"></a>ip_addr_check</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ip_addr_check &rArr; bad_ip_adrs &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_ip_adrs
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_ip_addr
</UL>

<P><STRONG><a name="[d0]"></a>fsm_timeout</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = fsm_timeout &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.text)
</UL>
<P><STRONG><a name="[4f3]"></a>fsm_sconfreq</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_open
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerup
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfreq
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfack
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rconfnakrej
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_rtermack
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timeout
</UL>

<P><STRONG><a name="[4fe]"></a>fsm_rcoderej</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fsm_rcoderej
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[4f8]"></a>fsm_rtermack</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = fsm_rtermack &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[4f9]"></a>fsm_rtermreq</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = fsm_rtermreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[4fa]"></a>fsm_rconfnakrej</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fsm_rconfnakrej &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[4fb]"></a>fsm_rconfack</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = fsm_rconfack &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[4fc]"></a>fsm_rconfreq</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = fsm_rconfreq &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>

<P><STRONG><a name="[5e]"></a>ipcp_init</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>ipcp_open</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ipcp_open &rArr; fsm_open &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>ipcp_close</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ipcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>ipcp_lowerup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ipcp_lowerup &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>ipcp_lowerdown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ipcp_lowerdown &rArr; fsm_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>ipcp_input</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ipcp_input &rArr; fsm_input &rArr; fsm_rconfreq &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>ipcp_protrej</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ipcp_protrej &rArr; fsm_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_lowerdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>ipcp_resetci</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipcp_resetci &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>ipcp_cilen</STRONG> (Thumb, 246 bytes, Stack size 12 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipcp_cilen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>ipcp_addci</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipcp_addci &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>ipcp_ackci</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ipcp_ackci
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>ipcp_nakci</STRONG> (Thumb, 1020 bytes, Stack size 136 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ipcp_nakci &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>ipcp_rejci</STRONG> (Thumb, 534 bytes, Stack size 80 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ipcp_rejci &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>ipcp_reqci</STRONG> (Thumb, 1146 bytes, Stack size 96 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ipcp_reqci &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>ipcp_up</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ipcp_up &rArr; sifup &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifvjcomp
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifup
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifnpmode
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifdefaultroute
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifaddr
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMask
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_close
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_ip_addr
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[507]"></a>ipcp_clear_addrs</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipcp_clear_addrs &rArr; cifdefaultroute
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifdefaultroute
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL>

<P><STRONG><a name="[5c]"></a>ipcp_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ipcp_down &rArr; np_down &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifvjcomp
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sifdown
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcp_clear_addrs
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>ipcp_finished</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ipcp_finished &rArr; np_finished &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_finished
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>lcp_finished</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcp_finished &rArr; link_terminated &rArr; pppLinkTerminated &rArr; pppRecvWakeup &rArr; sio_read_abort &rArr; DeviceIOCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_terminated
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>lcp_input</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lcp_input &rArr; fsm_input &rArr; fsm_rconfreq &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[50f]"></a>lcp_received_echo_reply</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcp_received_echo_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_extcode
</UL>

<P><STRONG><a name="[50e]"></a>lcp_rprotrej</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcp_rprotrej
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_extcode
</UL>

<P><STRONG><a name="[70]"></a>lcp_extcode</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lcp_extcode &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_rprotrej
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_received_echo_reply
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>lcp_protrej</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lcp_protrej &rArr; fsm_protreject &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_protreject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>lcp_resetci</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcp_resetci &rArr; auth_reset &rArr; get_pap_passwd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_reset
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>lcp_cilen</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, lcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>lcp_addci</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcp_addci
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>lcp_ackci</STRONG> (Thumb, 636 bytes, Stack size 28 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcp_ackci
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>lcp_nakci</STRONG> (Thumb, 1190 bytes, Stack size 104 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lcp_nakci &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>lcp_rejci</STRONG> (Thumb, 704 bytes, Stack size 56 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcp_rejci &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>lcp_reqci</STRONG> (Thumb, 1876 bytes, Stack size 176 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lcp_reqci &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magic
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>LcpEchoTimeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = LcpEchoTimeout &rArr; LcpEchoCheck &rArr; LcpSendEchoRequest &rArr; LcpLinkFailure &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.text)
</UL>
<P><STRONG><a name="[512]"></a>LcpLinkFailure</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = LcpLinkFailure &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpSendEchoRequest
</UL>

<P><STRONG><a name="[513]"></a>LcpSendEchoRequest</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = LcpSendEchoRequest &rArr; LcpLinkFailure &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpLinkFailure
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_sdata
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
</UL>

<P><STRONG><a name="[511]"></a>LcpEchoCheck</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = LcpEchoCheck &rArr; LcpSendEchoRequest &rArr; LcpLinkFailure &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpSendEchoRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_echo_lowerup
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoTimeout
</UL>

<P><STRONG><a name="[514]"></a>lcp_echo_lowerup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lcp_echo_lowerup &rArr; LcpEchoCheck &rArr; LcpSendEchoRequest &rArr; LcpLinkFailure &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_up
</UL>

<P><STRONG><a name="[6c]"></a>lcp_up</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lcp_up &rArr; lcp_echo_lowerup &rArr; LcpEchoCheck &rArr; LcpSendEchoRequest &rArr; LcpLinkFailure &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_send_config
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_recv_config
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_echo_lowerup
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_established
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[515]"></a>lcp_echo_lowerdown</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lcp_echo_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_down
</UL>

<P><STRONG><a name="[6d]"></a>lcp_down</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcp_down &rArr; lcp_echo_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_send_config
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_recv_config
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_echo_lowerdown
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>lcp_starting</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcp_starting
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>upap_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, pap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pap.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>upap_timeout</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = upap_timeout &rArr; auth_withpeer_fail &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_fail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pap.o(.text)
</UL>
<P><STRONG><a name="[517]"></a>upap_sauthreq</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = upap_sauthreq &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppWrite
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_lowerup
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_timeout
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_authwithpeer
</UL>

<P><STRONG><a name="[d3]"></a>upap_reqtimeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = upap_reqtimeout &rArr; auth_peer_fail &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_peer_fail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pap.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>upap_lowerup</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = upap_lowerup &rArr; upap_sauthreq &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pap.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>upap_lowerdown</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = upap_lowerdown &rArr; sys_untimeout &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_protrej
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pap.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>upap_protrej</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = upap_protrej &rArr; auth_withpeer_fail &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_lowerdown
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_fail
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_peer_fail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pap.o(.data)
</UL>
<P><STRONG><a name="[518]"></a>upap_rauthnak</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = upap_rauthnak &rArr; auth_withpeer_fail &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_input
</UL>

<P><STRONG><a name="[519]"></a>upap_rauthack</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = upap_rauthack &rArr; auth_withpeer_success &rArr; network_phase &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_withpeer_success
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_input
</UL>

<P><STRONG><a name="[51a]"></a>upap_sresp</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = upap_sresp &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppWrite
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthreq
</UL>

<P><STRONG><a name="[51b]"></a>upap_rauthreq</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = upap_rauthreq &rArr; auth_peer_success &rArr; network_phase &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_sresp
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_passwd
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_peer_success
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_peer_fail
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_input
</UL>

<P><STRONG><a name="[79]"></a>upap_input</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, pap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = upap_input &rArr; upap_rauthreq &rArr; auth_peer_success &rArr; network_phase &rArr; lcp_close &rArr; fsm_close &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthreq
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthack
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upap_rauthnak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pap.o(.data)
</UL>
<P><STRONG><a name="[51d]"></a>pppRecvWakeup</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pppRecvWakeup &rArr; sio_read_abort &rArr; DeviceIOCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_read_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppClose
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppLinkTerminated
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppLinkDown
</UL>

<P><STRONG><a name="[51e]"></a>pppStart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = pppStart &rArr; lcp_open &rArr; fsm_open &rArr; fsm_lowerup &rArr; fsm_sconfreq &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_open
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppOverSerialOpen
</UL>

<P><STRONG><a name="[51f]"></a>pppStop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ppp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppClose
</UL>

<P><STRONG><a name="[520]"></a>pppDrop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pppDrop &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppInProc
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppHup
</UL>

<P><STRONG><a name="[521]"></a>pppHup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pppHup &rArr; pppDrop &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppDrop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_lowerdown
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_terminated
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppSigHUP
</UL>

<P><STRONG><a name="[52a]"></a>nPut</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nPut &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppifOutput
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppWrite
</UL>

<P><STRONG><a name="[52b]"></a>pppAppend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppifOutput
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppWrite
</UL>

<P><STRONG><a name="[d4]"></a>pppifOutput</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pppifOutput &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppAppend
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ppp.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>pppifNetifInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pppifNetifInit &rArr; pppMTU
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppMTU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ppp.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>pppInput</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pppInput &rArr; lcp_sprotrej &rArr; fsm_sdata &rArr; pppWrite &rArr; pppAppend &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppSingleBuf
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcp_sprotrej
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ppp.o(.text)
</UL>
<P><STRONG><a name="[530]"></a>pppInProc</STRONG> (Thumb, 714 bytes, Stack size 40 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pppInProc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRandomize
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppDrop
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pppos_input
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Pool
</UL>

<P><STRONG><a name="[1ab]"></a>lwip_sanity_check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[53a]"></a>plug_holes</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[d8]"></a>pbuf_free_ooseq</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(.text)
</UL>
<P><STRONG><a name="[547]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[55b]"></a>tcp_close_shutdown</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[563]"></a>tcp_new_port</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[d9]"></a>tcp_accept_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[568]"></a>tcp_kill_prio</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[569]"></a>tcp_kill_timewait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[56b]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[56c]"></a>tcp_receive</STRONG> (Thumb, 2978 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[56f]"></a>tcp_parseopt</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[570]"></a>tcp_process</STRONG> (Thumb, 1474 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[572]"></a>tcp_listen_input</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[573]"></a>tcp_timewait_input</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[577]"></a>tcp_output_alloc_header</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[578]"></a>tcp_create_segment</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[579]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[57a]"></a>tcp_write_checks</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_write_checks
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[57c]"></a>tcp_output_segment</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_hinted
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[580]"></a>icmp_send_response</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[583]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[58e]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; sys_arch_unprotect &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[58f]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[591]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[592]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[593]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[da]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip_timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output_hinted &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_timers.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>ip_reass_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip_timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ip_reass_timer &rArr; ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_timers.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>arp_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip_timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_timers.o(.text)
</UL>
<P><STRONG><a name="[595]"></a>free_etharp_q</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_entry
</UL>

<P><STRONG><a name="[596]"></a>free_entry</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>

<P><STRONG><a name="[597]"></a>find_entry</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = find_entry &rArr; free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
</UL>

<P><STRONG><a name="[598]"></a>etharp_send_ip</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[599]"></a>update_arp_entry</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = update_arp_entry &rArr; find_entry &rArr; free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
</UL>

<P><STRONG><a name="[59b]"></a>etharp_ip_input</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = etharp_ip_input &rArr; update_arp_entry &rArr; find_entry &rArr; free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[59c]"></a>etharp_arp_input</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = etharp_arp_input &rArr; update_arp_entry &rArr; find_entry &rArr; free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[59d]"></a>etharp_raw</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf_RTOS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[5a0]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, security_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[5a2]"></a>iap_entry</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, security_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ID
</UL>

<P><STRONG><a name="[5aa]"></a>mb_listDel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modbustcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_destroyConnection
</UL>

<P><STRONG><a name="[5a8]"></a>mb_delSocket</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mb_delSocket &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_destroyConnection
</UL>

<P><STRONG><a name="[5a9]"></a>mb_destroyConnection</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mb_destroyConnection &rArr; mb_delSocket &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_delSocket
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_listDel
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_timeout
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fdSanity
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_processConnections
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_pool
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_frame_send
</UL>

<P><STRONG><a name="[5ab]"></a>mb_frame_send</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mb_frame_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_pool
</UL>

<P><STRONG><a name="[5ac]"></a>mb_pool</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mb_pool &rArr; mb_frame_send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_frame_send
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_destroyConnection
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCReadInputRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_processConnections
</UL>

<P><STRONG><a name="[5ae]"></a>mb_addSocket</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_addSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newServerSocket
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newConnection
</UL>

<P><STRONG><a name="[5af]"></a>mb_listAddTail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modbustcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newConnection
</UL>

<P><STRONG><a name="[5ad]"></a>mb_newConnection</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mb_newConnection &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_listAddTail
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_addSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_acceptClient
</UL>

<P><STRONG><a name="[5b0]"></a>mb_processConnections</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = mb_processConnections &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_pool
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusTCPTask
</UL>

<P><STRONG><a name="[5b1]"></a>mb_newServerSocket</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mb_newServerSocket &rArr; lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_addSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusTCPTask
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fdSanity
</UL>

<P><STRONG><a name="[5b2]"></a>mb_fdSanity</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mb_fdSanity &rArr; mb_newServerSocket &rArr; lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newServerSocket
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusTCPTask
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_acceptClient
</UL>

<P><STRONG><a name="[5b3]"></a>mb_acceptClient</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mb_acceptClient &rArr; mb_fdSanity &rArr; mb_newServerSocket &rArr; lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutMesToLog
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fdSanity
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_newConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusTCPTask
</UL>

<P><STRONG><a name="[5b4]"></a>mb_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, modbustcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mb_timeout &rArr; mb_destroyConnection &rArr; mb_delSocket &rArr; lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_destroyConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusTCPTask
</UL>

<P><STRONG><a name="[5ef]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, log.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[5f1]"></a>checkCurrentPos</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, log.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLogMessage
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLogRecord
</UL>

<P><STRONG><a name="[5f2]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[190]"></a>CreateUSB</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usb_rndis_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CreateUSB &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_puts_RTOS
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_rndis_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>OpenUSB</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_rndis_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OpenUSB &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_rndis_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>CloseUSB</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_rndis_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CloseUSB &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_rndis_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>WriteUSB</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, usb_rndis_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WriteUSB &rArr; RNDIS_Device_SendPacket &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_SendPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_rndis_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>ReadUSB</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usb_rndis_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadUSB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_rndis_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>SeekUSB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_rndis_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_rndis_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[5fa]"></a>usb_rx_count</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usb_rndis_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usb_rx_count &rArr; RNDIS_Device_ReadPacket &rArr; Endpoint_Read_Stream_LE
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ReadPacket
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_IsPacketReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIOCtl
</UL>

<P><STRONG><a name="[199]"></a>USBIOCtl</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usb_rndis_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBIOCtl &rArr; USB_USBTask &rArr; USB_DeviceTask &rArr; USB_Device_ProcessControlRequest &rArr; EVENT_USB_Device_ControlRequest &rArr; RNDIS_Device_ProcessControlRequest &rArr; Endpoint_Write_Control_Stream_LE &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_USBTask
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceMode_USBTask
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_rndis_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>WriteUSBText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_rndis_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_rndis_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>ReadUSBText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_rndis_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_rndis_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>SeekUSBText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_rndis_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_rndis_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[604]"></a>RNDIS_Device_ProcessNDISSet</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, rndisclassdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RNDIS_Device_ProcessNDISSet
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessRNDISControlMessage
</UL>

<P><STRONG><a name="[602]"></a>RNDIS_Device_ProcessNDISQuery</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, rndisclassdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RNDIS_Device_ProcessNDISQuery &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessRNDISControlMessage
</UL>

<P><STRONG><a name="[603]"></a>RNDIS_Device_ProcessRNDISControlMessage</STRONG> (Thumb, 394 bytes, Stack size 80 bytes, rndisclassdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RNDIS_Device_ProcessRNDISControlMessage &rArr; RNDIS_Device_ProcessNDISQuery &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessNDISQuery
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessNDISSet
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNDIS_Device_ProcessControlRequest
</UL>

<P><STRONG><a name="[61c]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DisableUSBInterrupt
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USBDeInit
</UL>

<P><STRONG><a name="[621]"></a>USB_Init_Device</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbcontroller_lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_Init_Device &rArr; Endpoint_ConfigureEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ConfigureEndpoint
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USBConnect
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableUSBInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetInterface
</UL>

<P><STRONG><a name="[625]"></a>USB_Device_SetConfiguration</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, devicestandardreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_Device_SetConfiguration &rArr; EVENT_USB_Device_ConfigurationChanged &rArr; RNDIS_Device_ConfigureEndpoints &rArr; Endpoint_ConfigureEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Device_ConfigurationChanged
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ClearStatusStage
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
</UL>

<P><STRONG><a name="[626]"></a>USB_Device_GetConfiguration</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, devicestandardreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Device_GetConfiguration &rArr; Endpoint_ClearStatusStage &rArr; WriteControlEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteControlEndpoint
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdDataTransfer
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ClearStatusStage
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
</UL>

<P><STRONG><a name="[627]"></a>USB_Device_GetDescriptor</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, devicestandardreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USB_Device_GetDescriptor &rArr; Endpoint_Write_Control_Stream_LE &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_Write_Control_Stream_LE
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_USB_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
</UL>

<P><STRONG><a name="[629]"></a>USB_Device_SetAddress</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, devicestandardreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_Device_SetAddress &rArr; Endpoint_ClearStatusStage &rArr; WriteControlEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_ReadCommandData
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ClearStatusStage
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommandData
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
</UL>

<P><STRONG><a name="[62a]"></a>USB_Device_ClearSetFeature</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, devicestandardreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_Device_ClearSetFeature &rArr; Endpoint_ClearStatusStage &rArr; WriteControlEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_StallTransaction
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ClearStatusStage
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DisableUSBInterrupt
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableUSBInterrupt
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommandData
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
</UL>

<P><STRONG><a name="[62b]"></a>USB_Device_GetStatus</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, devicestandardreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_Device_GetStatus &rArr; Endpoint_ClearStatusStage &rArr; WriteControlEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteControlEndpoint
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_WriteCommamd
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIE_ReadCommandData
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcdDataTransfer
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint_ClearStatusStage
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DisableUSBInterrupt
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableUSBInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
</UL>

<P><STRONG><a name="[62e]"></a>USB_DeviceTask</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbtask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USB_DeviceTask &rArr; USB_Device_ProcessControlRequest &rArr; EVENT_USB_Device_ControlRequest &rArr; RNDIS_Device_ProcessControlRequest &rArr; Endpoint_Write_Control_Stream_LE &rArr; Endpoint_Write_Stream_LE &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick &rArr; vApplicationTickHook &rArr; inc_timers &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_ProcessControlRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_USBTask
</UL>

<P><STRONG><a name="[637]"></a>ini_rename</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uartcontroltask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFS_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[638]"></a>procTerminal</STRONG> (Thumb, 440 bytes, Stack size 64 bytes, uartcontroltask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = procTerminal &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartControlTask
</UL>

<P><STRONG><a name="[639]"></a>procMBS_RW</STRONG> (Thumb, 478 bytes, Stack size 88 bytes, uartcontroltask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = procMBS_RW &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartControlTask
</UL>

<P><STRONG><a name="[63b]"></a>procS485</STRONG> (Thumb, 498 bytes, Stack size 64 bytes, uartcontroltask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = procS485 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDevice
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDevice
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDevice
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevice
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIOCtl
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartControlTask
</UL>

<P><STRONG><a name="[661]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[65d]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[663]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[662]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e2]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[e3]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[650]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[df]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[656]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
